{
  "api/DNV.Application.Abstractions.Extensions.ApplicationExtensions.html": {
    "href": "api/DNV.Application.Abstractions.Extensions.ApplicationExtensions.html",
    "title": "Class ApplicationExtensions",
    "keywords": "Class ApplicationExtensions Namespace DNV.Application.Abstractions.Extensions Assembly DNV.Application.Abstractions.dll public static class ApplicationExtensions Inheritance object ApplicationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateUoW(IServiceProvider, bool) public static IUnitOfWork CreateUoW(this IServiceProvider serviceProvider, bool autoCommit = true) Parameters serviceProvider IServiceProvider autoCommit bool Returns IUnitOfWork"
  },
  "api/DNV.Application.Abstractions.Extensions.html": {
    "href": "api/DNV.Application.Abstractions.Extensions.html",
    "title": "Namespace DNV.Application.Abstractions.Extensions",
    "keywords": "Namespace DNV.Application.Abstractions.Extensions Classes ApplicationExtensions"
  },
  "api/DNV.Application.Abstractions.IEventHub.html": {
    "href": "api/DNV.Application.Abstractions.IEventHub.html",
    "title": "Interface IEventHub",
    "keywords": "Interface IEventHub Namespace DNV.Application.Abstractions Assembly DNV.Application.Abstractions.dll public interface IEventHub Extension Methods Throws.IfNull<T>(T, string?) Methods PublishAsync<T>(T, CancellationToken) Task PublishAsync<T>(T @event, CancellationToken cancellationToken = default) where T : Event Parameters event T cancellationToken CancellationToken Returns Task Type Parameters T"
  },
  "api/DNV.Application.Abstractions.IQueryableRepository-1.html": {
    "href": "api/DNV.Application.Abstractions.IQueryableRepository-1.html",
    "title": "Interface IQueryableRepository<T>",
    "keywords": "Interface IQueryableRepository<T> Namespace DNV.Application.Abstractions Assembly DNV.Application.Abstractions.dll public interface IQueryableRepository<T> where T : Entity Type Parameters T Extension Methods Throws.IfNull<T>(T, string?) Methods QueryAsync(Expression<Func<T, bool>>, PageParam, SortParam?, CancellationToken) Task<PaginatedResult<T>> QueryAsync(Expression<Func<T, bool>> predict, PageParam pageParam, SortParam? sortParam = null, CancellationToken cancellationToken = default) Parameters predict Expression<Func<T, bool>> pageParam PageParam sortParam SortParam cancellationToken CancellationToken Returns Task<PaginatedResult<T>>"
  },
  "api/DNV.Application.Abstractions.IRepository-1.html": {
    "href": "api/DNV.Application.Abstractions.IRepository-1.html",
    "title": "Interface IRepository<T>",
    "keywords": "Interface IRepository<T> Namespace DNV.Application.Abstractions Assembly DNV.Application.Abstractions.dll public interface IRepository<T> where T : Entity, IAggregateRoot Type Parameters T Extension Methods Throws.IfNull<T>(T, string?) Methods Add(T) T Add(T entity) Parameters entity T Returns T Delete(T) void Delete(T entity) Parameters entity T FindAsync(Expression<Func<T, bool>>, CancellationToken) Task<IEnumerable<T>> FindAsync(Expression<Func<T, bool>> predict, CancellationToken cancellationToken = default) Parameters predict Expression<Func<T, bool>> cancellationToken CancellationToken Returns Task<IEnumerable<T>> GetAsync(string, CancellationToken) Task<T?> GetAsync(string id, CancellationToken cancellationToken = default) Parameters id string cancellationToken CancellationToken Returns Task<T> Update(T) void Update(T entity) Parameters entity T"
  },
  "api/DNV.Application.Abstractions.IUnitOfWork.html": {
    "href": "api/DNV.Application.Abstractions.IUnitOfWork.html",
    "title": "Interface IUnitOfWork",
    "keywords": "Interface IUnitOfWork Namespace DNV.Application.Abstractions Assembly DNV.Application.Abstractions.dll public interface IUnitOfWork : IDisposable Inherited Members IDisposable.Dispose() Extension Methods Throws.IfNull<T>(T, string?) Properties AutoCommit bool AutoCommit { get; set; } Property Value bool Methods ResolveRepository<TR, TE>(out TR?) void ResolveRepository<TR, TE>(out TR? repository) where TR : class, IRepository<TE> where TE : Entity, IAggregateRoot Parameters repository TR Type Parameters TR TE SaveAllEntitiesAsync(CancellationToken) Task<int> SaveAllEntitiesAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<int>"
  },
  "api/DNV.Application.Abstractions.UoW.IUoWProvider.html": {
    "href": "api/DNV.Application.Abstractions.UoW.IUoWProvider.html",
    "title": "Interface IUoWProvider",
    "keywords": "Interface IUoWProvider Namespace DNV.Application.Abstractions.UoW Assembly DNV.Application.Abstractions.dll public interface IUoWProvider Extension Methods Throws.IfNull<T>(T, string?) Properties ChangedEntities IReadOnlyCollection<Entity> ChangedEntities { get; } Property Value IReadOnlyCollection<Entity> Methods JoinUoW<T>(IRepository<T>) void JoinUoW<T>(IRepository<T> repository) where T : Entity, IAggregateRoot Parameters repository IRepository<T> Type Parameters T SaveChangesAsync(CancellationToken) Task<int> SaveChangesAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<int>"
  },
  "api/DNV.Application.Abstractions.UoW.UnitOfWork.html": {
    "href": "api/DNV.Application.Abstractions.UoW.UnitOfWork.html",
    "title": "Class UnitOfWork",
    "keywords": "Class UnitOfWork Namespace DNV.Application.Abstractions.UoW Assembly DNV.Application.Abstractions.dll public class UnitOfWork : IUnitOfWork, IDisposable Inheritance object UnitOfWork Implements IUnitOfWork IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties AutoCommit public bool AutoCommit { get; set; } Property Value bool Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool ResolveRepository<TR, TE>(out TR?) public void ResolveRepository<TR, TE>(out TR? repository) where TR : class, IRepository<TE> where TE : Entity, IAggregateRoot Parameters repository TR Type Parameters TR TE SaveAllEntitiesAsync(CancellationToken) public virtual Task<int> SaveAllEntitiesAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<int>"
  },
  "api/DNV.Application.Abstractions.UoW.html": {
    "href": "api/DNV.Application.Abstractions.UoW.html",
    "title": "Namespace DNV.Application.Abstractions.UoW",
    "keywords": "Namespace DNV.Application.Abstractions.UoW Classes UnitOfWork Interfaces IUoWProvider"
  },
  "api/DNV.Application.Abstractions.html": {
    "href": "api/DNV.Application.Abstractions.html",
    "title": "Namespace DNV.Application.Abstractions",
    "keywords": "Namespace DNV.Application.Abstractions Interfaces IEventHub IQueryableRepository<T> IRepository<T> IUnitOfWork"
  },
  "api/DNV.Application.CQRS.Abstractions.ICommand-1.html": {
    "href": "api/DNV.Application.CQRS.Abstractions.ICommand-1.html",
    "title": "Interface ICommand<TResponse>",
    "keywords": "Interface ICommand<TResponse> Namespace DNV.Application.CQRS.Abstractions Assembly DNV.Application.CQRS.Abstractions.dll public interface ICommand<out TResponse> : IRequest<TResponse>, IBaseRequest Type Parameters TResponse Extension Methods Throws.IfNull<T>(T, string?)"
  },
  "api/DNV.Application.CQRS.Abstractions.ICommand.html": {
    "href": "api/DNV.Application.CQRS.Abstractions.ICommand.html",
    "title": "Interface ICommand",
    "keywords": "Interface ICommand Namespace DNV.Application.CQRS.Abstractions Assembly DNV.Application.CQRS.Abstractions.dll public interface ICommand : IRequest<Unit>, IBaseRequest Extension Methods Throws.IfNull<T>(T, string?)"
  },
  "api/DNV.Application.CQRS.Abstractions.ICommandHandler-1.html": {
    "href": "api/DNV.Application.CQRS.Abstractions.ICommandHandler-1.html",
    "title": "Interface ICommandHandler<TCommand>",
    "keywords": "Interface ICommandHandler<TCommand> Namespace DNV.Application.CQRS.Abstractions Assembly DNV.Application.CQRS.Abstractions.dll public interface ICommandHandler<TCommand> : IRequestHandler<TCommand>, IRequestHandler<TCommand, Unit> where TCommand : ICommand Type Parameters TCommand Inherited Members IRequestHandler<TCommand, Unit>.Handle(TCommand, CancellationToken) Extension Methods Throws.IfNull<T>(T, string?)"
  },
  "api/DNV.Application.CQRS.Abstractions.ICommandHandler-2.html": {
    "href": "api/DNV.Application.CQRS.Abstractions.ICommandHandler-2.html",
    "title": "Interface ICommandHandler<TCommand, TResult>",
    "keywords": "Interface ICommandHandler<TCommand, TResult> Namespace DNV.Application.CQRS.Abstractions Assembly DNV.Application.CQRS.Abstractions.dll public interface ICommandHandler<TCommand, TResult> : IRequestHandler<TCommand, TResult> where TCommand : ICommand<TResult> Type Parameters TCommand TResult Inherited Members IRequestHandler<TCommand, TResult>.Handle(TCommand, CancellationToken) Extension Methods Throws.IfNull<T>(T, string?)"
  },
  "api/DNV.Application.CQRS.Abstractions.IQuery-1.html": {
    "href": "api/DNV.Application.CQRS.Abstractions.IQuery-1.html",
    "title": "Interface IQuery<TResponse>",
    "keywords": "Interface IQuery<TResponse> Namespace DNV.Application.CQRS.Abstractions Assembly DNV.Application.CQRS.Abstractions.dll public interface IQuery<out TResponse> : IRequest<TResponse>, IBaseRequest Type Parameters TResponse Extension Methods Throws.IfNull<T>(T, string?)"
  },
  "api/DNV.Application.CQRS.Abstractions.IQueryHandler-2.html": {
    "href": "api/DNV.Application.CQRS.Abstractions.IQueryHandler-2.html",
    "title": "Interface IQueryHandler<TRequest, TResponse>",
    "keywords": "Interface IQueryHandler<TRequest, TResponse> Namespace DNV.Application.CQRS.Abstractions Assembly DNV.Application.CQRS.Abstractions.dll public interface IQueryHandler<TRequest, TResponse> : IRequestHandler<TRequest, TResponse> where TRequest : IQuery<TResponse> Type Parameters TRequest TResponse Inherited Members IRequestHandler<TRequest, TResponse>.Handle(TRequest, CancellationToken) Extension Methods Throws.IfNull<T>(T, string?)"
  },
  "api/DNV.Application.CQRS.Abstractions.html": {
    "href": "api/DNV.Application.CQRS.Abstractions.html",
    "title": "Namespace DNV.Application.CQRS.Abstractions",
    "keywords": "Namespace DNV.Application.CQRS.Abstractions Interfaces ICommand ICommandHandler<TCommand> ICommandHandler<TCommand, TResult> ICommand<TResponse> IQueryHandler<TRequest, TResponse> IQuery<TResponse>"
  },
  "api/DNV.Authorization.UserManagement.Abstraction.Entity.Company.html": {
    "href": "api/DNV.Authorization.UserManagement.Abstraction.Entity.Company.html",
    "title": "Class Company",
    "keywords": "Class Company Namespace DNV.Authorization.UserManagement.Abstraction.Entity Assembly DNV.Authorization.UserManagement.Abstraction.dll Represents company information for a company record. public class Company Inheritance object Company Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties Active Gets or sets a flag indicating if this company is active or not. public bool Active { get; set; } Property Value bool True if this company is active, otherwise false. CreatedBy Gets or sets the name of user who created this company. public string CreatedBy { get; set; } Property Value string CreatedOnUtc Gets or sets the UTC date that this company is created. public DateTime CreatedOnUtc { get; set; } Property Value DateTime Deleted Gets or sets a flag indicating if this company is deleted or not. public bool Deleted { get; set; } Property Value bool Remarks This property is not being used by in the package now. it will be used to support soft delete in future release. Description Gets or sets the description name for this company. public string Description { get; set; } Property Value string DomainUrl Gets or sets the company domain or sub domain name for this company. public string DomainUrl { get; set; } Property Value string Id Gets or sets the primary key for this company. public string Id { get; set; } Property Value string Name Gets or sets the company name for this company. public string Name { get; set; } Property Value string PermissionKeys Gets the company permission list for this company. public virtual IReadOnlyList<string> PermissionKeys { get; } Property Value IReadOnlyList<string> Permissions Gets or sets the company permissions for this company. public virtual string Permissions { get; set; } Property Value string Permissions are combined as a string which use semicolon(;) as a delimiter. ServiceId Gets or sets the service id for this company. public string ServiceId { get; set; } Property Value string UpdatedBy Gets or sets the name of user who updated this company last time. public string UpdatedBy { get; set; } Property Value string UpdatedOnUtc Gets or sets the UTC date that this company is updated. public DateTime UpdatedOnUtc { get; set; } Property Value DateTime"
  },
  "api/DNV.Authorization.UserManagement.Abstraction.Entity.Role.html": {
    "href": "api/DNV.Authorization.UserManagement.Abstraction.Entity.Role.html",
    "title": "Class Role",
    "keywords": "Class Role Namespace DNV.Authorization.UserManagement.Abstraction.Entity Assembly DNV.Authorization.UserManagement.Abstraction.dll Represents role information for a role record. public class Role Inheritance object Role Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties Active Gets or sets a flag indicating if this role is active or not. public bool Active { get; set; } Property Value bool True if this role is active, otherwise false. Company Gets the company to which this role belongs. public Company Company { get; set; } Property Value Company Remarks Do not set this property to change a role's company. Instead, set CompanyId. It is null if it is a global role. CompanyId Gets or sets id of the company to which this role belongs. public virtual string CompanyId { get; set; } Property Value string Remarks It is null if it is a global role. CreatedBy Gets or sets the name of user who created this role. public string CreatedBy { get; set; } Property Value string CreatedOnUtc Gets or sets the UTC date that this role is created. public DateTime CreatedOnUtc { get; set; } Property Value DateTime Deleted Gets or sets a flag indicating if this role is deleted or not. public bool Deleted { get; set; } Property Value bool Remarks This property is not being used by in the package now. it will be used to support soft delete in future release. Description Gets or sets the description for this role. public string Description { get; set; } Property Value string Id Gets or sets the primary key for this role. public string Id { get; set; } Property Value string Name Gets or sets the role name for this role. public string Name { get; set; } Property Value string PermissionKeys Gets the company permission list for this role. public virtual IReadOnlyList<string> PermissionKeys { get; } Property Value IReadOnlyList<string> Permissions Gets or sets the role permissions for this role. public virtual string Permissions { get; set; } Property Value string Permissions are combined as a string which use semicolon(;) as a delimiter. UpdatedBy Gets or sets the name of user who updated this role last time. public string UpdatedBy { get; set; } Property Value string UpdatedOnUtc Gets or sets the UTC date that this role is updated last time. public DateTime UpdatedOnUtc { get; set; } Property Value DateTime"
  },
  "api/DNV.Authorization.UserManagement.Abstraction.Entity.User.html": {
    "href": "api/DNV.Authorization.UserManagement.Abstraction.Entity.User.html",
    "title": "Class User",
    "keywords": "Class User Namespace DNV.Authorization.UserManagement.Abstraction.Entity Assembly DNV.Authorization.UserManagement.Abstraction.dll Represents user information for a user record. public class User Inheritance object User Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties Active Gets or sets a flag indicating if this user is active or not. public bool Active { get; set; } Property Value bool True if this user is active, otherwise false. CompanyIdList Get the company's id list of company to which this user belongs. public virtual IReadOnlyList<string> CompanyIdList { get; } Property Value IReadOnlyList<string> CompanyIds Gets or sets id of company to which this user belongs. public virtual string CompanyIds { get; set; } Property Value string Company's ids are combined as a string which use semicolon(;) as a delimiter. CompanyList Get the list of companys to which this user belongs. public virtual IReadOnlyList<Company> CompanyList { get; set; } Property Value IReadOnlyList<Company> Remarks Do not set this property to change a user's company. Instead, set CompanyIds. CreatedBy Gets or sets the name of user who created this user. public string CreatedBy { get; set; } Property Value string CreatedOnUtc Gets or sets the UTC date that this user is created. public DateTime CreatedOnUtc { get; set; } Property Value DateTime Deleted Gets or sets a flag indicating if this user is deleted or not. public bool Deleted { get; set; } Property Value bool Remarks This property is not being used by in the package now. it will be used to support soft delete in future release. Description Gets or sets the description for this user. public string Description { get; set; } Property Value string Email Gets or sets the email for this user. public string Email { get; set; } Property Value string FirstName Gets or sets the first name for this user. public string FirstName { get; set; } Property Value string Id Gets or sets the primary key for this user. public string Id { get; set; } Property Value string LastName Gets or sets the last name for this user. public string LastName { get; set; } Property Value string RoleIdList Get the roles id list of roles which this user has. public virtual IReadOnlyList<string> RoleIdList { get; } Property Value IReadOnlyList<string> RoleIds Gets or sets id of roles which this user has. public virtual string RoleIds { get; set; } Property Value string Role's ids are combined as a string which use semicolon(;) as a delimiter. RoleList Get the list of roles which this user has. public virtual IReadOnlyList<Role> RoleList { get; set; } Property Value IReadOnlyList<Role> Remarks Do not set this property to change a user's role. Instead, set RoleIds. SuperAdmin Gets or sets a flag indicating if this user is super admin or not. public bool SuperAdmin { get; set; } Property Value bool True if this user is super admin, otherwise false. UpdatedBy Gets or sets the name of user who updated this user last time. public string UpdatedBy { get; set; } Property Value string UpdatedOnUtc Gets or sets the UTC date that this user is updated last time. public DateTime UpdatedOnUtc { get; set; } Property Value DateTime VeracityId Gets or sets the identity id for this user. public string VeracityId { get; set; } Property Value string Remarks It is an id provided by identity provider."
  },
  "api/DNV.Authorization.UserManagement.Abstraction.Entity.html": {
    "href": "api/DNV.Authorization.UserManagement.Abstraction.Entity.html",
    "title": "Namespace DNV.Authorization.UserManagement.Abstraction.Entity",
    "keywords": "Namespace DNV.Authorization.UserManagement.Abstraction.Entity Classes Company Represents company information for a company record. Role Represents role information for a role record. User Represents user information for a user record."
  },
  "api/DNV.Authorization.UserManagement.Abstraction.ICompany-1.html": {
    "href": "api/DNV.Authorization.UserManagement.Abstraction.ICompany-1.html",
    "title": "Interface ICompany<TCompany>",
    "keywords": "Interface ICompany<TCompany> Namespace DNV.Authorization.UserManagement.Abstraction Assembly DNV.Authorization.UserManagement.Abstraction.dll Provides an abstraction for a storage and management of companies. public interface ICompany<TCompany> where TCompany : Company Type Parameters TCompany The type that represents a company. Extension Methods Throws.IfNull<T>(T, string?) Methods All() Get a list of all company as an asynchronous operation. Task<IEnumerable<TCompany>> All() Returns Task<IEnumerable<TCompany>> A Task<TResult> that represents the company list. Create(TCompany) Creates a new company in a store as an asynchronous operation. Task<TCompany> Create(TCompany company) Parameters company TCompany The company to create in the store. Returns Task<TCompany> A Task<TResult> that represents the company. Delete(string) Deletes a company in a store as an asynchronous operation. Task Delete(string Id) Parameters Id string The company ID to delete. Returns Task The Task that represents the asynchronous operation. List(IEnumerable<string>) Get a list of companies which has the specified ID as an asynchronous operation. Task<IEnumerable<TCompany>> List(IEnumerable<string> Ids) Parameters Ids IEnumerable<string> The company ID list to look for. Returns Task<IEnumerable<TCompany>> A Task<TResult> that represents the company list. QueryCompanys() Return a querable company dataset. IQueryable<TCompany> QueryCompanys() Returns IQueryable<TCompany> Read(string) Get a company which has the specified ID as an asynchronous operation. Task<TCompany> Read(string Id) Parameters Id string The company ID to look for. Returns Task<TCompany> A Task<TResult> that represents the company. ReadByDomain(string) Get a company which has the specified web domain as an asynchronous operation. Task<TCompany> ReadByDomain(string domain) Parameters domain string The web domain to look for. Returns Task<TCompany> A Task<TResult> that represents the company. Update(TCompany) Updates a company in a store as an asynchronous operation. Task Update(TCompany company) Parameters company TCompany The company to update in the store. Returns Task The Task that represents the asynchronous operation."
  },
  "api/DNV.Authorization.UserManagement.Abstraction.IRole-1.html": {
    "href": "api/DNV.Authorization.UserManagement.Abstraction.IRole-1.html",
    "title": "Interface IRole<TRole>",
    "keywords": "Interface IRole<TRole> Namespace DNV.Authorization.UserManagement.Abstraction Assembly DNV.Authorization.UserManagement.Abstraction.dll Provides an abstraction for a storage and management of roles. public interface IRole<TRole> where TRole : Role Type Parameters TRole The type that represents a role. Extension Methods Throws.IfNull<T>(T, string?) Methods All() Get a list of all role as an asynchronous operation. Task<IEnumerable<TRole>> All() Returns Task<IEnumerable<TRole>> A Task<TResult> that represents the role list. Create(TRole) Creates a new role in a store as an asynchronous operation. Task<TRole> Create(TRole role) Parameters role TRole The role to create in the store. Returns Task<TRole> A Task<TResult> that represents the role. Delete(string) Deletes a role in a store as an asynchronous operation. Task Delete(string Id) Parameters Id string The role ID to delete. Returns Task The Task that represents the asynchronous operation. GetRolesOfCompany(string) Get a list of a company's roles as an asynchronous operation. Task<IEnumerable<TRole>> GetRolesOfCompany(string companyId) Parameters companyId string The company ID to look for. Returns Task<IEnumerable<TRole>> A Task<TResult> that represents the role list. QueryRoles() Return a querable role dataset. IQueryable<TRole> QueryRoles() Returns IQueryable<TRole> Read(string) Get a role which has the specified ID as an asynchronous operation. Task<TRole> Read(string Id) Parameters Id string The role ID to look for. Returns Task<TRole> A Task<TResult> that represents the role. Update(TRole) Updates a role in a store as an asynchronous operation. Task Update(TRole role) Parameters role TRole The role to update in the store. Returns Task The Task that represents the asynchronous operation."
  },
  "api/DNV.Authorization.UserManagement.Abstraction.IUser-1.html": {
    "href": "api/DNV.Authorization.UserManagement.Abstraction.IUser-1.html",
    "title": "Interface IUser<TUser>",
    "keywords": "Interface IUser<TUser> Namespace DNV.Authorization.UserManagement.Abstraction Assembly DNV.Authorization.UserManagement.Abstraction.dll Provides an abstraction for a storage and management of roles. public interface IUser<TUser> where TUser : User Type Parameters TUser The type that represents a user. Extension Methods Throws.IfNull<T>(T, string?) Methods All(PageParam) Get a list of all user as an asynchronous operation. Task<PaginatedResult<TUser>> All(PageParam pageParam = null) Parameters pageParam PageParam The page index and size PageParam, starting from 1 Returns Task<PaginatedResult<TUser>> A Task<TResult> that represents the user list. Create(TUser) Creates a new user in a store as an asynchronous operation. Task<TUser> Create(TUser user) Parameters user TUser The user to create in the store. Returns Task<TUser> A Task<TResult> that represents the user. Delete(string) Deletes a user in a store as an asynchronous operation. Task Delete(string Id) Parameters Id string The user ID to delete. Returns Task The Task that represents the asynchronous operation. GetUserByEmail(string) Get a user list by matching email. Task<TUser> GetUserByEmail(string email) Parameters email string The email address to look for. Returns Task<TUser> A Task<TResult> that represents the user list. GetUsersOfCompany(string, PageParam) Get a user list of a company. Task<PaginatedResult<TUser>> GetUsersOfCompany(string companyId, PageParam pageParam = null) Parameters companyId string The company ID to look for. pageParam PageParam The page index and size PageParam, starting from 1 Returns Task<PaginatedResult<TUser>> A Task<TResult> that represents the user list. GetUsersOfRole(string) Get a user list of a role Task<IEnumerable<TUser>> GetUsersOfRole(string roleId) Parameters roleId string The role ID to look for. Returns Task<IEnumerable<TUser>> A Task<TResult> that represents the user list. QueryUsers() Return a querable user dataset. IQueryable<TUser> QueryUsers() Returns IQueryable<TUser> Read(string) Get a user which has the specified ID as an asynchronous operation. Task<TUser> Read(string Id) Parameters Id string The user ID to look for. Returns Task<TUser> A Task<TResult> that represents the user. ReadByIdentityId(string) Get a user which has the specified Identity ID as an asynchronous operation. Task<TUser> ReadByIdentityId(string IdentityId) Parameters IdentityId string The identity id to look for. It is an ID provided by Identity provider. It is varacity id if Varacity provide identity. Returns Task<TUser> A Task<TResult> that represents the user. Update(TUser) Updates a user in a store as an asynchronous operation. Task Update(TUser user) Parameters user TUser The user to update in the store. Returns Task The Task that represents the asynchronous operation."
  },
  "api/DNV.Authorization.UserManagement.Abstraction.IUserSynchronization-1.html": {
    "href": "api/DNV.Authorization.UserManagement.Abstraction.IUserSynchronization-1.html",
    "title": "Interface IUserSynchronization<TUser>",
    "keywords": "Interface IUserSynchronization<TUser> Namespace DNV.Authorization.UserManagement.Abstraction Assembly DNV.Authorization.UserManagement.Abstraction.dll Provides an abstraction for user synchronization between local and third party platform. public interface IUserSynchronization<TUser> where TUser : User Type Parameters TUser Extension Methods Throws.IfNull<T>(T, string?) Methods PullUserFromSource(TUser) pull a user update from the third party platform. Task<TUser> PullUserFromSource(TUser user) Parameters user TUser The user to update at the local. Returns Task<TUser> A Task<TResult> that represents the user. PushUserToSource(TUser) push a user update to the third party platform. Task<TUser> PushUserToSource(TUser user) Parameters user TUser The user to update in the third party platform. Returns Task<TUser> A Task<TResult> that represents the user. RemoveUserAtLocal(TUser) remove a user or user access at the local. Task<TUser> RemoveUserAtLocal(TUser user) Parameters user TUser The user to remove at the local. Returns Task<TUser> A Task<TResult> that represents the user. RemoveUserAtSource(TUser) remove a user or user access on the third party platform. Task<TUser> RemoveUserAtSource(TUser user) Parameters user TUser The user to remove at the third party platform. Returns Task<TUser> A Task<TResult> that represents the user."
  },
  "api/DNV.Authorization.UserManagement.Abstraction.StringHelper.html": {
    "href": "api/DNV.Authorization.UserManagement.Abstraction.StringHelper.html",
    "title": "Class StringHelper",
    "keywords": "Class StringHelper Namespace DNV.Authorization.UserManagement.Abstraction Assembly DNV.Authorization.UserManagement.Abstraction.dll string helper class. public static class StringHelper Inheritance object StringHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods JoinList(IEnumerable<string>, string) Join a list to a string public static string JoinList(this IEnumerable<string> source, string delimiter) Parameters source IEnumerable<string> The source list to join delimiter string The character delimit the string. Returns string SplitToList(string, char) Split a string and combine all sub strings as a list. public static List<string> SplitToList(this string source, char delimiter) Parameters source string The source stirng to split. delimiter char The character delimit the string. Returns List<string>"
  },
  "api/DNV.Authorization.UserManagement.Abstraction.UserManagementMode.html": {
    "href": "api/DNV.Authorization.UserManagement.Abstraction.UserManagementMode.html",
    "title": "Enum UserManagementMode",
    "keywords": "Enum UserManagementMode Namespace DNV.Authorization.UserManagement.Abstraction Assembly DNV.Authorization.UserManagement.Abstraction.dll Provide an enum to define supported user management business flow. public enum UserManagementMode Extension Methods Throws.IfNull<T>(T, string?) EnumExtensions.GetPermissionKey(Enum) Fields Company_CompanyRole_User = 0 A Role must belongs to a compnay. A User must belongs to one or mutiple companies. A User has one or mutiple company roles. Company_GlobalRole_User = 1 Roles desn't belong to any compnay. They are global. A User must belongs to one or mutiple companies. A User has one or mutiple roles. Role_User = 2 Roles are global. There is no company. A User has one or mutiple roles."
  },
  "api/DNV.Authorization.UserManagement.Abstraction.UserManagementSettings.html": {
    "href": "api/DNV.Authorization.UserManagement.Abstraction.UserManagementSettings.html",
    "title": "Class UserManagementSettings",
    "keywords": "Class UserManagementSettings Namespace DNV.Authorization.UserManagement.Abstraction Assembly DNV.Authorization.UserManagement.Abstraction.dll Provides a class to configure the user management business flow. public class UserManagementSettings Inheritance object UserManagementSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties Mode Gets or sets the user management business flow. public UserManagementMode Mode { get; set; } Property Value UserManagementMode"
  },
  "api/DNV.Authorization.UserManagement.Abstraction.html": {
    "href": "api/DNV.Authorization.UserManagement.Abstraction.html",
    "title": "Namespace DNV.Authorization.UserManagement.Abstraction",
    "keywords": "Namespace DNV.Authorization.UserManagement.Abstraction Classes StringHelper string helper class. UserManagementSettings Provides a class to configure the user management business flow. Interfaces ICompany<TCompany> Provides an abstraction for a storage and management of companies. IRole<TRole> Provides an abstraction for a storage and management of roles. IUserSynchronization<TUser> Provides an abstraction for user synchronization between local and third party platform. IUser<TUser> Provides an abstraction for a storage and management of roles. Enums UserManagementMode Provide an enum to define supported user management business flow."
  },
  "api/DNV.Authorization.UserManagement.ApiControllers.AccessCrossCompanyPermissionFilterAttribute.html": {
    "href": "api/DNV.Authorization.UserManagement.ApiControllers.AccessCrossCompanyPermissionFilterAttribute.html",
    "title": "Class AccessCrossCompanyPermissionFilterAttribute",
    "keywords": "Class AccessCrossCompanyPermissionFilterAttribute Namespace DNV.Authorization.UserManagement.ApiControllers Assembly DNV.Authorization.UserManagement.ApiControllers.dll Provides a api controller filter to add permissions check for users when access resource of company they do not belong. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = false)] public class AccessCrossCompanyPermissionFilterAttribute : TypeFilterAttribute, IFilterFactory, IOrderedFilter, IFilterMetadata Inheritance object Attribute TypeFilterAttribute AccessCrossCompanyPermissionFilterAttribute Implements IFilterFactory IOrderedFilter IFilterMetadata Inherited Members TypeFilterAttribute.CreateInstance(IServiceProvider) TypeFilterAttribute.Arguments TypeFilterAttribute.ImplementationType TypeFilterAttribute.Order TypeFilterAttribute.IsReusable Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors AccessCrossCompanyPermissionFilterAttribute(params object[]) Constructs a new instance of AccessCrossCompanyPermissionFilterAttribute. public AccessCrossCompanyPermissionFilterAttribute(params object[] permissionsToCheck) Parameters permissionsToCheck object[] A collection of required permissions. AccessCrossCompanyPermissionFilterAttribute(params string[]) Constructs a new instance of AccessCrossCompanyPermissionFilterAttribute. public AccessCrossCompanyPermissionFilterAttribute(params string[] permissionsToCheck) Parameters permissionsToCheck string[] A collection of required permissions. Properties PermissionsToCheck Get a collection of required permissions. public string[] PermissionsToCheck { get; } Property Value string[]"
  },
  "api/DNV.Authorization.UserManagement.ApiControllers.AccessibleCompanyFilterAttribute.html": {
    "href": "api/DNV.Authorization.UserManagement.ApiControllers.AccessibleCompanyFilterAttribute.html",
    "title": "Class AccessibleCompanyFilterAttribute",
    "keywords": "Class AccessibleCompanyFilterAttribute Namespace DNV.Authorization.UserManagement.ApiControllers Assembly DNV.Authorization.UserManagement.ApiControllers.dll Provides a api controller filter to check if user has access on a specific company resource. public class AccessibleCompanyFilterAttribute : TypeFilterAttribute, IFilterFactory, IOrderedFilter, IFilterMetadata Inheritance object Attribute TypeFilterAttribute AccessibleCompanyFilterAttribute Implements IFilterFactory IOrderedFilter IFilterMetadata Inherited Members TypeFilterAttribute.CreateInstance(IServiceProvider) TypeFilterAttribute.Arguments TypeFilterAttribute.ImplementationType TypeFilterAttribute.Order TypeFilterAttribute.IsReusable Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Remarks The specific Company Id is specified in attribute CompanyIdentityFieldNameFilterAttribute Constructors AccessibleCompanyFilterAttribute() Constructs a new instance of AccessibleCompanyFilterAttribute. public AccessibleCompanyFilterAttribute()"
  },
  "api/DNV.Authorization.UserManagement.ApiControllers.CompaniesController-2.html": {
    "href": "api/DNV.Authorization.UserManagement.ApiControllers.CompaniesController-2.html",
    "title": "Class CompaniesController<TCompany, TUser>",
    "keywords": "Class CompaniesController<TCompany, TUser> Namespace DNV.Authorization.UserManagement.ApiControllers Assembly DNV.Authorization.UserManagement.ApiControllers.dll [Authorize] [Produces(\"application/json\", new string[] { })] [ApiController] [Route(\"api/companies\")] [TypeFilter(typeof(ErrorCodeExceptionFilter))] [ApiExplorerSettings(GroupName = \"UserManagement's Company APIs\")] public class CompaniesController<TCompany, TUser> : UserManagementBaseController<TUser> where TCompany : Company, new() where TUser : User, new() Type Parameters TCompany TUser Inheritance object ControllerBase UserManagementBaseController<TUser> CompaniesController<TCompany, TUser> Inherited Members UserManagementBaseController<TUser>.GetCurrentUser() UserManagementBaseController<TUser>.IsCompanyAccessible(string) UserManagementBaseController<TUser>.FetchRole<TRole>(string, IPermissionRepository, IRole<TRole>) UserManagementBaseController<TUser>.PruneUserInfo(UserViewModel, string) UserManagementBaseController<TUser>.PruneUserCompanyInfo(UserViewModel, string) UserManagementBaseController<TUser>.PopulateUserRoleInfo(TUser, UserViewModel, IEnumerable<PermissionEntity>) UserManagementBaseController<TUser>.GetAllUsers(IUser<TUser>, IPermissionRepository, PageParam) UserManagementBaseController<TUser>.GetAllRoles<TRole>(IRole<TRole>, IPermissionRepository) ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.User object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors CompaniesController(ICompany<TCompany>, IPermissionRepository, IUser<TUser>, PermissionOptions) public CompaniesController(ICompany<TCompany> companyRepository, IPermissionRepository permissionRepository, IUser<TUser> userRepository, PermissionOptions premissionOptions) Parameters companyRepository ICompany<TCompany> permissionRepository IPermissionRepository userRepository IUser<TUser> premissionOptions PermissionOptions Methods CreateCompany(CompanyEditModel) Create a company. [HttpPost] [Route(\"\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageCompany })] [ProducesResponseType(200, Type = typeof(string))] [ProducesResponseType(500, Type = typeof(string))] [ProducesResponseType(400, Type = typeof(string))] public Task<ActionResult> CreateCompany(CompanyEditModel model) Parameters model CompanyEditModel Returns Task<ActionResult> Remarks Required Permissions: ManageCompany Sample request: { \"name\": \"Item1\", \"description\": \"\", \"domainUrl\": \"\", \"active\":true, \"permissionKeys\":[\"ReadWeather\",\"ManageWeather\"] } CreateCompanyFromCustomModel(TCompany) Create a company using custom model. Only if custom company model is used. [HttpPost] [Route(\"custommodel\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageCompany })] [ProducesResponseType(200, Type = typeof(string))] [ProducesResponseType(500, Type = typeof(string))] [ProducesResponseType(400, Type = typeof(string))] [ApiExplorerSettings(GroupName = \"UserManagement's Company APIs - Custom Model\")] public Task<ActionResult> CreateCompanyFromCustomModel(TCompany model) Parameters model TCompany Returns Task<ActionResult> Remarks Required Permissions: ManageCompany Sample request: { \"name\": \"Item1\", \"description\": \"\", \"domainUrl\": \"\", \"active\":true, \"customProperty\":\"\", \"permissionKeys\":[\"ReadWeather\",\"ManageWeather\"] } DeleteCompany(string) Delete a company. It is hard delete. [HttpDelete] [Route(\"{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageCompany })] public Task DeleteCompany(string id) Parameters id string Company Id Returns Task Remarks Required Permissions: ManageCompany GetCompany(string) Get a company by companyId [HttpGet] [Route(\"{companyId}\")] [CompanyIdentityFieldNameFilter(\"companyId\", \"\", \"\")] [AccessCrossCompanyPermissionFilter(new object[] { PermissionMatrix.Premissions.ViewCompany })] [AccessibleCompanyFilter] public Task<CompanyViewDto> GetCompany(string companyId) Parameters companyId string Company Id Returns Task<CompanyViewDto> Remarks Required Permission: ViewCompany GetCompanyAdmin(string) [HttpGet] [Route(\"obsoletedapi/{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ViewCompany })] [Obsolete(\"It's an obsoleted end point. not suggest to use.\", true)] public Task<CompanyViewDto> GetCompanyAdmin(string id) Parameters id string Returns Task<CompanyViewDto> GetCompanyByDomain(string) Get a company from its dedicated domain url. [HttpGet] [Route(\"domain/{*url}\")] [ProducesResponseType(200, Type = typeof(CompanyViewDto))] [ProducesResponseType(500, Type = typeof(string))] [ProducesResponseType(400, Type = typeof(string))] [ProducesResponseType(204, Type = typeof(string))] [ProducesResponseType(403, Type = typeof(string))] public Task<ActionResult> GetCompanyByDomain(string url) Parameters url string Company Domain URL Returns Task<ActionResult> Remarks Required Permission: None GetCompanys() Get all companies. [HttpGet] [Route(\"\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ViewCompany })] public Task<IEnumerable<CompanyViewDto>> GetCompanys() Returns Task<IEnumerable<CompanyViewDto>> An array of company Remarks Required Permission: ViewCompany UpdateCompany(string, CompanyEditModel) Update a company [HttpPut] [Route(\"{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageCompany })] [ProducesResponseType(200, Type = typeof(string))] [ProducesResponseType(500, Type = typeof(string))] [ProducesResponseType(400, Type = typeof(string))] public Task<ActionResult> UpdateCompany(string id, CompanyEditModel model) Parameters id string model CompanyEditModel Returns Task<ActionResult> Remarks Required Permissions: ManageCompany Sample request: { \"name\": \"Item1\", \"description\": \"\", \"domainUrl\": \"\", \"active\":true, \"permissionKeys\":[\"ReadWeather\",\"ManageWeather\"] } UpdateCompanyFromCustomModel(string, TCompany) Update a company using custom model. Only if custom company model is used. [HttpPut] [Route(\"custommodel/{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageCompany })] [ProducesResponseType(200, Type = typeof(string))] [ProducesResponseType(500, Type = typeof(string))] [ProducesResponseType(400, Type = typeof(string))] [ApiExplorerSettings(GroupName = \"UserManagement's Company APIs - Custom Model\")] public Task<ActionResult> UpdateCompanyFromCustomModel(string id, TCompany model) Parameters id string model TCompany Returns Task<ActionResult> Remarks Required Permissions: ManageCompany Sample request: { \"name\": \"Item1\", \"description\": \"\", \"domainUrl\": \"\", \"active\":true, \"permissionKeys\":[\"ReadWeather\",\"ManageWeather\"] }"
  },
  "api/DNV.Authorization.UserManagement.ApiControllers.DTO.CompanyEditModel.html": {
    "href": "api/DNV.Authorization.UserManagement.ApiControllers.DTO.CompanyEditModel.html",
    "title": "Class CompanyEditModel",
    "keywords": "Class CompanyEditModel Namespace DNV.Authorization.UserManagement.ApiControllers.DTO Assembly DNV.Authorization.UserManagement.ApiControllers.dll Represents company information for a company edit record. public class CompanyEditModel Inheritance object CompanyEditModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties Active Gets or sets a flag indicating if this company is active or not. public bool Active { get; set; } Property Value bool True if this company is active, otherwise false. Description Gets or sets the company description for this company. public string Description { get; set; } Property Value string DomainUrl Gets or sets the company web domain for this company. public string DomainUrl { get; set; } Property Value string Name Gets or sets the company name for this company. [Required(AllowEmptyStrings = false)] public string Name { get; set; } Property Value string PermissionKeys Gets or sets the company permissions for this company. public IEnumerable<string> PermissionKeys { get; set; } Property Value IEnumerable<string> ServiceId Gets or sets the service id for this company. public string ServiceId { get; set; } Property Value string"
  },
  "api/DNV.Authorization.UserManagement.ApiControllers.DTO.CompanyViewDto.html": {
    "href": "api/DNV.Authorization.UserManagement.ApiControllers.DTO.CompanyViewDto.html",
    "title": "Class CompanyViewDto",
    "keywords": "Class CompanyViewDto Namespace DNV.Authorization.UserManagement.ApiControllers.DTO Assembly DNV.Authorization.UserManagement.ApiControllers.dll Represents company information for a company view record. public class CompanyViewDto Inheritance object CompanyViewDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties Active Gets or sets a flag indicating if this company is active or not. public bool Active { get; set; } Property Value bool True if this company is active, otherwise false. CreatedBy Gets or sets the name of user who created this company. public string CreatedBy { get; set; } Property Value string CreatedOnUtc Gets or sets the UTC date that this company is created. public DateTime CreatedOnUtc { get; set; } Property Value DateTime Deleted Gets or sets a flag indicating if this company is deleted or not. public bool Deleted { get; set; } Property Value bool Remarks This property is not being used by in the package now. it will be used to support soft delete in future release. Description Gets or sets the description name for this company. public string Description { get; set; } Property Value string DomainUrl Gets or sets the company domain or sub domain name for this company. public string DomainUrl { get; set; } Property Value string Id Gets or sets the primary key for this company. public string Id { get; set; } Property Value string Name Gets or sets the company name for this company. public string Name { get; set; } Property Value string Permissions Gets or sets the company permissions for this company. public IEnumerable<PermissionEntity> Permissions { get; set; } Property Value IEnumerable<PermissionEntity> Permissions are combined as a string which use semicolon(;) as a delimiter. ServiceId Gets or sets the service id for this company. public string ServiceId { get; set; } Property Value string UpdatedBy Gets or sets the name of user who updated this company last time. public string UpdatedBy { get; set; } Property Value string UpdatedOnUtc Gets or sets the UTC date that this company is updated. public DateTime UpdatedOnUtc { get; set; } Property Value DateTime"
  },
  "api/DNV.Authorization.UserManagement.ApiControllers.DTO.PaginatedResultViewModel-1.html": {
    "href": "api/DNV.Authorization.UserManagement.ApiControllers.DTO.PaginatedResultViewModel-1.html",
    "title": "Class PaginatedResultViewModel<T>",
    "keywords": "Class PaginatedResultViewModel<T> Namespace DNV.Authorization.UserManagement.ApiControllers.DTO Assembly DNV.Authorization.UserManagement.ApiControllers.dll public class PaginatedResultViewModel<T> Type Parameters T Inheritance object PaginatedResultViewModel<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors PaginatedResultViewModel(PaginatedResult<T>) public PaginatedResultViewModel(PaginatedResult<T> paginatedResult) Parameters paginatedResult PaginatedResult<T> Properties List public IEnumerable<T> List { get; set; } Property Value IEnumerable<T> PageIndex public int PageIndex { get; set; } Property Value int PageSize public int PageSize { get; set; } Property Value int TotalCount public int? TotalCount { get; set; } Property Value int?"
  },
  "api/DNV.Authorization.UserManagement.ApiControllers.DTO.RoleEditModel.html": {
    "href": "api/DNV.Authorization.UserManagement.ApiControllers.DTO.RoleEditModel.html",
    "title": "Class RoleEditModel",
    "keywords": "Class RoleEditModel Namespace DNV.Authorization.UserManagement.ApiControllers.DTO Assembly DNV.Authorization.UserManagement.ApiControllers.dll Represents role information for a role edit record. public class RoleEditModel Inheritance object RoleEditModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties Active Gets or sets a flag indicating if this role is active or not. public bool Active { get; set; } Property Value bool True if this role is active, otherwise false. Description Gets or sets the role description for this role. public string Description { get; set; } Property Value string Name Gets or sets the role name for this role. [Required(AllowEmptyStrings = false)] public string Name { get; set; } Property Value string PermissionKeys Gets the company permission list for this role. [Required] public IList<string> PermissionKeys { get; set; } Property Value IList<string>"
  },
  "api/DNV.Authorization.UserManagement.ApiControllers.DTO.RoleViewDto.html": {
    "href": "api/DNV.Authorization.UserManagement.ApiControllers.DTO.RoleViewDto.html",
    "title": "Class RoleViewDto",
    "keywords": "Class RoleViewDto Namespace DNV.Authorization.UserManagement.ApiControllers.DTO Assembly DNV.Authorization.UserManagement.ApiControllers.dll Represents role information for a role view record.. public class RoleViewDto Inheritance object RoleViewDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties Active Gets or sets a flag indicating if this role is active or not. public bool Active { get; set; } Property Value bool True if this role is active, otherwise false. Company Gets the company to which this role belongs. public Company Company { get; set; } Property Value Company Remarks Do not set this property to change a role's company. Instead, set CompanyId. It is null if it is a global role. CreatedBy Gets or sets the name of user who created this role. public string CreatedBy { get; set; } Property Value string CreatedOnUtc Gets or sets the UTC date that this role is created. public DateTime CreatedOnUtc { get; set; } Property Value DateTime Deleted Gets or sets a flag indicating if this role is deleted or not. public bool Deleted { get; set; } Property Value bool Remarks This property is not being used by in the package now. it will be used to support soft delete in future release. Description Gets or sets the description for this role. public string Description { get; set; } Property Value string Id Gets or sets the primary key for this role. public string Id { get; set; } Property Value string Name Gets or sets the role name for this role. public string Name { get; set; } Property Value string Permissions Gets or sets the role permissions for this role. public IEnumerable<PermissionEntity> Permissions { get; set; } Property Value IEnumerable<PermissionEntity> Permissions are combined as a string which use semicolon(;) as a delimiter. UpdatedBy Gets or sets the name of user who updated this role last time. public string UpdatedBy { get; set; } Property Value string UpdatedOnUtc Gets or sets the UTC date that this role is updated last time. public DateTime UpdatedOnUtc { get; set; } Property Value DateTime"
  },
  "api/DNV.Authorization.UserManagement.ApiControllers.DTO.UserEditModel.html": {
    "href": "api/DNV.Authorization.UserManagement.ApiControllers.DTO.UserEditModel.html",
    "title": "Class UserEditModel",
    "keywords": "Class UserEditModel Namespace DNV.Authorization.UserManagement.ApiControllers.DTO Assembly DNV.Authorization.UserManagement.ApiControllers.dll Represents user information for a user edit record. public class UserEditModel Inheritance object UserEditModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties Active Gets or sets a flag indicating if this user is active or not. public bool Active { get; set; } Property Value bool True if this user is active, otherwise false. CompanyIds Gets or sets id of company to which this user belongs. public IList<string> CompanyIds { get; set; } Property Value IList<string> Company's ids are combined as a string which use semicolon(;) as a delimiter. Description Gets or sets the description for this user. public string Description { get; set; } Property Value string Email Gets or sets the email for this user. [Required(AllowEmptyStrings = false)] public string Email { get; set; } Property Value string FirstName Gets or sets the first name for this user. public string FirstName { get; set; } Property Value string LastName Gets or sets the last name for this user. public string LastName { get; set; } Property Value string RoleIds Gets or sets id of roles which this user has. public IList<string> RoleIds { get; set; } Property Value IList<string> Role's ids are combined as a string which use semicolon(;) as a delimiter. SuperAdmin Gets or sets a flag indicating if this user is super admin or not. public bool SuperAdmin { get; set; } Property Value bool True if this user is super admin, otherwise false. VeracityId Gets or sets the identity id for this user. [Required(AllowEmptyStrings = false)] public string VeracityId { get; set; } Property Value string Remarks It is an id provided by identity provider."
  },
  "api/DNV.Authorization.UserManagement.ApiControllers.DTO.UserViewModel.html": {
    "href": "api/DNV.Authorization.UserManagement.ApiControllers.DTO.UserViewModel.html",
    "title": "Class UserViewModel",
    "keywords": "Class UserViewModel Namespace DNV.Authorization.UserManagement.ApiControllers.DTO Assembly DNV.Authorization.UserManagement.ApiControllers.dll Represents user information for a user view record. public class UserViewModel Inheritance object UserViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties Active Gets or sets a flag indicating if this user is active or not. public bool Active { get; set; } Property Value bool True if this user is active, otherwise false. Companies Get the list of companys to which this user belongs. public IEnumerable<CompanyViewDto> Companies { get; set; } Property Value IEnumerable<CompanyViewDto> Remarks Do not set this property to change a user's company. Instead, set CompanyIds. CreatedBy Gets or sets the name of user who created this user. public string CreatedBy { get; set; } Property Value string CreatedOnUtc Gets or sets the UTC date that this user is created. public DateTime CreatedOnUtc { get; set; } Property Value DateTime Deleted Gets or sets a flag indicating if this user is deleted or not. public bool Deleted { get; set; } Property Value bool Remarks This property is not being used by in the package now. it will be used to support soft delete in future release. Description Gets or sets the description for this user. public string Description { get; set; } Property Value string Email Gets or sets the email for this user. public string Email { get; set; } Property Value string FirstName Gets or sets the first name for this user. public string FirstName { get; set; } Property Value string Id Gets or sets the primary key for this user. public string Id { get; set; } Property Value string LastName Gets or sets the last name for this user. public string LastName { get; set; } Property Value string Roles Get the list of roles which this user has. public IEnumerable<RoleViewDto> Roles { get; set; } Property Value IEnumerable<RoleViewDto> Remarks Do not set this property to change a user's role. Instead, set RoleIds. SuperAdmin Gets or sets a flag indicating if this user is super admin or not. public bool SuperAdmin { get; set; } Property Value bool True if this user is super admin, otherwise false. UpdatedBy Gets or sets the name of user who updated this user last time. public string UpdatedBy { get; set; } Property Value string UpdatedOnUtc Gets or sets the UTC date that this user is updated last time. public DateTime UpdatedOnUtc { get; set; } Property Value DateTime VeracityId Gets or sets the identity id for this user. public string VeracityId { get; set; } Property Value string Remarks It is an id provided by identity provider."
  },
  "api/DNV.Authorization.UserManagement.ApiControllers.DTO.html": {
    "href": "api/DNV.Authorization.UserManagement.ApiControllers.DTO.html",
    "title": "Namespace DNV.Authorization.UserManagement.ApiControllers.DTO",
    "keywords": "Namespace DNV.Authorization.UserManagement.ApiControllers.DTO Classes CompanyEditModel Represents company information for a company edit record. CompanyViewDto Represents company information for a company view record. PaginatedResultViewModel<T> RoleEditModel Represents role information for a role edit record. RoleViewDto Represents role information for a role view record.. UserEditModel Represents user information for a user edit record. UserViewModel Represents user information for a user view record."
  },
  "api/DNV.Authorization.UserManagement.ApiControllers.DummyUserSynchronization.html": {
    "href": "api/DNV.Authorization.UserManagement.ApiControllers.DummyUserSynchronization.html",
    "title": "Class DummyUserSynchronization",
    "keywords": "Class DummyUserSynchronization Namespace DNV.Authorization.UserManagement.ApiControllers Assembly DNV.Authorization.UserManagement.ApiControllers.dll public class DummyUserSynchronization : IUserSynchronization<User> Inheritance object DummyUserSynchronization Implements IUserSynchronization<User> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Methods PullUserFromSource(User) pull a user update from the third party platform. public Task<User> PullUserFromSource(User user) Parameters user User The user to update at the local. Returns Task<User> A Task<TResult> that represents the user. PushUserToSource(User) push a user update to the third party platform. public Task<User> PushUserToSource(User user) Parameters user User The user to update in the third party platform. Returns Task<User> A Task<TResult> that represents the user. RemoveUserAtLocal(User) remove a user or user access at the local. public Task<User> RemoveUserAtLocal(User user) Parameters user User The user to remove at the local. Returns Task<User> A Task<TResult> that represents the user. RemoveUserAtSource(User) remove a user or user access on the third party platform. public Task<User> RemoveUserAtSource(User user) Parameters user User The user to remove at the third party platform. Returns Task<User> A Task<TResult> that represents the user."
  },
  "api/DNV.Authorization.UserManagement.ApiControllers.GlobalRolesController-2.html": {
    "href": "api/DNV.Authorization.UserManagement.ApiControllers.GlobalRolesController-2.html",
    "title": "Class GlobalRolesController<TRole, TUser>",
    "keywords": "Class GlobalRolesController<TRole, TUser> Namespace DNV.Authorization.UserManagement.ApiControllers Assembly DNV.Authorization.UserManagement.ApiControllers.dll [Authorize] [Produces(\"application/json\", new string[] { })] [ApiController] [Route(\"api/roles\")] [TypeFilter(typeof(ErrorCodeExceptionFilter))] [ApiExplorerSettings(GroupName = \"UserManagement's Role APIs\")] public class GlobalRolesController<TRole, TUser> : UserManagementBaseController<TUser> where TRole : Role, new() where TUser : User, new() Type Parameters TRole TUser Inheritance object ControllerBase UserManagementBaseController<TUser> GlobalRolesController<TRole, TUser> Inherited Members UserManagementBaseController<TUser>.GetCurrentUser() UserManagementBaseController<TUser>.IsCompanyAccessible(string) UserManagementBaseController<TUser>.FetchRole<TRole>(string, IPermissionRepository, IRole<TRole>) UserManagementBaseController<TUser>.PruneUserInfo(UserViewModel, string) UserManagementBaseController<TUser>.PruneUserCompanyInfo(UserViewModel, string) UserManagementBaseController<TUser>.PopulateUserRoleInfo(TUser, UserViewModel, IEnumerable<PermissionEntity>) UserManagementBaseController<TUser>.GetAllUsers(IUser<TUser>, IPermissionRepository, PageParam) UserManagementBaseController<TUser>.GetAllRoles<TRole>(IRole<TRole>, IPermissionRepository) ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.User object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors GlobalRolesController(IUser<TUser>, IRole<TRole>, IPermissionRepository, PermissionOptions) public GlobalRolesController(IUser<TUser> userRepository, IRole<TRole> roleRepository, IPermissionRepository permissionRepository, PermissionOptions premissionOptions) Parameters userRepository IUser<TUser> roleRepository IRole<TRole> permissionRepository IPermissionRepository premissionOptions PermissionOptions Methods CreateRole(RoleEditModel) Create a role [HttpPost] [Route(\"\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageRole })] public Task<string> CreateRole(RoleEditModel model) Parameters model RoleEditModel Returns Task<string> Remarks Required Permission: ManageRole Sample request: { \"name\": \"Item1\", \"description\": \"\", \"active\":true, \"permissionKeys\":[\"ReadWeather\",\"ManageWeather\"] } CreateRoleFromCustomModel(TRole) Create a role using custom model. Only if custom role model is used. [HttpPost] [Route(\"custommodel\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageRole })] [ApiExplorerSettings(GroupName = \"UserManagement's Role APIs - Custom Model\")] public Task<string> CreateRoleFromCustomModel(TRole model) Parameters model TRole Returns Task<string> Remarks Required Permission: ManageRole Sample request: { \"name\": \"Item1\", \"description\": \"\", \"active\":true, \"permissionKeys\":[\"ReadWeather\",\"ManageWeather\"] } DeleteRole(string) Delete a role. [HttpDelete] [Route(\"{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageRole })] public Task DeleteRole(string id) Parameters id string Role Id Returns Task Remarks Required Permission: ManageRole GetRole(string) Get role by role id [HttpGet] [Route(\"{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ViewRole })] public Task<RoleViewDto> GetRole(string id) Parameters id string Role id Returns Task<RoleViewDto> Remarks Required Permission: ViewRole GetRoles() Get all roles. [HttpGet] [Route(\"\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ViewRole })] public Task<IEnumerable<RoleViewDto>> GetRoles() Returns Task<IEnumerable<RoleViewDto>> Remarks Required Permission: ViewRole UpdateRole(string, RoleEditModel) Update a role. [HttpPut] [Route(\"{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageRole })] public Task UpdateRole(string id, RoleEditModel model) Parameters id string Role Id model RoleEditModel Returns Task Remarks Required Permission: ManageRole Sample request: { \"name\": \"Item1\", \"description\": \"\", \"active\":true, \"permissionKeys\":[\"ReadWeather\",\"ManageWeather\"] } UpdateRoleFromCustomModel(string, TRole) Update a role using custom model. Only if custom role model is used. [HttpPut] [Route(\"custommodel/{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageRole })] [ApiExplorerSettings(GroupName = \"UserManagement's Role APIs - Custom Model\")] public Task UpdateRoleFromCustomModel(string id, TRole model) Parameters id string model TRole Returns Task Remarks Required Permission: ManageRole Sample request: { \"name\": \"Item1\", \"description\": \"\", \"active\":true, \"permissionKeys\":[\"ReadWeather\",\"ManageWeather\"] }"
  },
  "api/DNV.Authorization.UserManagement.ApiControllers.GlobalUsersController-1.html": {
    "href": "api/DNV.Authorization.UserManagement.ApiControllers.GlobalUsersController-1.html",
    "title": "Class GlobalUsersController<TUser>",
    "keywords": "Class GlobalUsersController<TUser> Namespace DNV.Authorization.UserManagement.ApiControllers Assembly DNV.Authorization.UserManagement.ApiControllers.dll [Authorize] [Produces(\"application/json\", new string[] { })] [ApiController] [Route(\"api/users\")] [TypeFilter(typeof(ErrorCodeExceptionFilter))] [ApiExplorerSettings(GroupName = \"UserManagement's User APIs\")] public class GlobalUsersController<TUser> : UserManagementBaseController<TUser> where TUser : User, new() Type Parameters TUser Inheritance object ControllerBase UserManagementBaseController<TUser> GlobalUsersController<TUser> Inherited Members UserManagementBaseController<TUser>.GetCurrentUser() UserManagementBaseController<TUser>.IsCompanyAccessible(string) UserManagementBaseController<TUser>.FetchRole<TRole>(string, IPermissionRepository, IRole<TRole>) UserManagementBaseController<TUser>.PruneUserInfo(UserViewModel, string) UserManagementBaseController<TUser>.PruneUserCompanyInfo(UserViewModel, string) UserManagementBaseController<TUser>.PopulateUserRoleInfo(TUser, UserViewModel, IEnumerable<PermissionEntity>) UserManagementBaseController<TUser>.GetAllUsers(IUser<TUser>, IPermissionRepository, PageParam) UserManagementBaseController<TUser>.GetAllRoles<TRole>(IRole<TRole>, IPermissionRepository) ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.User object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors GlobalUsersController(IUser<TUser>, IUserSynchronization<TUser>, PermissionOptions, IPermissionRepository) public GlobalUsersController(IUser<TUser> userRepository, IUserSynchronization<TUser> userSynchronization, PermissionOptions premissionOptions, IPermissionRepository permissionRepository) Parameters userRepository IUser<TUser> userSynchronization IUserSynchronization<TUser> premissionOptions PermissionOptions permissionRepository IPermissionRepository Methods CreateUser(UserEditModel) Create a user [HttpPost] [Route(\"\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageUser })] public Task<string> CreateUser(UserEditModel model) Parameters model UserEditModel Returns Task<string> Remarks Required Permissions: ManageUser Sample request: { \"email\": \"\", \"firstName\": \"\", \"lastName\": \"\", \"veracityId\": \"user identity id in Identity Provider\", \"description\": \"\", \"superAdmin\": false, \"active\":true, \"roleIds\":[\"1\",\"2\"], \"companyIds\":[\"1\",\"2\"] } CreateUserFromCustommodel(TUser) Create a user using custom model. Only if custom user model is used. [HttpPost] [Route(\"custommodel\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageUser })] [ApiExplorerSettings(GroupName = \"UserManagement's User APIs - Custom Model\")] public Task<string> CreateUserFromCustommodel(TUser model) Parameters model TUser Returns Task<string> Remarks Required Permissions: ManageUser Sample request: { \"email\": \"\", \"firstName\": \"\", \"lastName\": \"\", \"veracityId\": \"user identity id in Identity Provider\", \"description\": \"\", \"superAdmin\": false, \"active\":true, \"roleIds\":[\"1\",\"2\"], \"companyIds\":[\"1\",\"2\"] } DeleteUser(string) Delete a user [HttpDelete] [Route(\"{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageUser })] public Task DeleteUser(string id) Parameters id string User Id Returns Task Remarks Required Permissions: ManageUser GetUser(string) Get a user by user id [HttpGet] [Route(\"{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ViewUser })] public Task<UserViewModel> GetUser(string id) Parameters id string User Id Returns Task<UserViewModel> Remarks Required Permission: ViewUser GetUserByEmail(string) Get a user by user email [HttpGet] [Route(\"email/{email}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ViewUser })] public Task<UserViewModel> GetUserByEmail(string email) Parameters email string User email Returns Task<UserViewModel> Remarks Required Permission: ViewUser GetUserByIdentityId() Get current user info. [HttpGet] [Route(\"~/api/users/currentUser\")] public Task<UserViewModel> GetUserByIdentityId() Returns Task<UserViewModel> Remarks No Required Permissions GetUserCorssCompanyPermissions(string) Get a user's all permissions [HttpGet] [Route(\"~/api/users/{id}/permissions\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ViewUser })] public Task<IEnumerable<string>> GetUserCorssCompanyPermissions(string id) Parameters id string User Id Returns Task<IEnumerable<string>> Remarks No Required Permissions GetUsers() Get all users [HttpGet] [Route(\"\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ViewUser })] public Task<IEnumerable<UserViewModel>> GetUsers() Returns Task<IEnumerable<UserViewModel>> Remarks Required Permission: ViewUser GetUsersPaged(int, int) Get all users, grouping large sets of data into pages. [HttpGet] [Route(\"{page:int}/{size:int}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ViewUser })] public Task<PaginatedResultViewModel<UserViewModel>> GetUsersPaged(int page = 0, int size = 0) Parameters page int The page index, starting from 1 size int the page size Returns Task<PaginatedResultViewModel<UserViewModel>> Remarks Required Permission: ViewUser UpdateUser(string, UserEditModel) Update a user [HttpPut] [Route(\"{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageUser })] public Task UpdateUser(string id, UserEditModel model) Parameters id string User Id model UserEditModel Returns Task Remarks Required Permissions: ManageUser Sample request: { \"email\": \"\", \"firstName\": \"\", \"lastName\": \"\", \"veracityId\": \"user identity id in Identity Provider\", \"description\": \"\", \"superAdmin\": false, \"active\":true, \"roleIds\":[\"1\",\"2\"], \"companyIds\":[\"1\",\"2\"] } UpdateUserFromCustomModel(string, TUser) Update a user using custom model. Only if custom user model is used. [HttpPut] [Route(\"custommodel/{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageUser })] [ApiExplorerSettings(GroupName = \"UserManagement's User APIs - Custom Model\")] public Task UpdateUserFromCustomModel(string id, TUser model) Parameters id string User Id model TUser Returns Task Remarks Required Permissions: ManageUser Sample request: { \"email\": \"\", \"firstName\": \"\", \"lastName\": \"\", \"veracityId\": \"user identity id in Identity Provider\", \"description\": \"\", \"superAdmin\": false, \"active\":true, \"roleIds\":[\"1\",\"2\"], \"companyIds\":[\"1\",\"2\"] }"
  },
  "api/DNV.Authorization.UserManagement.ApiControllers.RolesController-3.html": {
    "href": "api/DNV.Authorization.UserManagement.ApiControllers.RolesController-3.html",
    "title": "Class RolesController<TCompany, TRole, TUser>",
    "keywords": "Class RolesController<TCompany, TRole, TUser> Namespace DNV.Authorization.UserManagement.ApiControllers Assembly DNV.Authorization.UserManagement.ApiControllers.dll [Authorize] [Produces(\"application/json\", new string[] { })] [ApiController] [TypeFilter(typeof(ErrorCodeExceptionFilter))] [Route(\"api/company/{companyId}/roles\")] [CompanyIdentityFieldNameFilter(\"companyId\", \"\", \"\")] [ApiExplorerSettings(GroupName = \"UserManagement's Role APIs\")] public class RolesController<TCompany, TRole, TUser> : UserManagementBaseController<TUser> where TCompany : Company, new() where TRole : Role, new() where TUser : User, new() Type Parameters TCompany TRole TUser Inheritance object ControllerBase UserManagementBaseController<TUser> RolesController<TCompany, TRole, TUser> Inherited Members UserManagementBaseController<TUser>.GetCurrentUser() UserManagementBaseController<TUser>.IsCompanyAccessible(string) UserManagementBaseController<TUser>.FetchRole<TRole>(string, IPermissionRepository, IRole<TRole>) UserManagementBaseController<TUser>.PruneUserInfo(UserViewModel, string) UserManagementBaseController<TUser>.PruneUserCompanyInfo(UserViewModel, string) UserManagementBaseController<TUser>.PopulateUserRoleInfo(TUser, UserViewModel, IEnumerable<PermissionEntity>) UserManagementBaseController<TUser>.GetAllUsers(IUser<TUser>, IPermissionRepository, PageParam) UserManagementBaseController<TUser>.GetAllRoles<TRole>(IRole<TRole>, IPermissionRepository) ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.User object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors RolesController(IUser<TUser>, IRole<TRole>, ICompany<TCompany>, IPermissionRepository, PermissionOptions) public RolesController(IUser<TUser> userRepository, IRole<TRole> roleRepository, ICompany<TCompany> companyRepository, IPermissionRepository permissionRepository, PermissionOptions premissionOptions) Parameters userRepository IUser<TUser> roleRepository IRole<TRole> companyRepository ICompany<TCompany> permissionRepository IPermissionRepository premissionOptions PermissionOptions Methods CreateCrosscompanyRole(string, RoleEditModel) [HttpPost] [Route(\"~/api/crosscompany/{companyId}/roles\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageRole, PermissionMatrix.Premissions.ViewCompany })] [Obsolete(\"It's an obsoleted end point. not suggest to use.\", true)] public Task<string> CreateCrosscompanyRole(string companyId, RoleEditModel model) Parameters companyId string model RoleEditModel Returns Task<string> CreateCrosscompanyRoleFromCustomModel(TRole) [HttpPost] [Route(\"~/api/crosscompany/roles/custommodel\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageRole, PermissionMatrix.Premissions.ViewCompany })] [ApiExplorerSettings(GroupName = \"UserManagement's Role APIs - Custom Model\")] [Obsolete(\"It's an obsoleted end point. not suggest to use.\", true)] public Task<string> CreateCrosscompanyRoleFromCustomModel(TRole model) Parameters model TRole Returns Task<string> CreateRole(string, RoleEditModel) Create a role [HttpPost] [Route(\"\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageRole })] [AccessCrossCompanyPermissionFilter(new object[] { PermissionMatrix.Premissions.ViewCompany })] [AccessibleCompanyFilter] public Task<string> CreateRole(string companyId, RoleEditModel model) Parameters companyId string Company Id model RoleEditModel Returns Task<string> Remarks Required Permission for user in the this company: ManageRole Required Permission for user not in this company: ManageRole,ViewCompany Sample request: { \"name\": \"Item1\", \"description\": \"\", \"active\":true, \"permissionKeys\":[\"ReadWeather\",\"ManageWeather\"] } CreateRoleFromCustomModel(string, TRole) Create a role using custom model. Only if custom role model is used. [HttpPost] [Route(\"custommodel\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageRole })] [AccessCrossCompanyPermissionFilter(new object[] { PermissionMatrix.Premissions.ViewCompany })] [AccessibleCompanyFilter] [ApiExplorerSettings(GroupName = \"UserManagement's Role APIs - Custom Model\")] public Task<string> CreateRoleFromCustomModel(string companyId, TRole model) Parameters companyId string Company Id model TRole Returns Task<string> Remarks Required Permission for user in the this company: ManageRole Required Permission for user not in this company: ManageRole,ViewCompany Sample request: { \"name\": \"Item1\", \"description\": \"\", \"active\":true, \"permissionKeys\":[\"ReadWeather\",\"ManageWeather\"] } DeleteCrosscompanyRole(string) [HttpDelete] [Route(\"~/api/crosscompany/roles/{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageRole, PermissionMatrix.Premissions.ViewCompany })] [Obsolete(\"It's an obsoleted end point. not suggest to use.\", true)] public Task DeleteCrosscompanyRole(string id) Parameters id string Returns Task DeleteRole(string, string) Delete Role [HttpDelete] [Route(\"{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageRole })] [AccessCrossCompanyPermissionFilter(new object[] { PermissionMatrix.Premissions.ViewCompany })] [AccessibleCompanyFilter] public Task DeleteRole(string companyId, string id) Parameters companyId string Company Id id string Role Id Returns Task Remarks Required Permission for user in the this company: ManageRole Required Permission for user not in this company: ManageRole,ViewCompany GetCompanyRoles(string) Get all roles of a company. [HttpGet] [Route(\"\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ViewRole })] [AccessCrossCompanyPermissionFilter(new object[] { PermissionMatrix.Premissions.ViewCompany })] [AccessibleCompanyFilter] public Task<IEnumerable<RoleViewDto>> GetCompanyRoles(string companyId) Parameters companyId string Company Id Returns Task<IEnumerable<RoleViewDto>> Remarks Required Permission for user in the this company: ViewRole Required Permission for user not in this company: ViewRole,ViewCompany GetCrossCompanyRoles(string) [HttpGet] [Route(\"~/api/crosscompany/roles/{companyid}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ViewRole, PermissionMatrix.Premissions.ViewCompany })] [Obsolete(\"It's an obsoleted end point. not suggest to use.\", true)] public Task<IEnumerable<RoleViewDto>> GetCrossCompanyRoles(string companyid) Parameters companyid string Returns Task<IEnumerable<RoleViewDto>> GetCrosscompanyRole(string) [HttpGet] [Route(\"~/api/crosscompany/roles/{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ViewRole, PermissionMatrix.Premissions.ViewCompany })] [Obsolete(\"It's an obsoleted end point. not suggest to use.\", true)] public Task<RoleViewDto> GetCrosscompanyRole(string id) Parameters id string Returns Task<RoleViewDto> GetRole(string, string) Get a role by its id [HttpGet] [Route(\"{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ViewRole })] [AccessCrossCompanyPermissionFilter(new object[] { PermissionMatrix.Premissions.ViewCompany })] [AccessibleCompanyFilter] public Task<RoleViewDto> GetRole(string companyId, string id) Parameters companyId string Company Id id string Role Id Returns Task<RoleViewDto> Remarks Required Permission for user in the this company: ViewRole Required Permission for user not in this company: ViewRole,ViewCompany GetRoles() Get all roles [HttpGet] [Route(\"~/api/roles\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ViewRole, PermissionMatrix.Premissions.ViewCompany })] public Task<IEnumerable<RoleViewDto>> GetRoles() Returns Task<IEnumerable<RoleViewDto>> Remarks Required Permission: ViewRole, ViewCompany UpdateCrosscompanyRole(string, string, RoleEditModel) [HttpPut] [Route(\"~/api/crosscompany/{companyId}/roles/{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageRole, PermissionMatrix.Premissions.ViewCompany })] [Obsolete(\"It's an obsoleted end point. not suggest to use.\", true)] public Task UpdateCrosscompanyRole(string id, string companyId, RoleEditModel model) Parameters id string companyId string model RoleEditModel Returns Task UpdateCrosscompanyRoleFromCustomModel(string, TRole) [HttpPut] [Route(\"~/api/crosscompany/roles/custommodel/{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageRole, PermissionMatrix.Premissions.ViewCompany })] [ApiExplorerSettings(GroupName = \"UserManagement's Role APIs - Custom Model\")] [Obsolete(\"It's an obsoleted end point. not suggest to use.\", true)] public Task UpdateCrosscompanyRoleFromCustomModel(string id, TRole model) Parameters id string model TRole Returns Task UpdateRole(string, string, RoleEditModel) Update a role [HttpPut] [Route(\"{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageRole })] [AccessCrossCompanyPermissionFilter(new object[] { PermissionMatrix.Premissions.ViewCompany })] [AccessibleCompanyFilter] public Task UpdateRole(string companyId, string id, RoleEditModel model) Parameters companyId string Company Id id string Role Id model RoleEditModel Returns Task Remarks Required Permission for user in the this company: ManageRole Required Permission for user not in this company: ManageRole,ViewCompany Sample request: { \"name\": \"Item1\", \"description\": \"\", \"active\":true, \"permissionKeys\":[\"ReadWeather\",\"ManageWeather\"] } UpdateRoleFromCustomModel(string, string, TRole) Update a role using custom model. Only if custom role model is used. [HttpPut] [Route(\"custommodel/{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageRole })] [ApiExplorerSettings(GroupName = \"UserManagement's Role APIs - Custom Model\")] [AccessCrossCompanyPermissionFilter(new object[] { PermissionMatrix.Premissions.ViewCompany })] [AccessibleCompanyFilter] public Task UpdateRoleFromCustomModel(string companyId, string id, TRole model) Parameters companyId string Company Id id string Role Id model TRole Returns Task Remarks Required Permission for user in the this company: ManageRole Required Permission for user not in this company: ManageRole,ViewCompany Sample request: { \"name\": \"Item1\", \"description\": \"\", \"active\":true, \"permissionKeys\":[\"ReadWeather\",\"ManageWeather\"] }"
  },
  "api/DNV.Authorization.UserManagement.ApiControllers.UserManagementBaseController-1.html": {
    "href": "api/DNV.Authorization.UserManagement.ApiControllers.UserManagementBaseController-1.html",
    "title": "Class UserManagementBaseController<TUser>",
    "keywords": "Class UserManagementBaseController<TUser> Namespace DNV.Authorization.UserManagement.ApiControllers Assembly DNV.Authorization.UserManagement.ApiControllers.dll public class UserManagementBaseController<TUser> : ControllerBase where TUser : User, new() Type Parameters TUser Inheritance object ControllerBase UserManagementBaseController<TUser> Derived CompaniesController<TCompany, TUser> GlobalRolesController<TRole, TUser> GlobalUsersController<TUser> RolesController<TCompany, TRole, TUser> UsersController<TRole, TUser> Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.User object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors UserManagementBaseController(IUser<TUser>, PermissionOptions) protected UserManagementBaseController(IUser<TUser> userRepository, PermissionOptions premissionOptions) Parameters userRepository IUser<TUser> premissionOptions PermissionOptions Methods FetchRole<TRole>(string, IPermissionRepository, IRole<TRole>) protected Task<RoleViewDto> FetchRole<TRole>(string id, IPermissionRepository permissionRepository, IRole<TRole> roleRepository) where TRole : Role, new() Parameters id string permissionRepository IPermissionRepository roleRepository IRole<TRole> Returns Task<RoleViewDto> Type Parameters TRole GetAllRoles<TRole>(IRole<TRole>, IPermissionRepository) protected Task<IEnumerable<RoleViewDto>> GetAllRoles<TRole>(IRole<TRole> roleRepository, IPermissionRepository permissionRepository) where TRole : Role, new() Parameters roleRepository IRole<TRole> permissionRepository IPermissionRepository Returns Task<IEnumerable<RoleViewDto>> Type Parameters TRole GetAllUsers(IUser<TUser>, IPermissionRepository, PageParam) protected Task<PaginatedResult<UserViewModel>> GetAllUsers(IUser<TUser> userRepository, IPermissionRepository permissionRepository, PageParam pageParam = null) Parameters userRepository IUser<TUser> permissionRepository IPermissionRepository pageParam PageParam Returns Task<PaginatedResult<UserViewModel>> GetCurrentUser() protected Task<TUser> GetCurrentUser() Returns Task<TUser> IsCompanyAccessible(string) protected Task<bool> IsCompanyAccessible(string companyId) Parameters companyId string Returns Task<bool> PopulateUserRoleInfo(TUser, UserViewModel, IEnumerable<PermissionEntity>) protected UserViewModel PopulateUserRoleInfo(TUser user, UserViewModel userViewModel, IEnumerable<PermissionEntity> allPermissions) Parameters user TUser userViewModel UserViewModel allPermissions IEnumerable<PermissionEntity> Returns UserViewModel PruneUserCompanyInfo(UserViewModel, string) protected UserViewModel PruneUserCompanyInfo(UserViewModel user, string companyId) Parameters user UserViewModel companyId string Returns UserViewModel PruneUserInfo(UserViewModel, string) protected UserViewModel PruneUserInfo(UserViewModel user, string companyId) Parameters user UserViewModel companyId string Returns UserViewModel"
  },
  "api/DNV.Authorization.UserManagement.ApiControllers.UserManagementDefaultSetup.html": {
    "href": "api/DNV.Authorization.UserManagement.ApiControllers.UserManagementDefaultSetup.html",
    "title": "Class UserManagementDefaultSetup",
    "keywords": "Class UserManagementDefaultSetup Namespace DNV.Authorization.UserManagement.ApiControllers Assembly DNV.Authorization.UserManagement.ApiControllers.dll Provides extension methods to register user management related services to IServiceCollection public static class UserManagementDefaultSetup Inheritance object UserManagementDefaultSetup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddUserManagement(IServiceCollection, UserManagementOptions) Thie extension methods will setup user management module with built in services and data models:Company,Role and User. public static IServiceCollection AddUserManagement(this IServiceCollection services, UserManagementOptions options = null) Parameters services IServiceCollection IServiceCollection options UserManagementOptions A instance of UserManagementOptions to configure the user management module. Returns IServiceCollection IServiceCollection AddUserManagementWithCustomModelAndCRUD<TCompany, TRole, TUser>(IServiceCollection, UserManagementOptions) customized data access service to be registered into IServiceCollection at other place. customized company, role and user model should be specified to replace generic type: TCompany, TRole, TUser. public static IServiceCollection AddUserManagementWithCustomModelAndCRUD<TCompany, TRole, TUser>(this IServiceCollection services, UserManagementOptions options) where TCompany : Company, new() where TRole : Role, new() where TUser : User, new() Parameters services IServiceCollection IServiceCollection options UserManagementOptions A instance of UserManagementOptions to configure the user management module. Returns IServiceCollection IServiceCollection Type Parameters TCompany The type that represents a customized company model.It mush be inherited from Company. TRole The type that represents a customized role model.It mush be inherited from Role. TUser The type that represents a customized user model.It mush be inherited from User. Remarks For example, services.AddUserManagementWithCustomModel<Company,Role,User>( ... }); services.AddDbContext<UserManagementContext>(options => options.UseSqlServer(@\"Data Source=.\\SQLEXPRESS;Initial Catalog=UserManagement;Trusted_Connection=Yes;\")) .AddScoped<IUserPermissionReader, UserPermissionReader>() .AddScoped<IRole<Role>, RoleRepository>() .AddScoped<IUser<User>, UserRepository>() .AddScoped<ICompany<Company>, CompanyRepository>(); AddUserManagementWithCustomModel<TUser>(IServiceCollection, UserManagementOptions) Thie extension methods will setup user management module with built in services and data models:Company and Role. A customized user model should be specified to replace generic type: TUser public static IServiceCollection AddUserManagementWithCustomModel<TUser>(this IServiceCollection services, UserManagementOptions options = null) where TUser : User, new() Parameters services IServiceCollection IServiceCollection options UserManagementOptions A instance of UserManagementOptions to configure the user management module. Returns IServiceCollection IServiceCollection Type Parameters TUser The type that represents a customized user model.It mush be inherited from User. Remarks For example, services.AddUserManagementWithCustomModel<User>( ... }); AddUserManagementWithCustomModel<TCompany, TUser>(IServiceCollection, UserManagementOptions) Thie extension methods will setup user management module with built in services and data models:Role. customized company and user model should be specified to replace generic type: TCompany, TUser public static IServiceCollection AddUserManagementWithCustomModel<TCompany, TUser>(this IServiceCollection services, UserManagementOptions options = null) where TCompany : Company, new() where TUser : User, new() Parameters services IServiceCollection IServiceCollection options UserManagementOptions A instance of UserManagementOptions to configure the user management module. Returns IServiceCollection IServiceCollection Type Parameters TCompany The type that represents a customized company model.It mush be inherited from Company. TUser The type that represents a customized user model.It mush be inherited from User. Remarks For example, services.AddUserManagementWithCustomModel<Company,User>( ... }); AddUserManagementWithCustomModel<TCompany, TRole, TUser>(IServiceCollection, UserManagementOptions) Thie extension methods will setup user management module with built in services. customized company, role and user model should be specified to replace generic type: TCompany, TRole, TUser public static IServiceCollection AddUserManagementWithCustomModel<TCompany, TRole, TUser>(this IServiceCollection services, UserManagementOptions options = null) where TCompany : Company, new() where TRole : Role, new() where TUser : User, new() Parameters services IServiceCollection IServiceCollection options UserManagementOptions A instance of UserManagementOptions to configure the user management module. Returns IServiceCollection IServiceCollection Type Parameters TCompany The type that represents a customized company model.It mush be inherited from Company. TRole The type that represents a customized role model.It mush be inherited from Role. TUser The type that represents a customized user model.It mush be inherited from User. Remarks For example, services.AddUserManagementWithCustomModel<Company,Role,User>( ... });"
  },
  "api/DNV.Authorization.UserManagement.ApiControllers.UserManagementOptions.html": {
    "href": "api/DNV.Authorization.UserManagement.ApiControllers.UserManagementOptions.html",
    "title": "Class UserManagementOptions",
    "keywords": "Class UserManagementOptions Namespace DNV.Authorization.UserManagement.ApiControllers Assembly DNV.Authorization.UserManagement.ApiControllers.dll Provides an option to configure the user management module. public class UserManagementOptions Inheritance object UserManagementOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties Mode Gets or sets the UserManagementMode. public UserManagementMode Mode { get; set; } Property Value UserManagementMode Remarks By default, it is Company_CompanyRole_User. PermissionOptions Gets or sets the PermissionOptions. For example, Get user identity from name claim in windows authentication: PermissionOptions = new PermissionOptions{ GetUserIdentity = (userPrincipal) => userPrincipal.Claims.FirstOrDefault(t => t.Type == \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\")?.Value, HandleUnauthorizedAccess = BuiltinUnauthorizedAccessHandler.Return403ForbiddenCode} public PermissionOptions PermissionOptions { get; set; } Property Value PermissionOptions"
  },
  "api/DNV.Authorization.UserManagement.ApiControllers.UsersController-2.html": {
    "href": "api/DNV.Authorization.UserManagement.ApiControllers.UsersController-2.html",
    "title": "Class UsersController<TRole, TUser>",
    "keywords": "Class UsersController<TRole, TUser> Namespace DNV.Authorization.UserManagement.ApiControllers Assembly DNV.Authorization.UserManagement.ApiControllers.dll [Authorize] [Produces(\"application/json\", new string[] { })] [ApiController] [TypeFilter(typeof(ErrorCodeExceptionFilter))] [Route(\"api/company/{companyId}/users\")] [CompanyIdentityFieldNameFilter(\"companyId\", \"\", \"\")] [ApiExplorerSettings(GroupName = \"UserManagement's User APIs\")] public class UsersController<TRole, TUser> : UserManagementBaseController<TUser> where TRole : Role, new() where TUser : User, new() Type Parameters TRole TUser Inheritance object ControllerBase UserManagementBaseController<TUser> UsersController<TRole, TUser> Inherited Members UserManagementBaseController<TUser>.GetCurrentUser() UserManagementBaseController<TUser>.IsCompanyAccessible(string) UserManagementBaseController<TUser>.FetchRole<TRole>(string, IPermissionRepository, IRole<TRole>) UserManagementBaseController<TUser>.PruneUserInfo(UserViewModel, string) UserManagementBaseController<TUser>.PruneUserCompanyInfo(UserViewModel, string) UserManagementBaseController<TUser>.PopulateUserRoleInfo(TUser, UserViewModel, IEnumerable<PermissionEntity>) UserManagementBaseController<TUser>.GetAllUsers(IUser<TUser>, IPermissionRepository, PageParam) UserManagementBaseController<TUser>.GetAllRoles<TRole>(IRole<TRole>, IPermissionRepository) ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.User object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors UsersController(IUser<TUser>, IRole<TRole>, IUserSynchronization<TUser>, PermissionOptions, IPermissionRepository, UserManagementSettings) public UsersController(IUser<TUser> userRepository, IRole<TRole> roleRepository, IUserSynchronization<TUser> userSynchronization, PermissionOptions premissionOptions, IPermissionRepository permissionRepository, UserManagementSettings userManagementSettings) Parameters userRepository IUser<TUser> roleRepository IRole<TRole> userSynchronization IUserSynchronization<TUser> premissionOptions PermissionOptions permissionRepository IPermissionRepository userManagementSettings UserManagementSettings Methods CreateCrossCompanyUser(UserEditModel) Create a user. Only using it if user's company is unknown. [HttpPost] [Route(\"~/api/admin/users\")] [ProducesResponseType(200, Type = typeof(string))] [ProducesResponseType(500, Type = typeof(string))] [ProducesResponseType(400, Type = typeof(string))] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageUser, PermissionMatrix.Premissions.ViewCompany })] public Task<ActionResult> CreateCrossCompanyUser(UserEditModel model) Parameters model UserEditModel Returns Task<ActionResult> Remarks Required Permission: ManageUser, ViewCompany Sample request: { \"email\": \"\", \"firstName\": \"\", \"lastName\": \"\", \"veracityId\": \"user identity id in Identity Provider\", \"description\": \"\", \"superAdmin\": false, \"active\":true, \"roleIds\":[\"1\",\"2\"], \"companyIds\":[\"1\",\"2\"] } CreateCrossCompanyUserFromCustomModel(TUser) Create a user using custom model. Only if custom user model is used. Only using it if user's company is unknown. [HttpPost] [Route(\"~/api/admin/users/custommodel\")] [ProducesResponseType(200, Type = typeof(string))] [ProducesResponseType(500, Type = typeof(string))] [ProducesResponseType(400, Type = typeof(string))] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageUser, PermissionMatrix.Premissions.ViewCompany })] [ApiExplorerSettings(GroupName = \"UserManagement's User APIs - Custom Model\")] public Task<ActionResult> CreateCrossCompanyUserFromCustomModel(TUser model) Parameters model TUser Returns Task<ActionResult> Remarks Required Permission: ManageUser, ViewCompany Sample request: { \"email\": \"\", \"firstName\": \"\", \"lastName\": \"\", \"veracityId\": \"user identity id in Identity Provider\", \"description\": \"\", \"superAdmin\": false, \"active\":true, \"roleIds\":[\"1\",\"2\"], \"companyIds\":[\"1\",\"2\"] } CreateUser(string, UserEditModel) Create a user. [HttpPost] [Route(\"\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageUser })] [AccessCrossCompanyPermissionFilter(new object[] { PermissionMatrix.Premissions.ViewCompany })] [AccessibleCompanyFilter] public Task<string> CreateUser(string companyId, UserEditModel model) Parameters companyId string Company Id model UserEditModel Returns Task<string> Remarks Required Permission for user in the this company: ManageUser Required Permission for user not in this company: ManageUser,ViewCompany Sample request: { \"email\": \"\", \"firstName\": \"\", \"lastName\": \"\", \"veracityId\": \"user identity id in Identity Provider\", \"description\": \"\", \"superAdmin\": false, \"active\":true, \"roleIds\":[\"1\",\"2\"], \"companyIds\":[\"1\",\"2\"] } CreateUserFromCustommodel(string, TUser) Create a user using custom model. Only if custom user model is used. [HttpPost] [Route(\"custommodel\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageUser })] [ApiExplorerSettings(GroupName = \"UserManagement's User APIs - Custom Model\")] [AccessCrossCompanyPermissionFilter(new object[] { PermissionMatrix.Premissions.ViewCompany })] [AccessibleCompanyFilter] public Task<string> CreateUserFromCustommodel(string companyId, TUser model) Parameters companyId string Company Id model TUser Returns Task<string> Remarks Required Permission for user in the this company: ManageUser Required Permission for user not in this company: ManageUser,ViewCompany Sample request: { \"email\": \"\", \"firstName\": \"\", \"lastName\": \"\", \"veracityId\": \"user identity id in Identity Provider\", \"description\": \"\", \"superAdmin\": false, \"active\":true, \"roleIds\":[\"1\",\"2\"], \"companyIds\":[\"1\",\"2\"] } DeleteCrossCompanyUser(string) Delete a user.Only using it if user's company is unknown. [HttpDelete] [Route(\"~/api/admin/users/{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageUser, PermissionMatrix.Premissions.ViewCompany })] public Task DeleteCrossCompanyUser(string id) Parameters id string User Id Returns Task Remarks Required Permission: ManageUser, ViewCompany DeleteUser(string, string) Delete a user [HttpDelete] [Route(\"{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageUser })] [AccessCrossCompanyPermissionFilter(new object[] { PermissionMatrix.Premissions.ViewCompany })] [AccessibleCompanyFilter] public Task DeleteUser(string companyId, string id) Parameters companyId string Company Id id string User Id Returns Task Remarks Required Permission for user in the this company: ManageUser Required Permission for user not in this company: ManageUser,ViewCompany GetCompanyUserByIdentityId(string) Get Current user info with user's permission in this company. [HttpGet] [Route(\"~/api/company/{companyId}/users/currentUser\")] public Task<UserViewModel> GetCompanyUserByIdentityId(string companyId) Parameters companyId string Company Id Returns Task<UserViewModel> Remarks No permission is required GetCompanyUsers(string) [HttpGet] [Route(\"~/api/admin/{companyid}/users\")] [Obsolete(\"It's an obsoleted end point. not suggest to use.\", true)] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ViewUser, PermissionMatrix.Premissions.ViewCompany })] public Task<IEnumerable<UserViewModel>> GetCompanyUsers(string companyid) Parameters companyid string Returns Task<IEnumerable<UserViewModel>> GetCrossCompanyUser(string) Get a user's info. Only using it if user's company is unknown. [HttpGet] [Route(\"~/api/admin/users/{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ViewUser, PermissionMatrix.Premissions.ViewCompany })] public Task<UserViewModel> GetCrossCompanyUser(string id) Parameters id string User Id Returns Task<UserViewModel> Remarks Required Permission: ViewUser,ViewCompany GetCrossCompanyUserByEmail(string) Get a user's info. Only using it if user's company is unknown. [HttpGet] [Route(\"~/api/admin/users/email/{email}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ViewUser, PermissionMatrix.Premissions.ViewCompany })] public Task<UserViewModel> GetCrossCompanyUserByEmail(string email) Parameters email string User Email Returns Task<UserViewModel> Remarks Required Permission: ViewUser,ViewCompany GetCrossCompanyUsers() Get all users. [HttpGet] [Route(\"~/api/admin/users\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ViewUser, PermissionMatrix.Premissions.ViewCompany })] public Task<IEnumerable<UserViewModel>> GetCrossCompanyUsers() Returns Task<IEnumerable<UserViewModel>> Remarks Required Permission: ViewUser,ViewCompany GetCrossCompanyUsersGetUsersPaged(int, int) Get all users, grouping large sets of data into pages. [HttpGet] [Route(\"~/api/admin/users/{page:int}/{size:int}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ViewUser, PermissionMatrix.Premissions.ViewCompany })] public Task<PaginatedResultViewModel<UserViewModel>> GetCrossCompanyUsersGetUsersPaged(int page = 0, int size = 0) Parameters page int The page index, starting from 1 size int the page size Returns Task<PaginatedResultViewModel<UserViewModel>> Remarks Required Permission: ViewUser,ViewCompany GetUser(string, string) Get user info by user id [HttpGet] [Route(\"{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ViewUser })] [AccessCrossCompanyPermissionFilter(new object[] { PermissionMatrix.Premissions.ViewCompany })] [AccessibleCompanyFilter] public Task<UserViewModel> GetUser(string companyId, string id) Parameters companyId string Company Id id string User Id Returns Task<UserViewModel> Remarks Required Permission for user in the this company: ViewUser Required Permission for user not in this company: ViewUser,ViewCompany GetUserByEmail(string, string) Get user info by user email [HttpGet] [Route(\"email/{email}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ViewUser })] [AccessCrossCompanyPermissionFilter(new object[] { PermissionMatrix.Premissions.ViewCompany })] [AccessibleCompanyFilter] public Task<UserViewModel> GetUserByEmail(string companyId, string email) Parameters companyId string Company Id email string User email Returns Task<UserViewModel> Remarks Required Permission for user in the this company: ViewUser Required Permission for user not in this company: ViewUser,ViewCompany GetUserByIdentityId() Get Current user info with user's all permission [HttpGet] [Route(\"~/api/users/currentUser\")] public Task<UserViewModel> GetUserByIdentityId() Returns Task<UserViewModel> Remarks No permission is required GetUserCorssCompanyPermissions(string) Get a user's all permissions. This API should only be used in Company_GlobalRole_User mode [HttpGet] [Route(\"~/api/users/{id}/permissions\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ViewUser })] [AccessCrossCompanyPermissionFilter(new object[] { PermissionMatrix.Premissions.ViewCompany })] public Task<IEnumerable<string>> GetUserCorssCompanyPermissions(string id) Parameters id string User Id Returns Task<IEnumerable<string>> Remarks Required Permission for user in the this company: ViewUser Required Permission for user not in this company: ViewUser,ViewCompany GetUserPermissions(string, string) Ger a user's permission in this company. [HttpGet] [Route(\"~/api/company/{companyId}/users/{id}/permissions\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ViewUser })] [AccessCrossCompanyPermissionFilter(new object[] { PermissionMatrix.Premissions.ViewCompany })] public Task<IEnumerable<string>> GetUserPermissions(string companyId, string id) Parameters companyId string Company Id id string User Id Returns Task<IEnumerable<string>> Remarks Required Permission for user in the this company: ViewUser Required Permission for user not in this company: ViewUser,ViewCompany GetUsers(string) Get all user of a company [HttpGet] [Route(\"\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ViewUser })] [AccessCrossCompanyPermissionFilter(new object[] { PermissionMatrix.Premissions.ViewCompany })] [AccessibleCompanyFilter] public Task<IEnumerable<UserViewModel>> GetUsers(string companyId) Parameters companyId string Company Id Returns Task<IEnumerable<UserViewModel>> Remarks Required Permission for user in the this company: ViewUser Required Permission for user not in this company: ViewUser,ViewCompany GetUsersPaged(string, int, int) Get all user of a company, grouping large sets of data into pages. [HttpGet] [Route(\"{page:int}/{size:int}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ViewUser })] [AccessCrossCompanyPermissionFilter(new object[] { PermissionMatrix.Premissions.ViewCompany })] [AccessibleCompanyFilter] public Task<PaginatedResultViewModel<UserViewModel>> GetUsersPaged(string companyId, int page = 0, int size = 0) Parameters companyId string Company Id page int The page index, starting from 1 size int the page size Returns Task<PaginatedResultViewModel<UserViewModel>> Remarks Required Permission for user in the this company: ViewUser Required Permission for user not in this company: ViewUser,ViewCompany UpdateCrossCompanyUser(string, UserEditModel) Update a user.Only using it if user's company is unknown. [HttpPut] [Route(\"~/api/admin/users/{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageUser, PermissionMatrix.Premissions.ViewCompany })] public Task UpdateCrossCompanyUser(string id, UserEditModel model) Parameters id string User Id model UserEditModel Returns Task Remarks Required Permission: ManageUser, ViewCompany Sample request: { \"email\": \"\", \"firstName\": \"\", \"lastName\": \"\", \"veracityId\": \"user identity id in Identity Provider\", \"description\": \"\", \"superAdmin\": false, \"active\":true, \"roleIds\":[\"1\",\"2\"], \"companyIds\":[\"1\",\"2\"] } UpdateCrossCompanyUserFromCustomModel(string, TUser) Update a user using custom model. Only if custom user model is used. Only using it if user's company is unknown. [HttpPut] [Route(\"~/api/admin/users/custommodel/{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageUser, PermissionMatrix.Premissions.ViewCompany })] [ApiExplorerSettings(GroupName = \"UserManagement's User APIs - Custom Model\")] public Task UpdateCrossCompanyUserFromCustomModel(string id, TUser model) Parameters id string User Id model TUser Returns Task Remarks Required Permission: ManageUser, ViewCompany Sample request: { \"email\": \"\", \"firstName\": \"\", \"lastName\": \"\", \"veracityId\": \"user identity id in Identity Provider\", \"description\": \"\", \"superAdmin\": false, \"active\":true, \"roleIds\":[\"1\",\"2\"], \"companyIds\":[\"1\",\"2\"] } UpdateUser(string, string, UserEditModel) Update a user [HttpPut] [Route(\"{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageUser })] [AccessCrossCompanyPermissionFilter(new object[] { PermissionMatrix.Premissions.ViewCompany })] [AccessibleCompanyFilter] public Task UpdateUser(string companyId, string id, UserEditModel model) Parameters companyId string Company Id id string User Id model UserEditModel Returns Task Remarks Required Permission for user in the this company: ManageUser Required Permission for user not in this company: ManageUser,ViewCompany Sample request: { \"email\": \"\", \"firstName\": \"\", \"lastName\": \"\", \"veracityId\": \"user identity id in Identity Provider\", \"description\": \"\", \"superAdmin\": false, \"active\":true, \"roleIds\":[\"1\",\"2\"], \"companyIds\":[\"1\",\"2\"] } UpdateUserFromCustomModel(string, string, TUser) Update a user using custom model. Only if custom user model is used. [HttpPut] [Route(\"custommodel/{id}\")] [PermissionAuthorize(new object[] { PermissionMatrix.Premissions.ManageUser })] [AccessCrossCompanyPermissionFilter(new object[] { PermissionMatrix.Premissions.ViewCompany })] [AccessibleCompanyFilter] [ApiExplorerSettings(GroupName = \"UserManagement's User APIs - Custom Model\")] public Task UpdateUserFromCustomModel(string companyId, string id, TUser model) Parameters companyId string Company Id id string User Id model TUser Returns Task Remarks Required Permission for user in the this company: ManageUser Required Permission for user not in this company: ManageUser,ViewCompany Sample request: { \"email\": \"\", \"firstName\": \"\", \"lastName\": \"\", \"veracityId\": \"user identity id in Identity Provider\", \"description\": \"\", \"superAdmin\": false, \"active\":true, \"roleIds\":[\"1\",\"2\"], \"companyIds\":[\"1\",\"2\"] }"
  },
  "api/DNV.Authorization.UserManagement.ApiControllers.html": {
    "href": "api/DNV.Authorization.UserManagement.ApiControllers.html",
    "title": "Namespace DNV.Authorization.UserManagement.ApiControllers",
    "keywords": "Namespace DNV.Authorization.UserManagement.ApiControllers Classes AccessCrossCompanyPermissionFilterAttribute Provides a api controller filter to add permissions check for users when access resource of company they do not belong. AccessibleCompanyFilterAttribute Provides a api controller filter to check if user has access on a specific company resource. CompaniesController<TCompany, TUser> DummyUserSynchronization GlobalRolesController<TRole, TUser> GlobalUsersController<TUser> RolesController<TCompany, TRole, TUser> UserManagementBaseController<TUser> UserManagementDefaultSetup Provides extension methods to register user management related services to IServiceCollection UserManagementOptions Provides an option to configure the user management module. UsersController<TRole, TUser>"
  },
  "api/DNV.Authorization.UserManagement.EFCore.CompanyRepository-3.html": {
    "href": "api/DNV.Authorization.UserManagement.EFCore.CompanyRepository-3.html",
    "title": "Class CompanyRepository<TCompany, TRole, TUser>",
    "keywords": "Class CompanyRepository<TCompany, TRole, TUser> Namespace DNV.Authorization.UserManagement.EFCore Assembly DNV.Authorization.UserManagement.EFCore.dll public class CompanyRepository<TCompany, TRole, TUser> : ICompany<TCompany> where TCompany : Company, new() where TRole : Role, new() where TUser : User, new() Type Parameters TCompany TRole TUser Inheritance object CompanyRepository<TCompany, TRole, TUser> Implements ICompany<TCompany> Derived CompanyRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors CompanyRepository(UserManagementContext<TCompany, TRole, TUser>) public CompanyRepository(UserManagementContext<TCompany, TRole, TUser> context) Parameters context UserManagementContext<TCompany, TRole, TUser> Methods All() Get a list of all company as an asynchronous operation. public Task<IEnumerable<TCompany>> All() Returns Task<IEnumerable<TCompany>> A Task<TResult> that represents the company list. Create(TCompany) Creates a new company in a store as an asynchronous operation. public Task<TCompany> Create(TCompany company) Parameters company TCompany The company to create in the store. Returns Task<TCompany> A Task<TResult> that represents the company. Delete(string) Deletes a company in a store as an asynchronous operation. public Task Delete(string Id) Parameters Id string The company ID to delete. Returns Task The Task that represents the asynchronous operation. List(IEnumerable<string>) Get a list of companies which has the specified ID as an asynchronous operation. public Task<IEnumerable<TCompany>> List(IEnumerable<string> Ids) Parameters Ids IEnumerable<string> The company ID list to look for. Returns Task<IEnumerable<TCompany>> A Task<TResult> that represents the company list. QueryCompanys() Return a querable company dataset. public IQueryable<TCompany> QueryCompanys() Returns IQueryable<TCompany> Read(string) Get a company which has the specified ID as an asynchronous operation. public Task<TCompany> Read(string Id) Parameters Id string The company ID to look for. Returns Task<TCompany> A Task<TResult> that represents the company. ReadByDomain(string) Get a company which has the specified web domain as an asynchronous operation. public Task<TCompany> ReadByDomain(string domain) Parameters domain string The web domain to look for. Returns Task<TCompany> A Task<TResult> that represents the company. Update(TCompany) Updates a company in a store as an asynchronous operation. public Task Update(TCompany company) Parameters company TCompany The company to update in the store. Returns Task The Task that represents the asynchronous operation."
  },
  "api/DNV.Authorization.UserManagement.EFCore.CompanyRepository.html": {
    "href": "api/DNV.Authorization.UserManagement.EFCore.CompanyRepository.html",
    "title": "Class CompanyRepository",
    "keywords": "Class CompanyRepository Namespace DNV.Authorization.UserManagement.EFCore Assembly DNV.Authorization.UserManagement.EFCore.dll public class CompanyRepository : CompanyRepository<Company, Role, User>, ICompany<Company> Inheritance object CompanyRepository<Company, Role, User> CompanyRepository Implements ICompany<Company> Inherited Members CompanyRepository<Company, Role, User>.All() CompanyRepository<Company, Role, User>.Create(Company) CompanyRepository<Company, Role, User>.Delete(string) CompanyRepository<Company, Role, User>.List(IEnumerable<string>) CompanyRepository<Company, Role, User>.QueryCompanys() CompanyRepository<Company, Role, User>.Read(string) CompanyRepository<Company, Role, User>.ReadByDomain(string) CompanyRepository<Company, Role, User>.Update(Company) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors CompanyRepository(UserManagementContext<Company, Role, User>) public CompanyRepository(UserManagementContext<Company, Role, User> context) Parameters context UserManagementContext<Company, Role, User>"
  },
  "api/DNV.Authorization.UserManagement.EFCore.EFCoreOptions.html": {
    "href": "api/DNV.Authorization.UserManagement.EFCore.EFCoreOptions.html",
    "title": "Class EFCoreOptions",
    "keywords": "Class EFCoreOptions Namespace DNV.Authorization.UserManagement.EFCore Assembly DNV.Authorization.UserManagement.EFCore.dll Provides an option to configure the user management EFCore module. public class EFCoreOptions Inheritance object EFCoreOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties DbContextOptionsBuilder Gets or sets the action to build Database Context Options. For example: DbContextOptionsBuilder = options => options.UseSqlServer(@\"Data Source=.\\SQLEXPRESS;Initial Catalog=UserManagement;Trusted_Connection=Yes;\"), public Action<DbContextOptionsBuilder> DbContextOptionsBuilder { get; set; } Property Value Action<DbContextOptionsBuilder> HardDelete Gets or sets the behavior of entity deletion. Set true if soft delete is not a desired behavior. public bool HardDelete { get; set; } Property Value bool ModelBuilder Gets or sets the action to apply customized module builder logic. For example, specify the container name in Azure Cosmos DB: ModelBuilder = (modelBuilder) => modelBuilder.HasDefaultContainer(\"User\"), public Action<ModelBuilder> ModelBuilder { get; set; } Property Value Action<ModelBuilder>"
  },
  "api/DNV.Authorization.UserManagement.EFCore.EFCoreSetup.html": {
    "href": "api/DNV.Authorization.UserManagement.EFCore.EFCoreSetup.html",
    "title": "Class EFCoreSetup",
    "keywords": "Class EFCoreSetup Namespace DNV.Authorization.UserManagement.EFCore Assembly DNV.Authorization.UserManagement.EFCore.dll Provides extension methods to register user management's database access implementaion to IServiceCollection public static class EFCoreSetup Inheritance object EFCoreSetup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods UseEFCore(IServiceCollection, EFCoreOptions) Configure database connection string and other settings for user management module. Use SQLServer as backend database to store user data. services.AddUserManagement().UseEFCore(new EFCoreOptions { DbContextOptionsBuilder = options => options.UseSqlServer(@\"Data Source=.\\SQLEXPRESS;Initial Catalog=UserManagement;Trusted_Connection=Yes;\") }) Use Cosmos DB as backend database to store user data. services.AddUserManagement().UseEFCore(new EFCoreOptions { DbContextOptionsBuilder = options => options.UseCosmos(\"https://localhost:8081\", \"*****\", databaseName: \"UserManagement\"), ModelBuilder = (modelBuilder) => modelBuilder.HasDefaultContainer(\"User\"), }) public static IServiceCollection UseEFCore(this IServiceCollection services, EFCoreOptions options) Parameters services IServiceCollection IServiceCollection options EFCoreOptions A instance of EFCoreOptions to configure the user management module. Returns IServiceCollection IServiceCollection UseEFCore<TUser>(IServiceCollection, EFCoreOptions) Configure database connection string and other settings for user management module. public static IServiceCollection UseEFCore<TUser>(this IServiceCollection services, EFCoreOptions options) where TUser : User, new() Parameters services IServiceCollection IServiceCollection options EFCoreOptions A instance of EFCoreOptions to configure the user management module. Returns IServiceCollection IServiceCollection Type Parameters TUser The type that represents a customized user model.It mush be inherited from User. UseEFCore<TCompany, TUser>(IServiceCollection, EFCoreOptions) Configure database connection string and other settings for user management module. public static IServiceCollection UseEFCore<TCompany, TUser>(this IServiceCollection services, EFCoreOptions options) where TCompany : Company, new() where TUser : User, new() Parameters services IServiceCollection IServiceCollection options EFCoreOptions A instance of EFCoreOptions to configure the user management module. Returns IServiceCollection IServiceCollection Type Parameters TCompany The type that represents a customized company model.It mush be inherited from Company. TUser The type that represents a customized user model.It mush be inherited from User. UseEFCore<TCompany, TRole, TUser>(IServiceCollection, EFCoreOptions) Configure database connection string and other settings for user management module. public static IServiceCollection UseEFCore<TCompany, TRole, TUser>(this IServiceCollection services, EFCoreOptions options) where TCompany : Company, new() where TRole : Role, new() where TUser : User, new() Parameters services IServiceCollection IServiceCollection options EFCoreOptions A instance of EFCoreOptions to configure the user management module. Returns IServiceCollection IServiceCollection Type Parameters TCompany The type that represents a customized company model.It mush be inherited from Company. TRole The type that represents a customized role model.It mush be inherited from Role. TUser The type that represents a customized user model.It mush be inherited from User."
  },
  "api/DNV.Authorization.UserManagement.EFCore.RoleRepository-3.html": {
    "href": "api/DNV.Authorization.UserManagement.EFCore.RoleRepository-3.html",
    "title": "Class RoleRepository<TCompany, TRole, TUser>",
    "keywords": "Class RoleRepository<TCompany, TRole, TUser> Namespace DNV.Authorization.UserManagement.EFCore Assembly DNV.Authorization.UserManagement.EFCore.dll public class RoleRepository<TCompany, TRole, TUser> : IRole<TRole> where TCompany : Company, new() where TRole : Role, new() where TUser : User, new() Type Parameters TCompany TRole TUser Inheritance object RoleRepository<TCompany, TRole, TUser> Implements IRole<TRole> Derived RoleRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors RoleRepository(UserManagementContext<TCompany, TRole, TUser>) public RoleRepository(UserManagementContext<TCompany, TRole, TUser> context) Parameters context UserManagementContext<TCompany, TRole, TUser> Methods All() Get a list of all role as an asynchronous operation. public Task<IEnumerable<TRole>> All() Returns Task<IEnumerable<TRole>> A Task<TResult> that represents the role list. Create(TRole) Creates a new role in a store as an asynchronous operation. public Task<TRole> Create(TRole role) Parameters role TRole The role to create in the store. Returns Task<TRole> A Task<TResult> that represents the role. Delete(string) Deletes a role in a store as an asynchronous operation. public Task Delete(string Id) Parameters Id string The role ID to delete. Returns Task The Task that represents the asynchronous operation. GetRolesOfCompany(string) Get a list of a company's roles as an asynchronous operation. public Task<IEnumerable<TRole>> GetRolesOfCompany(string companyId) Parameters companyId string The company ID to look for. Returns Task<IEnumerable<TRole>> A Task<TResult> that represents the role list. QueryRoles() Return a querable role dataset. public IQueryable<TRole> QueryRoles() Returns IQueryable<TRole> Read(string) Get a role which has the specified ID as an asynchronous operation. public Task<TRole> Read(string Id) Parameters Id string The role ID to look for. Returns Task<TRole> A Task<TResult> that represents the role. Update(TRole) Updates a role in a store as an asynchronous operation. public Task Update(TRole role) Parameters role TRole The role to update in the store. Returns Task The Task that represents the asynchronous operation."
  },
  "api/DNV.Authorization.UserManagement.EFCore.RoleRepository.html": {
    "href": "api/DNV.Authorization.UserManagement.EFCore.RoleRepository.html",
    "title": "Class RoleRepository",
    "keywords": "Class RoleRepository Namespace DNV.Authorization.UserManagement.EFCore Assembly DNV.Authorization.UserManagement.EFCore.dll public class RoleRepository : RoleRepository<Company, Role, User>, IRole<Role> Inheritance object RoleRepository<Company, Role, User> RoleRepository Implements IRole<Role> Inherited Members RoleRepository<Company, Role, User>.All() RoleRepository<Company, Role, User>.Create(Role) RoleRepository<Company, Role, User>.Delete(string) RoleRepository<Company, Role, User>.GetRolesOfCompany(string) RoleRepository<Company, Role, User>.Read(string) RoleRepository<Company, Role, User>.Update(Role) RoleRepository<Company, Role, User>.QueryRoles() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors RoleRepository(UserManagementContext<Company, Role, User>) public RoleRepository(UserManagementContext<Company, Role, User> context) Parameters context UserManagementContext<Company, Role, User>"
  },
  "api/DNV.Authorization.UserManagement.EFCore.UserManagementContext-1.html": {
    "href": "api/DNV.Authorization.UserManagement.EFCore.UserManagementContext-1.html",
    "title": "Class UserManagementContext<TUser>",
    "keywords": "Class UserManagementContext<TUser> Namespace DNV.Authorization.UserManagement.EFCore Assembly DNV.Authorization.UserManagement.EFCore.dll public class UserManagementContext<TUser> : UserManagementContext<Company, Role, TUser>, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IDisposable, IAsyncDisposable, IResettableService where TUser : User Type Parameters TUser Inheritance object DbContext UserManagementContext<Company, Role, TUser> UserManagementContext<TUser> Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IDisposable IAsyncDisposable IResettableService Inherited Members UserManagementContext<Company, Role, TUser>.Roles UserManagementContext<Company, Role, TUser>.Companys UserManagementContext<Company, Role, TUser>.Users UserManagementContext<Company, Role, TUser>.PrebuildModel UserManagementContext<Company, Role, TUser>.HardDelete UserManagementContext<Company, Role, TUser>.OnModelCreating(ModelBuilder) UserManagementContext<Company, Role, TUser>.SaveChanges() UserManagementContext<Company, Role, TUser>.SaveChangesAsync(CancellationToken) DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.OnModelCreating(ModelBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors UserManagementContext(DbContextOptions) public UserManagementContext(DbContextOptions options) Parameters options DbContextOptions"
  },
  "api/DNV.Authorization.UserManagement.EFCore.UserManagementContext-2.html": {
    "href": "api/DNV.Authorization.UserManagement.EFCore.UserManagementContext-2.html",
    "title": "Class UserManagementContext<TCompany, TUser>",
    "keywords": "Class UserManagementContext<TCompany, TUser> Namespace DNV.Authorization.UserManagement.EFCore Assembly DNV.Authorization.UserManagement.EFCore.dll public class UserManagementContext<TCompany, TUser> : UserManagementContext<TCompany, Role, TUser>, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IDisposable, IAsyncDisposable, IResettableService where TCompany : Company where TUser : User Type Parameters TCompany TUser Inheritance object DbContext UserManagementContext<TCompany, Role, TUser> UserManagementContext<TCompany, TUser> Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IDisposable IAsyncDisposable IResettableService Inherited Members UserManagementContext<TCompany, Role, TUser>.Roles UserManagementContext<TCompany, Role, TUser>.Companys UserManagementContext<TCompany, Role, TUser>.Users UserManagementContext<TCompany, Role, TUser>.PrebuildModel UserManagementContext<TCompany, Role, TUser>.HardDelete UserManagementContext<TCompany, Role, TUser>.OnModelCreating(ModelBuilder) UserManagementContext<TCompany, Role, TUser>.SaveChanges() UserManagementContext<TCompany, Role, TUser>.SaveChangesAsync(CancellationToken) DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.OnModelCreating(ModelBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors UserManagementContext(DbContextOptions) public UserManagementContext(DbContextOptions options) Parameters options DbContextOptions"
  },
  "api/DNV.Authorization.UserManagement.EFCore.UserManagementContext-3.html": {
    "href": "api/DNV.Authorization.UserManagement.EFCore.UserManagementContext-3.html",
    "title": "Class UserManagementContext<TCompany, TRole, TUser>",
    "keywords": "Class UserManagementContext<TCompany, TRole, TUser> Namespace DNV.Authorization.UserManagement.EFCore Assembly DNV.Authorization.UserManagement.EFCore.dll public class UserManagementContext<TCompany, TRole, TUser> : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IDisposable, IAsyncDisposable, IResettableService where TCompany : Company where TRole : Role where TUser : User Type Parameters TCompany TRole TUser Inheritance object DbContext UserManagementContext<TCompany, TRole, TUser> Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IDisposable IAsyncDisposable IResettableService Derived UserManagementContext UserManagementContext<TUser> UserManagementContext<TCompany, TUser> Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors UserManagementContext(DbContextOptions) public UserManagementContext(DbContextOptions options) Parameters options DbContextOptions Properties Companys public DbSet<TCompany> Companys { get; set; } Property Value DbSet<TCompany> HardDelete public bool HardDelete { get; set; } Property Value bool PrebuildModel public Action<ModelBuilder> PrebuildModel { get; set; } Property Value Action<ModelBuilder> Roles public DbSet<TRole> Roles { get; set; } Property Value DbSet<TRole> Users public DbSet<TUser> Users { get; set; } Property Value DbSet<TUser> Methods OnModelCreating(ModelBuilder) Override this method to further configure the model that was discovered by convention from the entity types exposed in DbSet<TEntity> properties on your derived context. The resulting model may be cached and re-used for subsequent instances of your derived context. protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The builder being used to construct the model for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure aspects of the model that are specific to a given database. Remarks If a model is explicitly set on the options for this context (via UseModel(IModel)) then this method will not be run. SaveChanges() Saves all changes made in this context to the database. This method will automatically call DetectChanges() to discover any changes to entity instances before saving to the underlying database. This can be disabled via AutoDetectChangesEnabled. public override int SaveChanges() Returns int The number of state entries written to the database. Exceptions DbUpdateException An error is encountered while saving to the database. DbUpdateConcurrencyException A concurrency violation is encountered while saving to the database. A concurrency violation occurs when an unexpected number of rows are affected during save. This is usually because the data in the database has been modified since it was loaded into memory. SaveChangesAsync(CancellationToken) Saves all changes made in this context to the database. This method will automatically call DetectChanges() to discover any changes to entity instances before saving to the underlying database. This can be disabled via AutoDetectChangesEnabled. Multiple active operations on the same context instance are not supported. Use 'await' to ensure that any asynchronous operations have completed before calling another method on this context. public override Task<int> SaveChangesAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A CancellationToken to observe while waiting for the task to complete. Returns Task<int> A task that represents the asynchronous save operation. The task result contains the number of state entries written to the database. Exceptions DbUpdateException An error is encountered while saving to the database. DbUpdateConcurrencyException A concurrency violation is encountered while saving to the database. A concurrency violation occurs when an unexpected number of rows are affected during save. This is usually because the data in the database has been modified since it was loaded into memory."
  },
  "api/DNV.Authorization.UserManagement.EFCore.UserManagementContext.html": {
    "href": "api/DNV.Authorization.UserManagement.EFCore.UserManagementContext.html",
    "title": "Class UserManagementContext",
    "keywords": "Class UserManagementContext Namespace DNV.Authorization.UserManagement.EFCore Assembly DNV.Authorization.UserManagement.EFCore.dll public class UserManagementContext : UserManagementContext<Company, Role, User>, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IDisposable, IAsyncDisposable, IResettableService Inheritance object DbContext UserManagementContext<Company, Role, User> UserManagementContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IDisposable IAsyncDisposable IResettableService Inherited Members UserManagementContext<Company, Role, User>.Roles UserManagementContext<Company, Role, User>.Companys UserManagementContext<Company, Role, User>.Users UserManagementContext<Company, Role, User>.PrebuildModel UserManagementContext<Company, Role, User>.HardDelete UserManagementContext<Company, Role, User>.OnModelCreating(ModelBuilder) UserManagementContext<Company, Role, User>.SaveChanges() UserManagementContext<Company, Role, User>.SaveChangesAsync(CancellationToken) DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.OnModelCreating(ModelBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors UserManagementContext(DbContextOptions) public UserManagementContext(DbContextOptions options) Parameters options DbContextOptions"
  },
  "api/DNV.Authorization.UserManagement.EFCore.UserPermissionReader-3.html": {
    "href": "api/DNV.Authorization.UserManagement.EFCore.UserPermissionReader-3.html",
    "title": "Class UserPermissionReader<TCompany, TRole, TUser>",
    "keywords": "Class UserPermissionReader<TCompany, TRole, TUser> Namespace DNV.Authorization.UserManagement.EFCore Assembly DNV.Authorization.UserManagement.EFCore.dll public class UserPermissionReader<TCompany, TRole, TUser> : IUserPermissionReader where TCompany : Company, new() where TRole : Role, new() where TUser : User, new() Type Parameters TCompany TRole TUser Inheritance object UserPermissionReader<TCompany, TRole, TUser> Implements IUserPermissionReader Derived UserPermissionReader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors UserPermissionReader(UserManagementContext<TCompany, TRole, TUser>, IPermissionRepository, UserManagementSettings) public UserPermissionReader(UserManagementContext<TCompany, TRole, TUser> context, IPermissionRepository permissionRepository, UserManagementSettings userManagementSettings) Parameters context UserManagementContext<TCompany, TRole, TUser> permissionRepository IPermissionRepository userManagementSettings UserManagementSettings Methods GetPermissions(IEnumerable<string>) Get a permission list from a list of permission keys/Ids. public Task<IEnumerable<PermissionEntity>> GetPermissions(IEnumerable<string> permissions) Parameters permissions IEnumerable<string> a list of permission keys/Ids Returns Task<IEnumerable<PermissionEntity>> A Task<IEnumerable<PermissionEntity>> that represents the permission list. GetPermissions(string) Get a user's all permissions. public Task<IEnumerable<PermissionEntity>> GetPermissions(string identity) Parameters identity string The identity id to look for. It could be the ID provided by Identity provider or the primary key for this user in local database. Returns Task<IEnumerable<PermissionEntity>> A Task<IEnumerable<PermissionEntity>> that represents the user's permission list. GetPermissions(string, string) Get a user's all permissions of a company. public Task<IEnumerable<PermissionEntity>> GetPermissions(string identity, string companyId) Parameters identity string The identity id to look for. It could be the ID provided by Identity provider or the primary key for this user in local database. companyId string The company ID to look for. Returns Task<IEnumerable<PermissionEntity>> A Task<IEnumerable<PermissionEntity>> that represents the user's permission list."
  },
  "api/DNV.Authorization.UserManagement.EFCore.UserPermissionReader.html": {
    "href": "api/DNV.Authorization.UserManagement.EFCore.UserPermissionReader.html",
    "title": "Class UserPermissionReader",
    "keywords": "Class UserPermissionReader Namespace DNV.Authorization.UserManagement.EFCore Assembly DNV.Authorization.UserManagement.EFCore.dll public class UserPermissionReader : UserPermissionReader<Company, Role, User>, IUserPermissionReader Inheritance object UserPermissionReader<Company, Role, User> UserPermissionReader Implements IUserPermissionReader Inherited Members UserPermissionReader<Company, Role, User>.GetPermissions(string) UserPermissionReader<Company, Role, User>.GetPermissions(string, string) UserPermissionReader<Company, Role, User>.GetPermissions(IEnumerable<string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors UserPermissionReader(UserManagementContext<Company, Role, User>, IPermissionRepository, UserManagementSettings) public UserPermissionReader(UserManagementContext<Company, Role, User> context, IPermissionRepository permissionRepository, UserManagementSettings userManagementSettings) Parameters context UserManagementContext<Company, Role, User> permissionRepository IPermissionRepository userManagementSettings UserManagementSettings"
  },
  "api/DNV.Authorization.UserManagement.EFCore.UserRepository-3.html": {
    "href": "api/DNV.Authorization.UserManagement.EFCore.UserRepository-3.html",
    "title": "Class UserRepository<TCompany, TRole, TUser>",
    "keywords": "Class UserRepository<TCompany, TRole, TUser> Namespace DNV.Authorization.UserManagement.EFCore Assembly DNV.Authorization.UserManagement.EFCore.dll public class UserRepository<TCompany, TRole, TUser> : IUser<TUser> where TCompany : Company, new() where TRole : Role, new() where TUser : User, new() Type Parameters TCompany TRole TUser Inheritance object UserRepository<TCompany, TRole, TUser> Implements IUser<TUser> Derived UserRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors UserRepository(UserManagementContext<TCompany, TRole, TUser>) public UserRepository(UserManagementContext<TCompany, TRole, TUser> context) Parameters context UserManagementContext<TCompany, TRole, TUser> Methods All(PageParam) Get a list of all user as an asynchronous operation. public Task<PaginatedResult<TUser>> All(PageParam pageParam = null) Parameters pageParam PageParam The page index and size PageParam, starting from 1 Returns Task<PaginatedResult<TUser>> A Task<TResult> that represents the user list. Create(TUser) Creates a new user in a store as an asynchronous operation. public Task<TUser> Create(TUser user) Parameters user TUser The user to create in the store. Returns Task<TUser> A Task<TResult> that represents the user. Delete(string) Deletes a user in a store as an asynchronous operation. public Task Delete(string Id) Parameters Id string The user ID to delete. Returns Task The Task that represents the asynchronous operation. GetUserByEmail(string) Get a user list by matching email. public Task<TUser> GetUserByEmail(string email) Parameters email string The email address to look for. Returns Task<TUser> A Task<TResult> that represents the user list. GetUsersOfCompany(string, PageParam) Get a user list of a company. public Task<PaginatedResult<TUser>> GetUsersOfCompany(string companyId, PageParam pageParam = null) Parameters companyId string The company ID to look for. pageParam PageParam The page index and size PageParam, starting from 1 Returns Task<PaginatedResult<TUser>> A Task<TResult> that represents the user list. GetUsersOfRole(string) Get a user list of a role public Task<IEnumerable<TUser>> GetUsersOfRole(string roleId) Parameters roleId string The role ID to look for. Returns Task<IEnumerable<TUser>> A Task<TResult> that represents the user list. QueryUsers() Return a querable user dataset. public IQueryable<TUser> QueryUsers() Returns IQueryable<TUser> Read(string) Get a user which has the specified ID as an asynchronous operation. public Task<TUser> Read(string Id) Parameters Id string The user ID to look for. Returns Task<TUser> A Task<TResult> that represents the user. ReadByIdentityId(string) Get a user which has the specified Identity ID as an asynchronous operation. public Task<TUser> ReadByIdentityId(string IdentityId) Parameters IdentityId string The identity id to look for. It is an ID provided by Identity provider. It is varacity id if Varacity provide identity. Returns Task<TUser> A Task<TResult> that represents the user. Update(TUser) Updates a user in a store as an asynchronous operation. public Task Update(TUser user) Parameters user TUser The user to update in the store. Returns Task The Task that represents the asynchronous operation."
  },
  "api/DNV.Authorization.UserManagement.EFCore.UserRepository.html": {
    "href": "api/DNV.Authorization.UserManagement.EFCore.UserRepository.html",
    "title": "Class UserRepository",
    "keywords": "Class UserRepository Namespace DNV.Authorization.UserManagement.EFCore Assembly DNV.Authorization.UserManagement.EFCore.dll public class UserRepository : UserRepository<Company, Role, User>, IUser<User> Inheritance object UserRepository<Company, Role, User> UserRepository Implements IUser<User> Inherited Members UserRepository<Company, Role, User>.All(PageParam) UserRepository<Company, Role, User>.Create(User) UserRepository<Company, Role, User>.Delete(string) UserRepository<Company, Role, User>.GetUsersOfCompany(string, PageParam) UserRepository<Company, Role, User>.GetUsersOfRole(string) UserRepository<Company, Role, User>.Read(string) UserRepository<Company, Role, User>.ReadByIdentityId(string) UserRepository<Company, Role, User>.Update(User) UserRepository<Company, Role, User>.GetUserByEmail(string) UserRepository<Company, Role, User>.QueryUsers() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors UserRepository(UserManagementContext<Company, Role, User>) public UserRepository(UserManagementContext<Company, Role, User> context) Parameters context UserManagementContext<Company, Role, User>"
  },
  "api/DNV.Authorization.UserManagement.EFCore.html": {
    "href": "api/DNV.Authorization.UserManagement.EFCore.html",
    "title": "Namespace DNV.Authorization.UserManagement.EFCore",
    "keywords": "Namespace DNV.Authorization.UserManagement.EFCore Classes CompanyRepository CompanyRepository<TCompany, TRole, TUser> EFCoreOptions Provides an option to configure the user management EFCore module. EFCoreSetup Provides extension methods to register user management's database access implementaion to IServiceCollection RoleRepository RoleRepository<TCompany, TRole, TUser> UserManagementContext UserManagementContext<TUser> UserManagementContext<TCompany, TUser> UserManagementContext<TCompany, TRole, TUser> UserPermissionReader UserPermissionReader<TCompany, TRole, TUser> UserRepository UserRepository<TCompany, TRole, TUser>"
  },
  "api/DNV.Authorization.Web.Abstraction.BuiltinUnauthorizedAccessHandler.html": {
    "href": "api/DNV.Authorization.Web.Abstraction.BuiltinUnauthorizedAccessHandler.html",
    "title": "Class BuiltinUnauthorizedAccessHandler",
    "keywords": "Class BuiltinUnauthorizedAccessHandler Namespace DNV.Authorization.Web.Abstraction Assembly DNV.Authorization.Web.dll Provides a built in implementation of unauthorized access behaviors. public static class BuiltinUnauthorizedAccessHandler Inheritance object BuiltinUnauthorizedAccessHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Return403ForbiddenCode Return 403 code to the client. public static readonly Action<HttpContext, string> Return403ForbiddenCode Field Value Action<HttpContext, string> ThrowExceptionDirectly Throw unauthorized access exception directly. public static readonly Action<HttpContext, string> ThrowExceptionDirectly Field Value Action<HttpContext, string>"
  },
  "api/DNV.Authorization.Web.Abstraction.IPermissionRepository.html": {
    "href": "api/DNV.Authorization.Web.Abstraction.IPermissionRepository.html",
    "title": "Interface IPermissionRepository",
    "keywords": "Interface IPermissionRepository Namespace DNV.Authorization.Web.Abstraction Assembly DNV.Authorization.Web.dll Provide an abstraction for a storage and management of premissions. public interface IPermissionRepository Extension Methods Throws.IfNull<T>(T, string?) Remarks Implement this intrefact only if permissions are not defined in source code Implement IPermissionMatrix to define permissions in source code Methods GetAll() Return all permissions Task<IEnumerable<PermissionEntity>> GetAll() Returns Task<IEnumerable<PermissionEntity>> A List of Task<IEnumerable<PermissionEntity>>."
  },
  "api/DNV.Authorization.Web.Abstraction.IUserPermissionReader.html": {
    "href": "api/DNV.Authorization.Web.Abstraction.IUserPermissionReader.html",
    "title": "Interface IUserPermissionReader",
    "keywords": "Interface IUserPermissionReader Namespace DNV.Authorization.Web.Abstraction Assembly DNV.Authorization.Web.dll Provide an abstraction for a storage and management of users premissions. public interface IUserPermissionReader Extension Methods Throws.IfNull<T>(T, string?) Remarks It must be implemented in the project Methods GetPermissions(IEnumerable<string>) Get a permission list from a list of permission keys/Ids. Task<IEnumerable<PermissionEntity>> GetPermissions(IEnumerable<string> permissions) Parameters permissions IEnumerable<string> a list of permission keys/Ids Returns Task<IEnumerable<PermissionEntity>> A Task<IEnumerable<PermissionEntity>> that represents the permission list. GetPermissions(string) Get a user's all permissions. Task<IEnumerable<PermissionEntity>> GetPermissions(string identity) Parameters identity string The identity id to look for. It could be the ID provided by Identity provider or the primary key for this user in local database. Returns Task<IEnumerable<PermissionEntity>> A Task<IEnumerable<PermissionEntity>> that represents the user's permission list. GetPermissions(string, string) Get a user's all permissions of a company. Task<IEnumerable<PermissionEntity>> GetPermissions(string identity, string companyId) Parameters identity string The identity id to look for. It could be the ID provided by Identity provider or the primary key for this user in local database. companyId string The company ID to look for. Returns Task<IEnumerable<PermissionEntity>> A Task<IEnumerable<PermissionEntity>> that represents the user's permission list."
  },
  "api/DNV.Authorization.Web.Abstraction.PermissionEntity.html": {
    "href": "api/DNV.Authorization.Web.Abstraction.PermissionEntity.html",
    "title": "Class PermissionEntity",
    "keywords": "Class PermissionEntity Namespace DNV.Authorization.Web.Abstraction Assembly DNV.Authorization.Web.dll Represents permission information for a permission record. public class PermissionEntity Inheritance object PermissionEntity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties Description Gets or sets the description for this permission. public string Description { get; set; } Property Value string Remarks Display on UI Group Gets or sets the group for this permission. public string Group { get; set; } Property Value string Remarks group permissions on UI Id Gets or sets the primary key for this permission. public string Id { get; set; } Property Value string Remarks Permission's Id should be unique at the global level. Key Gets or sets the unique key for this permission. public string Key { get; set; } Property Value string Remarks Permission's Key should be unique at the global level. It's better to have a human readable key. Name Gets or sets the name for this permission. public string Name { get; set; } Property Value string Remarks Display on UI"
  },
  "api/DNV.Authorization.Web.Abstraction.PermissionOptions.html": {
    "href": "api/DNV.Authorization.Web.Abstraction.PermissionOptions.html",
    "title": "Class PermissionOptions",
    "keywords": "Class PermissionOptions Namespace DNV.Authorization.Web.Abstraction Assembly DNV.Authorization.Web.dll Provides a class to configure permission check behaviors. public class PermissionOptions Inheritance object PermissionOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties GetCompanyIdentity A Function to get compnay's primary key from HttpContext. public Func<HttpContext, string> GetCompanyIdentity { get; set; } Property Value Func<HttpContext, string> GetUserIdentity A Function to get user's identity id from ClaimsPrincipal. public Func<ClaimsPrincipal, string> GetUserIdentity { get; set; } Property Value Func<ClaimsPrincipal, string> HandleUnauthorizedAccess An action to handle unauthorized access. public Action<HttpContext, string> HandleUnauthorizedAccess { get; set; } Property Value Action<HttpContext, string>"
  },
  "api/DNV.Authorization.Web.Abstraction.html": {
    "href": "api/DNV.Authorization.Web.Abstraction.html",
    "title": "Namespace DNV.Authorization.Web.Abstraction",
    "keywords": "Namespace DNV.Authorization.Web.Abstraction Classes BuiltinUnauthorizedAccessHandler Provides a built in implementation of unauthorized access behaviors. PermissionEntity Represents permission information for a permission record. PermissionOptions Provides a class to configure permission check behaviors. Interfaces IPermissionRepository Provide an abstraction for a storage and management of premissions. IUserPermissionReader Provide an abstraction for a storage and management of users premissions."
  },
  "api/DNV.Authorization.Web.AttributeAuthorizationHandler-2.html": {
    "href": "api/DNV.Authorization.Web.AttributeAuthorizationHandler-2.html",
    "title": "Class AttributeAuthorizationHandler<TRequirement, TAttribute>",
    "keywords": "Class AttributeAuthorizationHandler<TRequirement, TAttribute> Namespace DNV.Authorization.Web Assembly DNV.Authorization.Web.dll public abstract class AttributeAuthorizationHandler<TRequirement, TAttribute> : AuthorizationHandler<TRequirement>, IAuthorizationHandler where TRequirement : IAuthorizationRequirement where TAttribute : Attribute Type Parameters TRequirement TAttribute Inheritance object AuthorizationHandler<TRequirement> AttributeAuthorizationHandler<TRequirement, TAttribute> Implements IAuthorizationHandler Inherited Members AuthorizationHandler<TRequirement>.HandleAsync(AuthorizationHandlerContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Methods HandleRequirementAsync(AuthorizationHandlerContext, TRequirement) Makes a decision if authorization is allowed based on a specific requirement. protected override Task HandleRequirementAsync(AuthorizationHandlerContext context, TRequirement requirement) Parameters context AuthorizationHandlerContext The authorization context. requirement TRequirement The requirement to evaluate. Returns Task HandleRequirementAsync(AuthorizationHandlerContext, TRequirement, IEnumerable<TAttribute>) protected abstract Task HandleRequirementAsync(AuthorizationHandlerContext context, TRequirement requirement, IEnumerable<TAttribute> attributes) Parameters context AuthorizationHandlerContext requirement TRequirement attributes IEnumerable<TAttribute> Returns Task"
  },
  "api/DNV.Authorization.Web.CompanyIdentityFieldNameFilterAttribute.html": {
    "href": "api/DNV.Authorization.Web.CompanyIdentityFieldNameFilterAttribute.html",
    "title": "Class CompanyIdentityFieldNameFilterAttribute",
    "keywords": "Class CompanyIdentityFieldNameFilterAttribute Namespace DNV.Authorization.Web Assembly DNV.Authorization.Web.dll Provides a api controller filter to get a company id. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = false)] public class CompanyIdentityFieldNameFilterAttribute : TypeFilterAttribute, IFilterFactory, IOrderedFilter, IFilterMetadata Inheritance object Attribute TypeFilterAttribute CompanyIdentityFieldNameFilterAttribute Implements IFilterFactory IOrderedFilter IFilterMetadata Inherited Members TypeFilterAttribute.CreateInstance(IServiceProvider) TypeFilterAttribute.Arguments TypeFilterAttribute.ImplementationType TypeFilterAttribute.Order TypeFilterAttribute.IsReusable Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors CompanyIdentityFieldNameFilterAttribute(string, string, string) Constructs a new instance of CompanyIdentityFieldNameFilterAttribute. public CompanyIdentityFieldNameFilterAttribute(string companyIdInRoute = \"\", string companyIdInQuery = \"\", string companyIdInActionArguments = \"\") Parameters companyIdInRoute string compnay id specification in route. companyIdInQuery string compnay id specification in query. companyIdInActionArguments string compnay id specification in action arguments. Methods GetCompanyId(HttpContext) Get company from httpcontext. public void GetCompanyId(HttpContext context) Parameters context HttpContext HttpContext"
  },
  "api/DNV.Authorization.Web.CompanyMemberIgnorePermissionFilterAttribute.html": {
    "href": "api/DNV.Authorization.Web.CompanyMemberIgnorePermissionFilterAttribute.html",
    "title": "Class CompanyMemberIgnorePermissionFilterAttribute",
    "keywords": "Class CompanyMemberIgnorePermissionFilterAttribute Namespace DNV.Authorization.Web Assembly DNV.Authorization.Web.dll Provides a api controller filter to ignore permissions check for user when access their own company's resource. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = false)] public class CompanyMemberIgnorePermissionFilterAttribute : TypeFilterAttribute, IFilterFactory, IOrderedFilter, IFilterMetadata Inheritance object Attribute TypeFilterAttribute CompanyMemberIgnorePermissionFilterAttribute Implements IFilterFactory IOrderedFilter IFilterMetadata Inherited Members TypeFilterAttribute.CreateInstance(IServiceProvider) TypeFilterAttribute.Arguments TypeFilterAttribute.ImplementationType TypeFilterAttribute.Order TypeFilterAttribute.IsReusable Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors CompanyMemberIgnorePermissionFilterAttribute(params object[]) Constructs a new instance of CompanyMemberIgnorePermissionFilterAttribute. public CompanyMemberIgnorePermissionFilterAttribute(params object[] permissionsToIgore) Parameters permissionsToIgore object[] A collection of permission to be ignored. CompanyMemberIgnorePermissionFilterAttribute(params string[]) Constructs a new instance of CompanyMemberIgnorePermissionFilterAttribute. public CompanyMemberIgnorePermissionFilterAttribute(params string[] permissionsToIgore) Parameters permissionsToIgore string[] A collection of permission to be ignored. Properties PermissionsToIgore Get a collection of permission to be ignored public string[] PermissionsToIgore { get; } Property Value string[]"
  },
  "api/DNV.Authorization.Web.Constants.html": {
    "href": "api/DNV.Authorization.Web.Constants.html",
    "title": "Class Constants",
    "keywords": "Class Constants Namespace DNV.Authorization.Web Assembly DNV.Authorization.Web.dll public static class Constants Inheritance object Constants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AUTHORIZATIONCOMPANYID public const string AUTHORIZATIONCOMPANYID = \"AuthorizationCompanyId\" Field Value string AUTHORIZATIONPERMISSIONS public const string AUTHORIZATIONPERMISSIONS = \"AuthorizationPermissions\" Field Value string AUTHORIZATIONTENANTROUTE public const string AUTHORIZATIONTENANTROUTE = \"AuthorizationTenantRoute\" Field Value string AUTHORIZATION_COMPANYID public const string AUTHORIZATION_COMPANYID = \"AUTHORIZATION.COMPANYID\" Field Value string COMPANYID public const string COMPANYID = \"companyId\" Field Value string COMPANY_ROLE_NOT_RELEVANT public const string COMPANY_ROLE_NOT_RELEVANT = \"Company_Role_Not_Relevant\" Field Value string IGNORE_PERMISSIONS public const string IGNORE_PERMISSIONS = \"AUTHORIZATION.COMPANY.IGNORE.PERMISSIONS\" Field Value string"
  },
  "api/DNV.Authorization.Web.CookieAuthenticationOptionsSetup.html": {
    "href": "api/DNV.Authorization.Web.CookieAuthenticationOptionsSetup.html",
    "title": "Class CookieAuthenticationOptionsSetup",
    "keywords": "Class CookieAuthenticationOptionsSetup Namespace DNV.Authorization.Web Assembly DNV.Authorization.Web.dll [Obsolete(\"This function is not ready for use. do not use.\", true)] public class CookieAuthenticationOptionsSetup : IConfigureNamedOptions<CookieAuthenticationOptions>, IConfigureOptions<CookieAuthenticationOptions> Inheritance object CookieAuthenticationOptionsSetup Implements IConfigureNamedOptions<CookieAuthenticationOptions> IConfigureOptions<CookieAuthenticationOptions> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors CookieAuthenticationOptionsSetup(IUserPermissionReader, PermissionOptions) public CookieAuthenticationOptionsSetup(IUserPermissionReader userPermissionReader, PermissionOptions permissionOptions) Parameters userPermissionReader IUserPermissionReader permissionOptions PermissionOptions Methods Configure(CookieAuthenticationOptions) Invoked to configure a CookieAuthenticationOptions instance. public void Configure(CookieAuthenticationOptions options) Parameters options CookieAuthenticationOptions The options instance to configure. Configure(string, CookieAuthenticationOptions) Invoked to configure a CookieAuthenticationOptions instance. public void Configure(string name, CookieAuthenticationOptions options) Parameters name string The name of the options instance being configured. options CookieAuthenticationOptions The options instance to configure."
  },
  "api/DNV.Authorization.Web.EnumExtensions.html": {
    "href": "api/DNV.Authorization.Web.EnumExtensions.html",
    "title": "Class EnumExtensions",
    "keywords": "Class EnumExtensions Namespace DNV.Authorization.Web Assembly DNV.Authorization.Web.dll Provides extension methods to enum. public static class EnumExtensions Inheritance object EnumExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods EnumerateNestedTypes(Type) Get all refered type of a Type public static IEnumerable<Type> EnumerateNestedTypes(this Type type) Parameters type Type The target Type. Returns IEnumerable<Type> The collection of types. IEnumerable<T> FindNestedType(Type, Predicate<Type>) Get a refered type of a Type with a predicate function. public static Type FindNestedType(this Type type, Predicate<Type> filter) Parameters type Type The target Type. filter Predicate<Type> A predicate to filter type Returns Type The Type GetPermissionKey(Enum) public static string GetPermissionKey(this Enum enumValue) Parameters enumValue Enum Returns string"
  },
  "api/DNV.Authorization.Web.IPermissionMatrix.html": {
    "href": "api/DNV.Authorization.Web.IPermissionMatrix.html",
    "title": "Interface IPermissionMatrix",
    "keywords": "Interface IPermissionMatrix Namespace DNV.Authorization.Web Assembly DNV.Authorization.Web.dll Marker interface indicate class which has permission defined. define permission in Enum which field has attribute PermissionValueAttribute in the implemented class. Those permissions will be loaded by PermissionRepository public interface IPermissionMatrix Extension Methods Throws.IfNull<T>(T, string?)"
  },
  "api/DNV.Authorization.Web.PermissionAuthorizeAttribute.html": {
    "href": "api/DNV.Authorization.Web.PermissionAuthorizeAttribute.html",
    "title": "Class PermissionAuthorizeAttribute",
    "keywords": "Class PermissionAuthorizeAttribute Namespace DNV.Authorization.Web Assembly DNV.Authorization.Web.dll Provides a api controller action's decoartor to specify access permission. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true)] public class PermissionAuthorizeAttribute : AuthorizeAttribute, IAuthorizeData Inheritance object Attribute AuthorizeAttribute PermissionAuthorizeAttribute Implements IAuthorizeData Inherited Members AuthorizeAttribute.Policy AuthorizeAttribute.Roles AuthorizeAttribute.AuthenticationSchemes Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors PermissionAuthorizeAttribute(params object[]) Constructs a new instance of PermissionAuthorizeAttribute public PermissionAuthorizeAttribute(params object[] permissionsToCheck) Parameters permissionsToCheck object[] A collection of required permissions. PermissionAuthorizeAttribute(params string[]) Constructs a new instance of PermissionAuthorizeAttribute public PermissionAuthorizeAttribute(params string[] permissionsToCheck) Parameters permissionsToCheck string[] A collection of required permissions. Properties PermissionsToCheck Get the collection of required permissions public string[] PermissionsToCheck { get; } Property Value string[]"
  },
  "api/DNV.Authorization.Web.PermissionController.html": {
    "href": "api/DNV.Authorization.Web.PermissionController.html",
    "title": "Class PermissionController",
    "keywords": "Class PermissionController Namespace DNV.Authorization.Web Assembly DNV.Authorization.Web.dll [Authorize] [ApiController] [Route(\"api/[controller]\")] [ApiExplorerSettings(GroupName = \"UserManagement's Permission APIs\")] public class PermissionController : ControllerBase Inheritance object ControllerBase PermissionController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.User object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors PermissionController(IPermissionRepository) public PermissionController(IPermissionRepository permissionRepository) Parameters permissionRepository IPermissionRepository Methods Get() [HttpGet] public Task<IEnumerable<PermissionEntity>> Get() Returns Task<IEnumerable<PermissionEntity>>"
  },
  "api/DNV.Authorization.Web.PermissionDefaultSetup.html": {
    "href": "api/DNV.Authorization.Web.PermissionDefaultSetup.html",
    "title": "Class PermissionDefaultSetup",
    "keywords": "Class PermissionDefaultSetup Namespace DNV.Authorization.Web Assembly DNV.Authorization.Web.dll Extension methods to register permission related services to IServiceCollection public static class PermissionDefaultSetup Inheritance object PermissionDefaultSetup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddCookieValidateHandler(CookieAuthenticationEvents) Add customized CookieValidateHandler to the OnValidatePrincipal. services.AddAuthentication().AddCookie(o => o.Events.AddCookieValidateHandler(services)); public static CookieAuthenticationEvents AddCookieValidateHandler(this CookieAuthenticationEvents cookieEvents) Parameters cookieEvents CookieAuthenticationEvents CookieAuthenticationEvents Returns CookieAuthenticationEvents CookieAuthenticationEvents Remarks Claim based authorization is enabled only if this customized CookieValidateHandler are added. AddPermissionAuthorizationWithoutUserPermissionReader(IServiceCollection, PermissionOptions) Setup permission authorization with default PermissionRepository. Additionaly,IUserPermissionReader's implementation has to be registered at other place. public static IServiceCollection AddPermissionAuthorizationWithoutUserPermissionReader(this IServiceCollection services, PermissionOptions permissionOptions = null) Parameters services IServiceCollection IServiceCollection permissionOptions PermissionOptions An optional parameter.PermissionOptions controls the permission check behavior. Returns IServiceCollection IServiceCollection AddPermissionAuthorizationWithoutUserPermissionReader<TPermissionRepository>(IServiceCollection, PermissionOptions) Setup permission authorization with customized implementation of IPermissionRepository. Additionaly,IUserPermissionReader's implementation has to be registered at other place. public static IServiceCollection AddPermissionAuthorizationWithoutUserPermissionReader<TPermissionRepository>(this IServiceCollection services, PermissionOptions permissionOptions = null) where TPermissionRepository : IPermissionRepository Parameters services IServiceCollection IServiceCollection permissionOptions PermissionOptions An optional parameter.PermissionOptions controls the permission check behavior. Returns IServiceCollection IServiceCollection Type Parameters TPermissionRepository The implemenation of IPermissionRepository AddPermissionAuthorization<TUserPermissionReader>(IServiceCollection, PermissionOptions) Setup permission authorization with default PermissionRepository and customized implementation of IUserPermissionReader. Register IPermissionRepository's default implementation PermissionRepository which fetch all permissions defined in source code. The implementation of IUserPermissionReader must be specified to replace generic type TUserPermissionReader public static IServiceCollection AddPermissionAuthorization<TUserPermissionReader>(this IServiceCollection services, PermissionOptions permissionOptions = null) where TUserPermissionReader : IUserPermissionReader Parameters services IServiceCollection IServiceCollection permissionOptions PermissionOptions An optional parameter.PermissionOptions controls the permission check behavior. Returns IServiceCollection IServiceCollection Type Parameters TUserPermissionReader The implemenation of IUserPermissionReader AddPermissionAuthorization<TUserPermissionReader, TPermissionRepository>(IServiceCollection, PermissionOptions) Setup permission authorization with customized implementation of IPermissionRepository and IUserPermissionReader. public static IServiceCollection AddPermissionAuthorization<TUserPermissionReader, TPermissionRepository>(this IServiceCollection services, PermissionOptions permissionOptions = null) where TUserPermissionReader : IUserPermissionReader where TPermissionRepository : IPermissionRepository Parameters services IServiceCollection IServiceCollection permissionOptions PermissionOptions An optional parameter.PermissionOptions controls the permission check behavior. Returns IServiceCollection IServiceCollection Type Parameters TUserPermissionReader The implemenation of IUserPermissionReader TPermissionRepository The implemenation of IPermissionRepository PouplateRoleOfPrincipal(HttpContext, ClaimsPrincipal, string) Populate user's permissions into Role Claims. public static Task PouplateRoleOfPrincipal(HttpContext httpContext, ClaimsPrincipal claimsPrincipal, string companyId = \"Company_Role_Not_Relevant\") Parameters httpContext HttpContext Get injected services from HttpContext's RequestServices claimsPrincipal ClaimsPrincipal ClaimsPrincipal companyId string Thd id of a company. Returns Task UsePermissionRepository<TPermissionRepository>(IServiceCollection) Use you own IPermissionRepository implementation to replace default built-in implementation. public static IServiceCollection UsePermissionRepository<TPermissionRepository>(this IServiceCollection services) where TPermissionRepository : IPermissionRepository Parameters services IServiceCollection IServiceCollection Returns IServiceCollection IServiceCollection Type Parameters TPermissionRepository The implemenation of IPermissionRepository"
  },
  "api/DNV.Authorization.Web.PermissionMatrix.Premissions.html": {
    "href": "api/DNV.Authorization.Web.PermissionMatrix.Premissions.html",
    "title": "Enum PermissionMatrix.Premissions",
    "keywords": "Enum PermissionMatrix.Premissions Namespace DNV.Authorization.Web Assembly DNV.Authorization.Web.dll public enum PermissionMatrix.Premissions Extension Methods Throws.IfNull<T>(T, string?) EnumExtensions.GetPermissionKey(Enum) Fields [PermissionValue(\"1000.6\", \"ManageCompany\", \"Manage Company\", \"ManageCompany\", \"Admin\")] ManageCompany = 5 Permission of role crud operations [PermissionValue(\"1000.4\", \"ManageRole\", \"Manage Role\", \"ManageRole\", \"Admin\")] ManageRole = 3 Permission of role crud operations [PermissionValue(\"1000.1\", \"ManageUser\", \"Manage User\", \"ManageUser\", \"Admin\")] ManageUser = 0 Permission of user crud operations [PermissionValue(\"1000.5\", \"ViewCompany\", \"View Company\", \"ViewCompany\", \"Admin\")] ViewCompany = 4 Permission of role readonly operation [PermissionValue(\"1000.3\", \"ViewRole\", \"View Role\", \"ViewRole\", \"Admin\")] ViewRole = 2 Permission of role readonly operation [PermissionValue(\"1000.2\", \"ViewUser\", \"View User\", \"ViewUser\", \"Admin\")] ViewUser = 1 Permission of user readonly operation"
  },
  "api/DNV.Authorization.Web.PermissionMatrix.html": {
    "href": "api/DNV.Authorization.Web.PermissionMatrix.html",
    "title": "Class PermissionMatrix",
    "keywords": "Class PermissionMatrix Namespace DNV.Authorization.Web Assembly DNV.Authorization.Web.dll Provides a predefined permission related to user management. public class PermissionMatrix : IPermissionMatrix Inheritance object PermissionMatrix Implements IPermissionMatrix Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?)"
  },
  "api/DNV.Authorization.Web.PermissionValueAttribute.html": {
    "href": "api/DNV.Authorization.Web.PermissionValueAttribute.html",
    "title": "Class PermissionValueAttribute",
    "keywords": "Class PermissionValueAttribute Namespace DNV.Authorization.Web Assembly DNV.Authorization.Web.dll Represents permission information for a permission record. [AttributeUsage(AttributeTargets.Field, AllowMultiple = false)] public class PermissionValueAttribute : Attribute Inheritance object Attribute PermissionValueAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Remarks This attribute is attached to an enum filed to define a permission entity. Constructors PermissionValueAttribute(string, string, string, string, string) Construct a permission entity public PermissionValueAttribute(string id, string key, string name, string description, string group) Parameters id string Permission's Id should be unique at the global level. key string Permission's Key should be unique at the global level. It's better to have a human readable key. name string Permission's name. Display on UI description string Permission's description. Display on UI group string Permission's group. group permissions on UI Properties Description Permission's description. Display on UI public string Description { get; set; } Property Value string Group Permission's group. group permissions on UI public string Group { get; set; } Property Value string Id Permission's Id should be unique at global level. public string Id { get; set; } Property Value string Key Permission's Key should be unique at the global level. It's better to have a human readable key. public string Key { get; set; } Property Value string Name Permission's name. Display on UI public string Name { get; set; } Property Value string"
  },
  "api/DNV.Authorization.Web.html": {
    "href": "api/DNV.Authorization.Web.html",
    "title": "Namespace DNV.Authorization.Web",
    "keywords": "Namespace DNV.Authorization.Web Classes AttributeAuthorizationHandler<TRequirement, TAttribute> CompanyIdentityFieldNameFilterAttribute Provides a api controller filter to get a company id. CompanyMemberIgnorePermissionFilterAttribute Provides a api controller filter to ignore permissions check for user when access their own company's resource. Constants CookieAuthenticationOptionsSetup EnumExtensions Provides extension methods to enum. PermissionAuthorizeAttribute Provides a api controller action's decoartor to specify access permission. PermissionController PermissionDefaultSetup Extension methods to register permission related services to IServiceCollection PermissionMatrix Provides a predefined permission related to user management. PermissionValueAttribute Represents permission information for a permission record. Interfaces IPermissionMatrix Marker interface indicate class which has permission defined. define permission in Enum which field has attribute PermissionValueAttribute in the implemented class. Those permissions will be loaded by PermissionRepository Enums PermissionMatrix.Premissions"
  },
  "api/DNV.Common.Core.Continuation.ContinuationToken.html": {
    "href": "api/DNV.Common.Core.Continuation.ContinuationToken.html",
    "title": "Struct ContinuationToken",
    "keywords": "Struct ContinuationToken Namespace DNV.Common.Core.Continuation Assembly DNV.Common.Core.dll public struct ContinuationToken Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods Throws.IfNull<T>(T, string?) Properties EndOfResult public readonly bool EndOfResult { get; } Property Value bool Key public readonly string Key { get; } Property Value string None public static ContinuationToken None { get; } Property Value ContinuationToken Methods Create(string, bool) public static ContinuationToken Create(string key, bool eor = false) Parameters key string eor bool Returns ContinuationToken Equals(ContinuationToken) public bool Equals(ContinuationToken other) Parameters other ContinuationToken Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int Operators operator ==(ContinuationToken, ContinuationToken) public static bool operator ==(ContinuationToken left, ContinuationToken right) Parameters left ContinuationToken right ContinuationToken Returns bool operator !=(ContinuationToken, ContinuationToken) public static bool operator !=(ContinuationToken left, ContinuationToken right) Parameters left ContinuationToken right ContinuationToken Returns bool"
  },
  "api/DNV.Common.Core.Continuation.html": {
    "href": "api/DNV.Common.Core.Continuation.html",
    "title": "Namespace DNV.Common.Core.Continuation",
    "keywords": "Namespace DNV.Common.Core.Continuation Structs ContinuationToken"
  },
  "api/DNV.Common.Core.Diagnostics.Throws.html": {
    "href": "api/DNV.Common.Core.Diagnostics.Throws.html",
    "title": "Class Throws",
    "keywords": "Class Throws Namespace DNV.Common.Core.Diagnostics Assembly DNV.Common.Core.dll public static class Throws Inheritance object Throws Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IfMemberNull<TParameter, TMember>(TParameter, TMember?, string, string) Throws an ArgumentException if the specified member is null. public static TMember IfMemberNull<TParameter, TMember>(TParameter argument, TMember? member, string paramName = \"\", string memberName = \"\") where TParameter : notnull Parameters argument TParameter Argument to which member belongs. member TMember Object member to be checked for null. paramName string The name of the parameter being checked. memberName string The name of the member. Returns TMember The original value of member. Type Parameters TParameter Argument type. TMember Member type to be checked for null. Examples Throws.IfMemberNull(myObject, myObject.MyProperty) IfNullOrEmpty(string?, string) Throws an ArgumentNullException if the string is null, or ArgumentException if it is empty. public static string IfNullOrEmpty(string? argument, string paramName = \"\") Parameters argument string String to be checked for null or empty. paramName string The name of the parameter being checked. Returns string The original value of argument. IfNullOrEmpty<T>(ICollection<T>?, string) Throws an ArgumentNullException if the collection is null, or ArgumentException if it is empty. public static ICollection<T> IfNullOrEmpty<T>(ICollection<T>? argument, string paramName = \"\") Parameters argument ICollection<T> The collection to evaluate. paramName string The name of the parameter being checked. Returns ICollection<T> The original value of argument. Type Parameters T The type of objects in the collection. IfNullOrEmpty<T>(IEnumerable<T>?, string) Throws an ArgumentNullException if the enumerable is null, or ArgumentException if it is empty. public static IEnumerable<T> IfNullOrEmpty<T>(IEnumerable<T>? argument, string paramName = \"\") Parameters argument IEnumerable<T> The collection to evaluate. paramName string The name of the parameter being checked. Returns IEnumerable<T> The original value of argument. Type Parameters T The type of objects in the collection. IfNullOrEmpty<T>(IReadOnlyCollection<T>?, string) Throws an ArgumentNullException if the collection is null, or ArgumentException if it is empty. public static IReadOnlyCollection<T> IfNullOrEmpty<T>(IReadOnlyCollection<T>? argument, string paramName = \"\") Parameters argument IReadOnlyCollection<T> The collection to evaluate. paramName string The name of the parameter being checked. Returns IReadOnlyCollection<T> The original value of argument. Type Parameters T The type of objects in the collection. IfNullOrMemberNull<TParameter, TMember>(TParameter?, TMember?, string, string) Throws an ArgumentNullException if the specified argument is null, or ArgumentException if the specified member is null. public static TMember IfNullOrMemberNull<TParameter, TMember>(TParameter? argument, TMember? member, string paramName = \"\", string memberName = \"\") Parameters argument TParameter Argument to be checked for null. member TMember Object member to be checked for null. paramName string The name of the parameter being checked. memberName string The name of the member. Returns TMember The original value of member. Type Parameters TParameter Argument type to be checked for null. TMember Member type to be checked for null. Examples Throws.IfNullOrMemberNull(myObject, myObject?.MyProperty) IfNullOrWhitespace(string?, string) Throws either an ArgumentNullException or an ArgumentException if the specified string is null or whitespace respectively. public static string IfNullOrWhitespace(string? argument, string paramName = \"\") Parameters argument string String to be checked for null or whitespace. paramName string The name of the parameter being checked. Returns string The original value of argument. IfNull<T>(T?, string) Throws an ArgumentNullException if the specified argument is null. public static T IfNull<T>(T? argument, string paramName = \"\") Parameters argument T Object to be checked for null. paramName string The name of the parameter being checked. Returns T The original value of argument. Type Parameters T Argument type to be checked for null. IfOutOfRange<T>(T, string) Throws an ArgumentOutOfRangeException if the enum value is not valid. public static T IfOutOfRange<T>(T argument, string paramName = \"\") where T : struct, Enum Parameters argument T The argument to evaluate. paramName string The name of the parameter being checked. Returns T The original value of argument. Type Parameters T The type of the enumeration."
  },
  "api/DNV.Common.Core.Diagnostics.html": {
    "href": "api/DNV.Common.Core.Diagnostics.html",
    "title": "Namespace DNV.Common.Core.Diagnostics",
    "keywords": "Namespace DNV.Common.Core.Diagnostics Classes Throws"
  },
  "api/DNV.Common.Core.Hash.HashExtension.html": {
    "href": "api/DNV.Common.Core.Hash.HashExtension.html",
    "title": "Class HashExtension",
    "keywords": "Class HashExtension Namespace DNV.Common.Core.Hash Assembly DNV.Common.Core.dll public static class HashExtension Inheritance object HashExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetLongHashCode(Guid) public static long GetLongHashCode(this Guid key) Parameters key Guid Returns long"
  },
  "api/DNV.Common.Core.Hash.html": {
    "href": "api/DNV.Common.Core.Hash.html",
    "title": "Namespace DNV.Common.Core.Hash",
    "keywords": "Namespace DNV.Common.Core.Hash Classes HashExtension"
  },
  "api/DNV.Common.Core.JsonOptions.DictionaryStringObjectJsonConverter.html": {
    "href": "api/DNV.Common.Core.JsonOptions.DictionaryStringObjectJsonConverter.html",
    "title": "Class DictionaryStringObjectJsonConverter",
    "keywords": "Class DictionaryStringObjectJsonConverter Namespace DNV.Common.Core.JsonOptions Assembly DNV.Common.Core.dll public class DictionaryStringObjectJsonConverter : JsonConverter<Dictionary<string, object>> Inheritance object JsonConverter JsonConverter<Dictionary<string, object>> DictionaryStringObjectJsonConverter Inherited Members JsonConverter<Dictionary<string, object>>.CanConvert(Type) JsonConverter<Dictionary<string, object>>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<Dictionary<string, object>>.Write(Utf8JsonWriter, Dictionary<string, object>, JsonSerializerOptions) JsonConverter<Dictionary<string, object>>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<Dictionary<string, object>>.WriteAsPropertyName(Utf8JsonWriter, Dictionary<string, object>, JsonSerializerOptions) JsonConverter<Dictionary<string, object>>.HandleNull JsonConverter.CanConvert(Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type Dictionary<string, object>. public override Dictionary<string, object> Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader The reader. typeToConvert Type The type to convert. options JsonSerializerOptions An object that specifies serialization options to use. Returns Dictionary<string, object> The converted value. Write(Utf8JsonWriter, Dictionary<string, object>, JsonSerializerOptions) Writes a specified value as JSON. public override void Write(Utf8JsonWriter writer, Dictionary<string, object> value, JsonSerializerOptions options) Parameters writer Utf8JsonWriter The writer to write to. value Dictionary<string, object> The value to convert to JSON. options JsonSerializerOptions An object that specifies serialization options to use."
  },
  "api/DNV.Common.Core.JsonOptions.JsonOptionsExtensions.html": {
    "href": "api/DNV.Common.Core.JsonOptions.JsonOptionsExtensions.html",
    "title": "Class JsonOptionsExtensions",
    "keywords": "Class JsonOptionsExtensions Namespace DNV.Common.Core.JsonOptions Assembly DNV.Common.Core.dll public static class JsonOptionsExtensions Inheritance object JsonOptionsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddGeneralDefaultJsonOptions(IServiceCollection) public static IServiceCollection AddGeneralDefaultJsonOptions(this IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection AddWebDefaultJsonOptions(IServiceCollection) public static IServiceCollection AddWebDefaultJsonOptions(this IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection"
  },
  "api/DNV.Common.Core.JsonOptions.html": {
    "href": "api/DNV.Common.Core.JsonOptions.html",
    "title": "Namespace DNV.Common.Core.JsonOptions",
    "keywords": "Namespace DNV.Common.Core.JsonOptions Classes DictionaryStringObjectJsonConverter JsonOptionsExtensions"
  },
  "api/DNV.Common.Core.Pagination.PageParam.html": {
    "href": "api/DNV.Common.Core.Pagination.PageParam.html",
    "title": "Class PageParam",
    "keywords": "Class PageParam Namespace DNV.Common.Core.Pagination Assembly DNV.Common.Core.dll public class PageParam Inheritance object PageParam Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors PageParam(int, int) public PageParam(int pageIndex, int pageSize) Parameters pageIndex int pageSize int Properties PageIndex public int PageIndex { get; } Property Value int PageSize public int PageSize { get; } Property Value int"
  },
  "api/DNV.Common.Core.Pagination.PaginatedResult-1.html": {
    "href": "api/DNV.Common.Core.Pagination.PaginatedResult-1.html",
    "title": "Class PaginatedResult<T>",
    "keywords": "Class PaginatedResult<T> Namespace DNV.Common.Core.Pagination Assembly DNV.Common.Core.dll public class PaginatedResult<T> : IEnumerable<T>, IEnumerable Type Parameters T Inheritance object PaginatedResult<T> Implements IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) PaginatedResultExtensions.Paginate<T>(IEnumerable<T>, PageParam, int?) PaginatedResultExtensions.Paginate<T>(IEnumerable<T>, int, int, int?) Constructors PaginatedResult(IEnumerable<T>, int, int, int?) public PaginatedResult(IEnumerable<T> result, int pageIndex, int pageSize, int? totalCount) Parameters result IEnumerable<T> pageIndex int pageSize int totalCount int? Properties PageIndex public int PageIndex { get; } Property Value int PageSize public int PageSize { get; } Property Value int TotalCount public int? TotalCount { get; } Property Value int? TotalPages public int? TotalPages { get; } Property Value int? Methods GetEnumerator() public IEnumerator<T> GetEnumerator() Returns IEnumerator<T>"
  },
  "api/DNV.Common.Core.Pagination.PaginatedResultExtensions.html": {
    "href": "api/DNV.Common.Core.Pagination.PaginatedResultExtensions.html",
    "title": "Class PaginatedResultExtensions",
    "keywords": "Class PaginatedResultExtensions Namespace DNV.Common.Core.Pagination Assembly DNV.Common.Core.dll public static class PaginatedResultExtensions Inheritance object PaginatedResultExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Paginate<T>(IEnumerable<T>, PageParam, int?) public static PaginatedResult<T> Paginate<T>(this IEnumerable<T> result, PageParam pageParam, int? totalCount) Parameters result IEnumerable<T> pageParam PageParam totalCount int? Returns PaginatedResult<T> Type Parameters T Paginate<T>(IEnumerable<T>, int, int, int?) public static PaginatedResult<T> Paginate<T>(this IEnumerable<T> result, int pageIndex, int pageSize, int? totalCount) Parameters result IEnumerable<T> pageIndex int pageSize int totalCount int? Returns PaginatedResult<T> Type Parameters T"
  },
  "api/DNV.Common.Core.Pagination.html": {
    "href": "api/DNV.Common.Core.Pagination.html",
    "title": "Namespace DNV.Common.Core.Pagination",
    "keywords": "Namespace DNV.Common.Core.Pagination Classes PageParam PaginatedResultExtensions PaginatedResult<T>"
  },
  "api/DNV.Common.Core.Patterns.AsyncLazy-1.html": {
    "href": "api/DNV.Common.Core.Patterns.AsyncLazy-1.html",
    "title": "Class AsyncLazy<T>",
    "keywords": "Class AsyncLazy<T> Namespace DNV.Common.Core.Patterns Assembly DNV.Common.Core.dll public class AsyncLazy<T> : Lazy<Task<T>> Type Parameters T Inheritance object Lazy<Task<T>> AsyncLazy<T> Inherited Members Lazy<Task<T>>.ToString() Lazy<Task<T>>.IsValueCreated Lazy<Task<T>>.Value object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Throws.IfNull<T>(T, string?) Constructors AsyncLazy(Func<Task<T>>) public AsyncLazy(Func<Task<T>> taskFactory) Parameters taskFactory Func<Task<T>> Methods GetAwaiter() public TaskAwaiter<T> GetAwaiter() Returns TaskAwaiter<T>"
  },
  "api/DNV.Common.Core.Patterns.IVisitor-1.html": {
    "href": "api/DNV.Common.Core.Patterns.IVisitor-1.html",
    "title": "Interface IVisitor<TElement>",
    "keywords": "Interface IVisitor<TElement> Namespace DNV.Common.Core.Patterns Assembly DNV.Common.Core.dll public interface IVisitor<in TElement> Type Parameters TElement Extension Methods Throws.IfNull<T>(T, string?) Methods Visit(TElement) void Visit(TElement element) Parameters element TElement VisitAsync(TElement) Task VisitAsync(TElement element) Parameters element TElement Returns Task"
  },
  "api/DNV.Common.Core.Patterns.IVisitor-2.html": {
    "href": "api/DNV.Common.Core.Patterns.IVisitor-2.html",
    "title": "Interface IVisitor<TElement, TResult>",
    "keywords": "Interface IVisitor<TElement, TResult> Namespace DNV.Common.Core.Patterns Assembly DNV.Common.Core.dll public interface IVisitor<in TElement, TResult> Type Parameters TElement TResult Extension Methods Throws.IfNull<T>(T, string?) Methods Visit(TElement) TResult Visit(TElement element) Parameters element TElement Returns TResult VisitAsync(TElement) Task<TResult> VisitAsync(TElement element) Parameters element TElement Returns Task<TResult>"
  },
  "api/DNV.Common.Core.Patterns.Singleton-1.html": {
    "href": "api/DNV.Common.Core.Patterns.Singleton-1.html",
    "title": "Class Singleton<T>",
    "keywords": "Class Singleton<T> Namespace DNV.Common.Core.Patterns Assembly DNV.Common.Core.dll public static class Singleton<T> where T : class Type Parameters T Inheritance object Singleton<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Instance public static T Instance { get; } Property Value T Methods SetFactory(Func<T>) public static Func<T> SetFactory(Func<T> factory) Parameters factory Func<T> Returns Func<T>"
  },
  "api/DNV.Common.Core.Patterns.VisitorBase-2.html": {
    "href": "api/DNV.Common.Core.Patterns.VisitorBase-2.html",
    "title": "Class VisitorBase<TDrive, TElement>",
    "keywords": "Class VisitorBase<TDrive, TElement> Namespace DNV.Common.Core.Patterns Assembly DNV.Common.Core.dll public abstract class VisitorBase<TDrive, TElement> : IVisitor<TElement> where TDrive : VisitorBase<TDrive, TElement> Type Parameters TDrive TElement Inheritance object VisitorBase<TDrive, TElement> Implements IVisitor<TElement> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Methods DoVisit(TElement) public virtual void DoVisit(TElement element) Parameters element TElement DoVisitAsync(TElement) public virtual Task DoVisitAsync(TElement element) Parameters element TElement Returns Task Visit(TElement) public void Visit(TElement element) Parameters element TElement VisitAsync(TElement) public Task VisitAsync(TElement element) Parameters element TElement Returns Task"
  },
  "api/DNV.Common.Core.Patterns.VisitorBase-3.html": {
    "href": "api/DNV.Common.Core.Patterns.VisitorBase-3.html",
    "title": "Class VisitorBase<TDrive, TElement, TResult>",
    "keywords": "Class VisitorBase<TDrive, TElement, TResult> Namespace DNV.Common.Core.Patterns Assembly DNV.Common.Core.dll public abstract class VisitorBase<TDrive, TElement, TResult> : IVisitor<TElement, TResult> where TDrive : VisitorBase<TDrive, TElement, TResult> Type Parameters TDrive TElement TResult Inheritance object VisitorBase<TDrive, TElement, TResult> Implements IVisitor<TElement, TResult> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Methods DoVisit(TElement) public virtual TResult DoVisit(TElement element) Parameters element TElement Returns TResult DoVisitAsync(TElement) public virtual Task<TResult> DoVisitAsync(TElement element) Parameters element TElement Returns Task<TResult> Visit(TElement) public TResult Visit(TElement element) Parameters element TElement Returns TResult VisitAsync(TElement) public Task<TResult> VisitAsync(TElement element) Parameters element TElement Returns Task<TResult>"
  },
  "api/DNV.Common.Core.Patterns.html": {
    "href": "api/DNV.Common.Core.Patterns.html",
    "title": "Namespace DNV.Common.Core.Patterns",
    "keywords": "Namespace DNV.Common.Core.Patterns Classes AsyncLazy<T> Singleton<T> VisitorBase<TDrive, TElement> VisitorBase<TDrive, TElement, TResult> Interfaces IVisitor<TElement> IVisitor<TElement, TResult>"
  },
  "api/DNV.Common.Core.Sorting.SortDirection.html": {
    "href": "api/DNV.Common.Core.Sorting.SortDirection.html",
    "title": "Enum SortDirection",
    "keywords": "Enum SortDirection Namespace DNV.Common.Core.Sorting Assembly DNV.Common.Core.dll public enum SortDirection Extension Methods Throws.IfNull<T>(T, string?) Fields Ascending = 0 Descending = 1"
  },
  "api/DNV.Common.Core.Sorting.SortParam.html": {
    "href": "api/DNV.Common.Core.Sorting.SortParam.html",
    "title": "Class SortParam",
    "keywords": "Class SortParam Namespace DNV.Common.Core.Sorting Assembly DNV.Common.Core.dll public class SortParam Inheritance object SortParam Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors SortParam(string, SortDirection) public SortParam(string sortColumn, SortDirection sortDirection) Parameters sortColumn string sortDirection SortDirection Properties SortColumn public string SortColumn { get; } Property Value string SortDirection public SortDirection SortDirection { get; } Property Value SortDirection"
  },
  "api/DNV.Common.Core.Sorting.html": {
    "href": "api/DNV.Common.Core.Sorting.html",
    "title": "Namespace DNV.Common.Core.Sorting",
    "keywords": "Namespace DNV.Common.Core.Sorting Classes SortParam Enums SortDirection"
  },
  "api/DNV.Context.Abstractions.AsyncLocalContext-1.ContextHolder.html": {
    "href": "api/DNV.Context.Abstractions.AsyncLocalContext-1.ContextHolder.html",
    "title": "Class AsyncLocalContext<T>.ContextHolder",
    "keywords": "Class AsyncLocalContext<T>.ContextHolder Namespace DNV.Context.Abstractions Assembly DNV.Context.Abstractions.dll public record AsyncLocalContext<T>.ContextHolder : IEquatable<AsyncLocalContext<T>.ContextHolder> Inheritance object AsyncLocalContext<T>.ContextHolder Implements IEquatable<AsyncLocalContext<T>.ContextHolder> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties CorrelationId public string? CorrelationId { get; set; } Property Value string Items public Dictionary<string, object>? Items { get; set; } Property Value Dictionary<string, object> Payload public T? Payload { get; set; } Property Value T"
  },
  "api/DNV.Context.Abstractions.AsyncLocalContext-1.html": {
    "href": "api/DNV.Context.Abstractions.AsyncLocalContext-1.html",
    "title": "Class AsyncLocalContext<T>",
    "keywords": "Class AsyncLocalContext<T> Namespace DNV.Context.Abstractions Assembly DNV.Context.Abstractions.dll public class AsyncLocalContext<T> : IAmbientContext<T> where T : class Type Parameters T Inheritance object AsyncLocalContext<T> Implements IAmbientContext<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors AsyncLocalContext() public AsyncLocalContext() Properties CorrelationId public string? CorrelationId { get; } Property Value string HasValue public bool HasValue { get; } Property Value bool Items public IDictionary<string, object>? Items { get; } Property Value IDictionary<string, object> Payload public T? Payload { get; } Property Value T Methods CreateContext(T?, string?, IDictionary<string, object>?) public void CreateContext(T? payload, string? correlationId, IDictionary<string, object>? items = null) Parameters payload T correlationId string items IDictionary<string, object>"
  },
  "api/DNV.Context.Abstractions.IAmbientContext-1.html": {
    "href": "api/DNV.Context.Abstractions.IAmbientContext-1.html",
    "title": "Interface IAmbientContext<T>",
    "keywords": "Interface IAmbientContext<T> Namespace DNV.Context.Abstractions Assembly DNV.Context.Abstractions.dll public interface IAmbientContext<out T> where T : class Type Parameters T Extension Methods Throws.IfNull<T>(T, string?) Properties CorrelationId string? CorrelationId { get; } Property Value string Items IDictionary<string, object>? Items { get; } Property Value IDictionary<string, object> Payload T? Payload { get; } Property Value T"
  },
  "api/DNV.Context.Abstractions.IContextAccessor-1.html": {
    "href": "api/DNV.Context.Abstractions.IContextAccessor-1.html",
    "title": "Interface IContextAccessor<T>",
    "keywords": "Interface IContextAccessor<T> Namespace DNV.Context.Abstractions Assembly DNV.Context.Abstractions.dll public interface IContextAccessor<out T> where T : class Type Parameters T Extension Methods Throws.IfNull<T>(T, string?) Properties Context IAmbientContext<out T>? Context { get; } Property Value IAmbientContext<T> Initialized bool Initialized { get; } Property Value bool"
  },
  "api/DNV.Context.Abstractions.IContextCreator-1.html": {
    "href": "api/DNV.Context.Abstractions.IContextCreator-1.html",
    "title": "Interface IContextCreator<T>",
    "keywords": "Interface IContextCreator<T> Namespace DNV.Context.Abstractions Assembly DNV.Context.Abstractions.dll public interface IContextCreator<T> Type Parameters T Extension Methods Throws.IfNull<T>(T, string?) Methods InitializeContext(T?, string?, IDictionary<string, object>?) void InitializeContext(T? payload, string? correlationId, IDictionary<string, object>? items = null) Parameters payload T correlationId string items IDictionary<string, object>"
  },
  "api/DNV.Context.Abstractions.html": {
    "href": "api/DNV.Context.Abstractions.html",
    "title": "Namespace DNV.Context.Abstractions",
    "keywords": "Namespace DNV.Context.Abstractions Classes AsyncLocalContext<T> AsyncLocalContext<T>.ContextHolder Interfaces IAmbientContext<T> IContextAccessor<T> IContextCreator<T>"
  },
  "api/DNV.Context.AspNet.AspNetContextAccessor-1.html": {
    "href": "api/DNV.Context.AspNet.AspNetContextAccessor-1.html",
    "title": "Class AspNetContextAccessor<T>",
    "keywords": "Class AspNetContextAccessor<T> Namespace DNV.Context.AspNet Assembly DNV.Context.AspNet.dll public class AspNetContextAccessor<T> : IContextAccessor<T>, IContextCreator<T> where T : class Type Parameters T Inheritance object AspNetContextAccessor<T> Implements IContextAccessor<T> IContextCreator<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors AspNetContextAccessor(Func<HttpContext, (bool, T?)>) public AspNetContextAccessor(Func<HttpContext, (bool, T?)> payloadCreator) Parameters payloadCreator Func<HttpContext, (bool, T)> Fields HeaderKey public static readonly string HeaderKey Field Value string Properties Context public IAmbientContext<T>? Context { get; } Property Value IAmbientContext<T> Initialized public bool Initialized { get; } Property Value bool Methods Initialize(HttpContext, JsonSerializerOptions?) public void Initialize(HttpContext httpContext, JsonSerializerOptions? jsonSerializerOptions = null) Parameters httpContext HttpContext jsonSerializerOptions JsonSerializerOptions InitializeContext(T?, string?, IDictionary<string, object>?) public void InitializeContext(T? payload, string? correlationId, IDictionary<string, object>? items = null) Parameters payload T correlationId string items IDictionary<string, object>"
  },
  "api/DNV.Context.AspNet.AspNetContextExtensions.html": {
    "href": "api/DNV.Context.AspNet.AspNetContextExtensions.html",
    "title": "Class AspNetContextExtensions",
    "keywords": "Class AspNetContextExtensions Namespace DNV.Context.AspNet Assembly DNV.Context.AspNet.dll public static class AspNetContextExtensions Inheritance object AspNetContextExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddAspNetContext<T>(IServiceCollection, Func<HttpContext, (bool succeeded, T? context)>, Action<JsonSerializerOptions>?) public static IServiceCollection AddAspNetContext<T>(this IServiceCollection services, Func<HttpContext, (bool succeeded, T? context)> ctxCreator, Action<JsonSerializerOptions>? jsonOptionsSetup = null) where T : class Parameters services IServiceCollection ctxCreator Func<HttpContext, (bool, T)> jsonOptionsSetup Action<JsonSerializerOptions> Returns IServiceCollection Type Parameters T UseAspNetContext<T>(IApplicationBuilder) public static IApplicationBuilder UseAspNetContext<T>(this IApplicationBuilder builder) where T : class Parameters builder IApplicationBuilder Returns IApplicationBuilder Type Parameters T"
  },
  "api/DNV.Context.AspNet.AspNetContextMiddleware-1.html": {
    "href": "api/DNV.Context.AspNet.AspNetContextMiddleware-1.html",
    "title": "Class AspNetContextMiddleware<T>",
    "keywords": "Class AspNetContextMiddleware<T> Namespace DNV.Context.AspNet Assembly DNV.Context.AspNet.dll public class AspNetContextMiddleware<T> where T : class Type Parameters T Inheritance object AspNetContextMiddleware<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors AspNetContextMiddleware(RequestDelegate, IOptions<JsonSerializerOptions>?) public AspNetContextMiddleware(RequestDelegate next, IOptions<JsonSerializerOptions>? jsonSerializerOptions) Parameters next RequestDelegate jsonSerializerOptions IOptions<JsonSerializerOptions> Methods Invoke(HttpContext) public Task Invoke(HttpContext context) Parameters context HttpContext Returns Task"
  },
  "api/DNV.Context.AspNet.html": {
    "href": "api/DNV.Context.AspNet.html",
    "title": "Namespace DNV.Context.AspNet",
    "keywords": "Namespace DNV.Context.AspNet Classes AspNetContextAccessor<T> AspNetContextExtensions AspNetContextMiddleware<T>"
  },
  "api/DNV.Context.HttpClient.HttpClientExtensions.html": {
    "href": "api/DNV.Context.HttpClient.HttpClientExtensions.html",
    "title": "Class HttpClientExtensions",
    "keywords": "Class HttpClientExtensions Namespace DNV.Context.HttpClient Assembly DNV.Context.HttpClient.dll public static class HttpClientExtensions Inheritance object HttpClientExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddHttpClientContextHandler<T>(IHttpClientBuilder) public static IHttpClientBuilder AddHttpClientContextHandler<T>(this IHttpClientBuilder builder) where T : class Parameters builder IHttpClientBuilder Returns IHttpClientBuilder Type Parameters T AddHttpClientContext<T>(IServiceCollection, Action<IServiceProvider, HttpClient>?, Action<JsonSerializerOptions>?) public static IServiceCollection AddHttpClientContext<T>(this IServiceCollection services, Action<IServiceProvider, HttpClient>? configAction = null, Action<JsonSerializerOptions>? jsonOptionSetup = null) where T : class Parameters services IServiceCollection configAction Action<IServiceProvider, HttpClient> jsonOptionSetup Action<JsonSerializerOptions> Returns IServiceCollection Type Parameters T CreateContextClient<T>(IHttpClientFactory) public static HttpClient CreateContextClient<T>(this IHttpClientFactory factory) where T : class Parameters factory IHttpClientFactory Returns HttpClient Type Parameters T"
  },
  "api/DNV.Context.HttpClient.html": {
    "href": "api/DNV.Context.HttpClient.html",
    "title": "Namespace DNV.Context.HttpClient",
    "keywords": "Namespace DNV.Context.HttpClient Classes HttpClientExtensions"
  },
  "api/DNV.Context.ServiceBus.IServiceBusMessageBuilder-1.html": {
    "href": "api/DNV.Context.ServiceBus.IServiceBusMessageBuilder-1.html",
    "title": "Interface IServiceBusMessageBuilder<T>",
    "keywords": "Interface IServiceBusMessageBuilder<T> Namespace DNV.Context.ServiceBus Assembly DNV.Context.ServiceBus.dll public interface IServiceBusMessageBuilder<T> where T : class Type Parameters T Extension Methods Throws.IfNull<T>(T, string?) Methods CreateServiceBusMessage() ServiceBusMessage CreateServiceBusMessage() Returns ServiceBusMessage CreateServiceBusMessage(ServiceBusReceivedMessage) ServiceBusMessage CreateServiceBusMessage(ServiceBusReceivedMessage receivedMessage) Parameters receivedMessage ServiceBusReceivedMessage Returns ServiceBusMessage CreateServiceBusMessage(BinaryData) ServiceBusMessage CreateServiceBusMessage(BinaryData body) Parameters body BinaryData Returns ServiceBusMessage CreateServiceBusMessage(ReadOnlyMemory<byte>) ServiceBusMessage CreateServiceBusMessage(ReadOnlyMemory<byte> body) Parameters body ReadOnlyMemory<byte> Returns ServiceBusMessage CreateServiceBusMessage(string) ServiceBusMessage CreateServiceBusMessage(string body) Parameters body string Returns ServiceBusMessage"
  },
  "api/DNV.Context.ServiceBus.LocalContextAccessor-1.html": {
    "href": "api/DNV.Context.ServiceBus.LocalContextAccessor-1.html",
    "title": "Class LocalContextAccessor<T>",
    "keywords": "Class LocalContextAccessor<T> Namespace DNV.Context.ServiceBus Assembly DNV.Context.ServiceBus.dll public class LocalContextAccessor<T> : IContextAccessor<T>, IContextCreator<T> where T : class Type Parameters T Inheritance object LocalContextAccessor<T> Implements IContextAccessor<T> IContextCreator<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors LocalContextAccessor(Func<ServiceBusReceivedMessage, (bool, T?)>) public LocalContextAccessor(Func<ServiceBusReceivedMessage, (bool, T?)> payloadCreator) Parameters payloadCreator Func<ServiceBusReceivedMessage, (bool, T)> Fields HeaderKey public static readonly string HeaderKey Field Value string Properties Context public IAmbientContext<T>? Context { get; } Property Value IAmbientContext<T> Initialized public bool Initialized { get; } Property Value bool Methods Initialize(ServiceBusReceivedMessage, JsonSerializerOptions?) public void Initialize(ServiceBusReceivedMessage serviceBusMessage, JsonSerializerOptions? jsonSerializerOptions = null) Parameters serviceBusMessage ServiceBusReceivedMessage jsonSerializerOptions JsonSerializerOptions InitializeContext(T?, string?, IDictionary<string, object>?) public void InitializeContext(T? payload, string? correlationId, IDictionary<string, object>? items = null) Parameters payload T correlationId string items IDictionary<string, object>"
  },
  "api/DNV.Context.ServiceBus.ServiceBusMessageBuilder-1.html": {
    "href": "api/DNV.Context.ServiceBus.ServiceBusMessageBuilder-1.html",
    "title": "Class ServiceBusMessageBuilder<T>",
    "keywords": "Class ServiceBusMessageBuilder<T> Namespace DNV.Context.ServiceBus Assembly DNV.Context.ServiceBus.dll public class ServiceBusMessageBuilder<T> : IServiceBusMessageBuilder<T> where T : class Type Parameters T Inheritance object ServiceBusMessageBuilder<T> Implements IServiceBusMessageBuilder<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors ServiceBusMessageBuilder(IContextAccessor<T>, IOptions<JsonSerializerOptions>?) public ServiceBusMessageBuilder(IContextAccessor<T> contextAccessor, IOptions<JsonSerializerOptions>? jsonSerializerOptions) Parameters contextAccessor IContextAccessor<T> jsonSerializerOptions IOptions<JsonSerializerOptions> ServiceBusMessageBuilder(IContextAccessor<T>, JsonSerializerOptions?) public ServiceBusMessageBuilder(IContextAccessor<T> contextAccessor, JsonSerializerOptions? jsonSerializerOptions) Parameters contextAccessor IContextAccessor<T> jsonSerializerOptions JsonSerializerOptions Methods CreateServiceBusMessage() public ServiceBusMessage CreateServiceBusMessage() Returns ServiceBusMessage CreateServiceBusMessage(ServiceBusReceivedMessage) public ServiceBusMessage CreateServiceBusMessage(ServiceBusReceivedMessage receivedMessage) Parameters receivedMessage ServiceBusReceivedMessage Returns ServiceBusMessage CreateServiceBusMessage(BinaryData) public ServiceBusMessage CreateServiceBusMessage(BinaryData body) Parameters body BinaryData Returns ServiceBusMessage CreateServiceBusMessage(ReadOnlyMemory<byte>) public ServiceBusMessage CreateServiceBusMessage(ReadOnlyMemory<byte> body) Parameters body ReadOnlyMemory<byte> Returns ServiceBusMessage CreateServiceBusMessage(string) public ServiceBusMessage CreateServiceBusMessage(string body) Parameters body string Returns ServiceBusMessage"
  },
  "api/DNV.Context.ServiceBus.ServiceBusProcessorExtensions.html": {
    "href": "api/DNV.Context.ServiceBus.ServiceBusProcessorExtensions.html",
    "title": "Class ServiceBusProcessorExtensions",
    "keywords": "Class ServiceBusProcessorExtensions Namespace DNV.Context.ServiceBus Assembly DNV.Context.ServiceBus.dll public static class ServiceBusProcessorExtensions Inheritance object ServiceBusProcessorExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods InitializeContext<T>(Func<ProcessMessageEventArgs, Task>, IContextCreator<T>, Func<ServiceBusReceivedMessage, (bool succeeded, T? context)>, JsonSerializerOptions?) public static Func<ProcessMessageEventArgs, Task> InitializeContext<T>(this Func<ProcessMessageEventArgs, Task> messageHandler, IContextCreator<T> contextCreator, Func<ServiceBusReceivedMessage, (bool succeeded, T? context)> ctxCreator, JsonSerializerOptions? jsonSerializerOptions = null) where T : class Parameters messageHandler Func<ProcessMessageEventArgs, Task> contextCreator IContextCreator<T> ctxCreator Func<ServiceBusReceivedMessage, (bool, T)> jsonSerializerOptions JsonSerializerOptions Returns Func<ProcessMessageEventArgs, Task> Type Parameters T InitializeContext<T>(Func<ProcessSessionMessageEventArgs, Task>, IContextCreator<T>, Func<ServiceBusReceivedMessage, (bool succeeded, T? context)>, JsonSerializerOptions?) public static Func<ProcessSessionMessageEventArgs, Task> InitializeContext<T>(this Func<ProcessSessionMessageEventArgs, Task> messageHandler, IContextCreator<T> contextCreator, Func<ServiceBusReceivedMessage, (bool succeeded, T? context)> ctxCreator, JsonSerializerOptions? jsonSerializerOptions = null) where T : class Parameters messageHandler Func<ProcessSessionMessageEventArgs, Task> contextCreator IContextCreator<T> ctxCreator Func<ServiceBusReceivedMessage, (bool, T)> jsonSerializerOptions JsonSerializerOptions Returns Func<ProcessSessionMessageEventArgs, Task> Type Parameters T"
  },
  "api/DNV.Context.ServiceBus.ServiceBusSenderExtensions.html": {
    "href": "api/DNV.Context.ServiceBus.ServiceBusSenderExtensions.html",
    "title": "Class ServiceBusSenderExtensions",
    "keywords": "Class ServiceBusSenderExtensions Namespace DNV.Context.ServiceBus Assembly DNV.Context.ServiceBus.dll public static class ServiceBusSenderExtensions Inheritance object ServiceBusSenderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ScheduleMessageAsync<T>(ServiceBusSender, ServiceBusMessage, DateTimeOffset, IContextAccessor<T>, JsonSerializerOptions?, CancellationToken) public static Task<long> ScheduleMessageAsync<T>(this ServiceBusSender serviceBusSender, ServiceBusMessage message, DateTimeOffset scheduledEnqueueTime, IContextAccessor<T> contextAccessor, JsonSerializerOptions? jsonSerializerOptions = null, CancellationToken cancellationToken = default) where T : class Parameters serviceBusSender ServiceBusSender message ServiceBusMessage scheduledEnqueueTime DateTimeOffset contextAccessor IContextAccessor<T> jsonSerializerOptions JsonSerializerOptions cancellationToken CancellationToken Returns Task<long> Type Parameters T ScheduleMessagesAsync<T>(ServiceBusSender, IEnumerable<ServiceBusMessage>, DateTimeOffset, IContextAccessor<T>, JsonSerializerOptions?, CancellationToken) public static Task<IReadOnlyList<long>> ScheduleMessagesAsync<T>(this ServiceBusSender serviceBusSender, IEnumerable<ServiceBusMessage> messages, DateTimeOffset scheduledEnqueueTime, IContextAccessor<T> contextAccessor, JsonSerializerOptions? jsonSerializerOptions = null, CancellationToken cancellationToken = default) where T : class Parameters serviceBusSender ServiceBusSender messages IEnumerable<ServiceBusMessage> scheduledEnqueueTime DateTimeOffset contextAccessor IContextAccessor<T> jsonSerializerOptions JsonSerializerOptions cancellationToken CancellationToken Returns Task<IReadOnlyList<long>> Type Parameters T SendMessageAsync<T>(ServiceBusSender, ServiceBusMessage, IContextAccessor<T>, JsonSerializerOptions?, CancellationToken) public static Task SendMessageAsync<T>(this ServiceBusSender serviceBusSender, ServiceBusMessage message, IContextAccessor<T> contextAccessor, JsonSerializerOptions? jsonSerializerOptions = null, CancellationToken cancellationToken = default) where T : class Parameters serviceBusSender ServiceBusSender message ServiceBusMessage contextAccessor IContextAccessor<T> jsonSerializerOptions JsonSerializerOptions cancellationToken CancellationToken Returns Task Type Parameters T SendMessagesAsync<T>(ServiceBusSender, IEnumerable<ServiceBusMessage>, IContextAccessor<T>, JsonSerializerOptions?, CancellationToken) public static Task SendMessagesAsync<T>(this ServiceBusSender serviceBusSender, IEnumerable<ServiceBusMessage> messages, IContextAccessor<T> contextAccessor, JsonSerializerOptions? jsonSerializerOptions = null, CancellationToken cancellationToken = default) where T : class Parameters serviceBusSender ServiceBusSender messages IEnumerable<ServiceBusMessage> contextAccessor IContextAccessor<T> jsonSerializerOptions JsonSerializerOptions cancellationToken CancellationToken Returns Task Type Parameters T"
  },
  "api/DNV.Context.ServiceBus.html": {
    "href": "api/DNV.Context.ServiceBus.html",
    "title": "Namespace DNV.Context.ServiceBus",
    "keywords": "Namespace DNV.Context.ServiceBus Classes LocalContextAccessor<T> ServiceBusMessageBuilder<T> ServiceBusProcessorExtensions ServiceBusSenderExtensions Interfaces IServiceBusMessageBuilder<T>"
  },
  "api/DNV.DependencyInjection.Abstractions.DNVServiceProviderOptions.html": {
    "href": "api/DNV.DependencyInjection.Abstractions.DNVServiceProviderOptions.html",
    "title": "Class DNVServiceProviderOptions",
    "keywords": "Class DNVServiceProviderOptions Namespace DNV.DependencyInjection.Abstractions Assembly DNV.DependencyInjection.Abstractions.dll Represents the options used when creating the DataWorkbench service provider. public class DNVServiceProviderOptions Inheritance object DNVServiceProviderOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties AdditionalAssemblies Gets the list of additional assemblies to include in the search. public IList<Assembly> AdditionalAssemblies { get; } Property Value IList<Assembly> DefaultLifetime Gets or sets the default fallback ServiceLifetime for services that will be automatically registered. public ServiceLifetime DefaultLifetime { get; set; } Property Value ServiceLifetime DisableRegistrationByConvention Gets or sets the value indicating whether to disable automatic registration of services by convention. If set to true only services with WithLifetimeAttribute, RegisterAsSelfAttribute and services added through ICanAddServices<TContainerBuilder> and ICanAddServicesForTypesWith<TAttribute, TContainerBuilder> will be registered in the service provider. public bool DisableRegistrationByConvention { get; set; } Property Value bool EntryPointAssemblyName Gets or sets the entry point assembly name. The type scanner will search for services in the Assembly starting with the given name. public string EntryPointAssemblyName { get; set; } Property Value string IgnoredAssemblies Gets the assembly names to ignore. public IList<Assembly> IgnoredAssemblies { get; } Property Value IList<Assembly> IgnoredAssemblyNames Gets the assembly names to ignore. public IList<string> IgnoredAssemblyNames { get; } Property Value IList<string> IgnoredBaseTypes Gets the types to ignore. Every class implementing one of these types will be ignored. public IList<Type> IgnoredBaseTypes { get; } Property Value IList<Type>"
  },
  "api/DNV.DependencyInjection.Abstractions.DisableAutoRegistrationAttribute.html": {
    "href": "api/DNV.DependencyInjection.Abstractions.DisableAutoRegistrationAttribute.html",
    "title": "Class DisableAutoRegistrationAttribute",
    "keywords": "Class DisableAutoRegistrationAttribute Namespace DNV.DependencyInjection.Abstractions Assembly DNV.DependencyInjection.Abstractions.dll Indicates that the class should not be registered automatically in a DI container. [AttributeUsage(AttributeTargets.Class, Inherited = false)] public class DisableAutoRegistrationAttribute : Attribute Inheritance object Attribute DisableAutoRegistrationAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?)"
  },
  "api/DNV.DependencyInjection.Abstractions.ICanAddServices-1.html": {
    "href": "api/DNV.DependencyInjection.Abstractions.ICanAddServices-1.html",
    "title": "Interface ICanAddServices<TContainerBuilder>",
    "keywords": "Interface ICanAddServices<TContainerBuilder> Namespace DNV.DependencyInjection.Abstractions Assembly DNV.DependencyInjection.Abstractions.dll Defines a system that can add services to a TContainerBuilder. public interface ICanAddServices<in TContainerBuilder> where TContainerBuilder : notnull Type Parameters TContainerBuilder The type of the container builder. Extension Methods Throws.IfNull<T>(T, string?) Methods AddTo(TContainerBuilder) Adds services to the TContainerBuilder. void AddTo(TContainerBuilder builder) Parameters builder TContainerBuilder The container builder to add services into."
  },
  "api/DNV.DependencyInjection.Abstractions.ICanAddServices.html": {
    "href": "api/DNV.DependencyInjection.Abstractions.ICanAddServices.html",
    "title": "Interface ICanAddServices",
    "keywords": "Interface ICanAddServices Namespace DNV.DependencyInjection.Abstractions Assembly DNV.DependencyInjection.Abstractions.dll Defines a system that can add services to a IServiceCollection. public interface ICanAddServices : ICanAddServices<IServiceCollection> Inherited Members ICanAddServices<IServiceCollection>.AddTo(IServiceCollection) Extension Methods Throws.IfNull<T>(T, string?)"
  },
  "api/DNV.DependencyInjection.Abstractions.ICanAddServicesForTypesWith-1.html": {
    "href": "api/DNV.DependencyInjection.Abstractions.ICanAddServicesForTypesWith-1.html",
    "title": "Interface ICanAddServicesForTypesWith<TAttribute>",
    "keywords": "Interface ICanAddServicesForTypesWith<TAttribute> Namespace DNV.DependencyInjection.Abstractions Assembly DNV.DependencyInjection.Abstractions.dll Defines a system that can add services to a IServiceCollection for classes with a specific Attribute. public interface ICanAddServicesForTypesWith<in TAttribute> : ICanAddServicesForTypesWith<TAttribute, IServiceCollection> where TAttribute : Attribute Type Parameters TAttribute The type of the Attribute. Inherited Members ICanAddServicesForTypesWith<TAttribute, IServiceCollection>.AddServiceFor(Type, TAttribute, IServiceCollection) Extension Methods Throws.IfNull<T>(T, string?)"
  },
  "api/DNV.DependencyInjection.Abstractions.ICanAddServicesForTypesWith-2.html": {
    "href": "api/DNV.DependencyInjection.Abstractions.ICanAddServicesForTypesWith-2.html",
    "title": "Interface ICanAddServicesForTypesWith<TAttribute, TContainerBuilder>",
    "keywords": "Interface ICanAddServicesForTypesWith<TAttribute, TContainerBuilder> Namespace DNV.DependencyInjection.Abstractions Assembly DNV.DependencyInjection.Abstractions.dll Defines a system that can add services to a TContainerBuilder for classes with a specific Attribute. public interface ICanAddServicesForTypesWith<in TAttribute, in TContainerBuilder> where TAttribute : Attribute where TContainerBuilder : notnull Type Parameters TAttribute The type of the Attribute. TContainerBuilder The type of the container builder. Extension Methods Throws.IfNull<T>(T, string?) Methods AddServiceFor(Type, TAttribute, TContainerBuilder) Adds services for the Type with the TAttribute attribute to the IServiceCollection. void AddServiceFor(Type type, TAttribute attribute, TContainerBuilder services) Parameters type Type The type with the attribute. attribute TAttribute The attribute instance. services TContainerBuilder The builder to add services into."
  },
  "api/DNV.DependencyInjection.Abstractions.Lifetime.TypeExtensions.html": {
    "href": "api/DNV.DependencyInjection.Abstractions.Lifetime.TypeExtensions.html",
    "title": "Class TypeExtensions",
    "keywords": "Class TypeExtensions Namespace DNV.DependencyInjection.Abstractions.Lifetime Assembly DNV.DependencyInjection.Abstractions.dll Extension methods for Type. public static class TypeExtensions Inheritance object TypeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetLifetime(Type, ServiceLifetime) Gets the ServiceLifetime for the the Type. public static ServiceLifetime GetLifetime(this Type type, ServiceLifetime fallbackLifetime = ServiceLifetime.Transient) Parameters type Type The type to get the service lifetime for. fallbackLifetime ServiceLifetime The ServiceLifetime to fallback to if type did not have WithLifetimeAttribute. Returns ServiceLifetime The service lifetime for the type. TryGetLifetime(Type, ServiceLifetime, out ServiceLifetime) Tries to get the ServiceLifetime for the the Type from its defined attributes. public static bool TryGetLifetime(this Type type, ServiceLifetime fallbackLifetime, out ServiceLifetime lifetime) Parameters type Type The type to get the service lifetime for. fallbackLifetime ServiceLifetime The ServiceLifetime to fallback to if type did not have WithLifetimeAttribute. lifetime ServiceLifetime The outputted ServiceLifetime. Returns bool True if it has WithLifetimeAttribute attribute, false if not. TryGetLifetime(Type, out ServiceLifetime) Tries to get the ServiceLifetime for the the Type from its defined attributes. public static bool TryGetLifetime(this Type type, out ServiceLifetime lifetime) Parameters type Type The type to get the service lifetime for. lifetime ServiceLifetime The outputted ServiceLifetime. Returns bool True if it has WithLifetimeAttribute attribute, false if not."
  },
  "api/DNV.DependencyInjection.Abstractions.Lifetime.TypeHasMultipleLifetimesAttributes.html": {
    "href": "api/DNV.DependencyInjection.Abstractions.Lifetime.TypeHasMultipleLifetimesAttributes.html",
    "title": "Class TypeHasMultipleLifetimesAttributes",
    "keywords": "Class TypeHasMultipleLifetimesAttributes Namespace DNV.DependencyInjection.Abstractions.Lifetime Assembly DNV.DependencyInjection.Abstractions.dll Exception that gets thrown when a Type has multiple lifetimes. public class TypeHasMultipleLifetimesAttributes : Exception, ISerializable Inheritance object Exception TypeHasMultipleLifetimesAttributes Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Throws.IfNull<T>(T, string?) Constructors TypeHasMultipleLifetimesAttributes(Type) Initializes a new instance of the TypeHasMultipleLifetimesAttributes class. public TypeHasMultipleLifetimesAttributes(Type type) Parameters type Type The type that has multiple WithLifetimeAttribute."
  },
  "api/DNV.DependencyInjection.Abstractions.Lifetime.WithLifetimeAttribute.html": {
    "href": "api/DNV.DependencyInjection.Abstractions.Lifetime.WithLifetimeAttribute.html",
    "title": "Class WithLifetimeAttribute",
    "keywords": "Class WithLifetimeAttribute Namespace DNV.DependencyInjection.Abstractions.Lifetime Assembly DNV.DependencyInjection.Abstractions.dll Indicates the ServiceLifetime [AttributeUsage(AttributeTargets.Class)] public class WithLifetimeAttribute : Attribute Inheritance object Attribute WithLifetimeAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors WithLifetimeAttribute(ServiceLifetime) Initializes a new instance of the WithLifetimeAttribute- public WithLifetimeAttribute(ServiceLifetime lifetime) Parameters lifetime ServiceLifetime THe ServiceLifetime to register the service as. Properties Lifetime Gets the ServiceLifetime. public ServiceLifetime Lifetime { get; } Property Value ServiceLifetime"
  },
  "api/DNV.DependencyInjection.Abstractions.Lifetime.html": {
    "href": "api/DNV.DependencyInjection.Abstractions.Lifetime.html",
    "title": "Namespace DNV.DependencyInjection.Abstractions.Lifetime",
    "keywords": "Namespace DNV.DependencyInjection.Abstractions.Lifetime Classes TypeExtensions Extension methods for Type. TypeHasMultipleLifetimesAttributes Exception that gets thrown when a Type has multiple lifetimes. WithLifetimeAttribute Indicates the ServiceLifetime"
  },
  "api/DNV.DependencyInjection.Abstractions.RegisterAsSelfAttribute.html": {
    "href": "api/DNV.DependencyInjection.Abstractions.RegisterAsSelfAttribute.html",
    "title": "Class RegisterAsSelfAttribute",
    "keywords": "Class RegisterAsSelfAttribute Namespace DNV.DependencyInjection.Abstractions Assembly DNV.DependencyInjection.Abstractions.dll Indicates that the class should be registered as itself in a DI container. [AttributeUsage(AttributeTargets.Class, Inherited = false)] public class RegisterAsSelfAttribute : Attribute Inheritance object Attribute RegisterAsSelfAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?)"
  },
  "api/DNV.DependencyInjection.Abstractions.ServiceCollectionExtensions.html": {
    "href": "api/DNV.DependencyInjection.Abstractions.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions",
    "keywords": "Class ServiceCollectionExtensions Namespace DNV.DependencyInjection.Abstractions Assembly DNV.DependencyInjection.Abstractions.dll Extension methods for service collection. public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddDNVServiceProviderOptions(IServiceCollection, Assembly, Action<DNVServiceProviderOptions>?) Adds the DNVServiceProviderOptions configuration. public static IServiceCollection AddDNVServiceProviderOptions(this IServiceCollection services, Assembly entryAssembly, Action<DNVServiceProviderOptions>? configureOptions = null) Parameters services IServiceCollection The service collection. entryAssembly Assembly The entry point assembly. configureOptions Action<DNVServiceProviderOptions> The optional callback for configuring the DNVServiceProviderOptions. Returns IServiceCollection The builder for continuation. AddDNVServiceProviderOptions(IServiceCollection, string, Action<DNVServiceProviderOptions>?) Adds the DNVServiceProviderOptions configuration. public static IServiceCollection AddDNVServiceProviderOptions(this IServiceCollection services, string entryAssembly, Action<DNVServiceProviderOptions>? configureOptions = null) Parameters services IServiceCollection The service collection. entryAssembly string The entry point assembly name. configureOptions Action<DNVServiceProviderOptions> The optional callback for configuring the DNVServiceProviderOptions. Returns IServiceCollection The builder for continuation."
  },
  "api/DNV.DependencyInjection.Abstractions.html": {
    "href": "api/DNV.DependencyInjection.Abstractions.html",
    "title": "Namespace DNV.DependencyInjection.Abstractions",
    "keywords": "Namespace DNV.DependencyInjection.Abstractions Classes DNVServiceProviderOptions Represents the options used when creating the DataWorkbench service provider. DisableAutoRegistrationAttribute Indicates that the class should not be registered automatically in a DI container. RegisterAsSelfAttribute Indicates that the class should be registered as itself in a DI container. ServiceCollectionExtensions Extension methods for service collection. Interfaces ICanAddServices Defines a system that can add services to a IServiceCollection. ICanAddServicesForTypesWith<TAttribute> Defines a system that can add services to a IServiceCollection for classes with a specific Attribute. ICanAddServicesForTypesWith<TAttribute, TContainerBuilder> Defines a system that can add services to a TContainerBuilder for classes with a specific Attribute. ICanAddServices<TContainerBuilder> Defines a system that can add services to a TContainerBuilder."
  },
  "api/DNV.DependencyInjection.Autofac.HostBuilderExtensions.html": {
    "href": "api/DNV.DependencyInjection.Autofac.HostBuilderExtensions.html",
    "title": "Class HostBuilderExtensions",
    "keywords": "Class HostBuilderExtensions Namespace DNV.DependencyInjection.Autofac Assembly DNV.DependencyInjection.Autofac.dll Extension methods for IHostBuilder. public static class HostBuilderExtensions Inheritance object HostBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods UseDnvAutofacDependencyInjection(IHostBuilder, Assembly, Action<DNVServiceProviderOptions>?, Action<ContainerBuilder>?) Adds the DNV DI container discovery process and service providers to the host. public static IHostBuilder UseDnvAutofacDependencyInjection(this IHostBuilder builder, Assembly entryAssembly, Action<DNVServiceProviderOptions>? configureOptions = null, Action<ContainerBuilder>? configureContainer = null) Parameters builder IHostBuilder The IHostBuilder to modify. entryAssembly Assembly The entry point assembly to discover services in. configureOptions Action<DNVServiceProviderOptions> The callback for configuring DNVServiceProviderOptions. configureContainer Action<ContainerBuilder> The callback for configuring Autofac.ContainerBuilder. Returns IHostBuilder The IHostBuilder for continuation. UseDnvAutofacDependencyInjection(IHostBuilder, string, Action<DNVServiceProviderOptions>?, Action<ContainerBuilder>?) Adds the DNV DI container discovery process and service providers to the host. public static IHostBuilder UseDnvAutofacDependencyInjection(this IHostBuilder builder, string entryAssemblyName, Action<DNVServiceProviderOptions>? configureOptions = null, Action<ContainerBuilder>? configureContainer = null) Parameters builder IHostBuilder The IHostBuilder to modify. entryAssemblyName string The entry point assembly name to discover services in. configureOptions Action<DNVServiceProviderOptions> The callback for configuring DNVServiceProviderOptions. configureContainer Action<ContainerBuilder> The callback for configuring Autofac.ContainerBuilder. Returns IHostBuilder The IHostBuilder for continuation."
  },
  "api/DNV.DependencyInjection.Autofac.ICanAddServices.html": {
    "href": "api/DNV.DependencyInjection.Autofac.ICanAddServices.html",
    "title": "Interface ICanAddServices",
    "keywords": "Interface ICanAddServices Namespace DNV.DependencyInjection.Autofac Assembly DNV.DependencyInjection.Autofac.dll Defines a system that can add services to a Autofac.ContainerBuilder. public interface ICanAddServices : ICanAddServices<ContainerBuilder> Inherited Members ICanAddServices<ContainerBuilder>.AddTo(ContainerBuilder) Extension Methods Throws.IfNull<T>(T, string?)"
  },
  "api/DNV.DependencyInjection.Autofac.ICanAddServicesForTypesWith-1.html": {
    "href": "api/DNV.DependencyInjection.Autofac.ICanAddServicesForTypesWith-1.html",
    "title": "Interface ICanAddServicesForTypesWith<TAttribute>",
    "keywords": "Interface ICanAddServicesForTypesWith<TAttribute> Namespace DNV.DependencyInjection.Autofac Assembly DNV.DependencyInjection.Autofac.dll Defines a system that can add services to a Autofac.ContainerBuilder for classes with a specific Attribute. public interface ICanAddServicesForTypesWith<in TAttribute> : ICanAddServicesForTypesWith<TAttribute, ContainerBuilder> where TAttribute : Attribute Type Parameters TAttribute The type of the Attribute. Inherited Members ICanAddServicesForTypesWith<TAttribute, ContainerBuilder>.AddServiceFor(Type, TAttribute, ContainerBuilder) Extension Methods Throws.IfNull<T>(T, string?)"
  },
  "api/DNV.DependencyInjection.Autofac.html": {
    "href": "api/DNV.DependencyInjection.Autofac.html",
    "title": "Namespace DNV.DependencyInjection.Autofac",
    "keywords": "Namespace DNV.DependencyInjection.Autofac Classes HostBuilderExtensions Extension methods for IHostBuilder. Interfaces ICanAddServices Defines a system that can add services to a Autofac.ContainerBuilder. ICanAddServicesForTypesWith<TAttribute> Defines a system that can add services to a Autofac.ContainerBuilder for classes with a specific Attribute."
  },
  "api/DNV.DependencyInjection.Configuration.ConfigurationAttribute.html": {
    "href": "api/DNV.DependencyInjection.Configuration.ConfigurationAttribute.html",
    "title": "Class ConfigurationAttribute",
    "keywords": "Class ConfigurationAttribute Namespace DNV.DependencyInjection.Configuration Assembly DNV.DependencyInjection.Configuration.dll Indicates that the type should be registered as a configuration object in a DI container. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct)] public class ConfigurationAttribute : Attribute Inheritance object Attribute ConfigurationAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors ConfigurationAttribute(params string[]) Initializes a new instance of the ConfigurationAttribute class. public ConfigurationAttribute(params string[] section) Parameters section string[] The configuration section to parse the object from, excluding the prefix that's configured with the DNVConfigurationOptions configuration. Properties Section Gets the configuration section to parse the configuration object from. public string Section { get; } Property Value string"
  },
  "api/DNV.DependencyInjection.Configuration.ConfigurationObjectDefinition-1.html": {
    "href": "api/DNV.DependencyInjection.Configuration.ConfigurationObjectDefinition-1.html",
    "title": "Class ConfigurationObjectDefinition<TConfiguration>",
    "keywords": "Class ConfigurationObjectDefinition<TConfiguration> Namespace DNV.DependencyInjection.Configuration Assembly DNV.DependencyInjection.Configuration.dll Represents the definition of a DNV configuration. public class ConfigurationObjectDefinition<TConfiguration> : IAmAConfigurationObjectDefinition where TConfiguration : class Type Parameters TConfiguration The Type of the DNV configuration object. Inheritance object ConfigurationObjectDefinition<TConfiguration> Implements IAmAConfigurationObjectDefinition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors ConfigurationObjectDefinition(ConfigurationAttribute) Initializes a new instance of the ConfigurationObjectDefinition<TConfiguration> class. public ConfigurationObjectDefinition(ConfigurationAttribute attribute) Parameters attribute ConfigurationAttribute The ConfigurationAttribute. Properties ConfigurationObjectType Gets the Type of the configuration object. public Type ConfigurationObjectType { get; } Property Value Type Section Gets the section where this configuration resides in the IConfiguration. public string Section { get; } Property Value string"
  },
  "api/DNV.DependencyInjection.Configuration.ConfigurationObjects.html": {
    "href": "api/DNV.DependencyInjection.Configuration.ConfigurationObjects.html",
    "title": "Class ConfigurationObjects",
    "keywords": "Class ConfigurationObjects Namespace DNV.DependencyInjection.Configuration Assembly DNV.DependencyInjection.Configuration.dll Represents an implementation of ICanAddServicesForTypesWith<TAttribute, TContainerBuilder> for adding ConfigurationObjectDefinition<TConfiguration> to the IoC container for each type with the ConfigurationAttribute attribute. public class ConfigurationObjects : ICanAddServicesForTypesWith<ConfigurationAttribute>, ICanAddServicesForTypesWith<ConfigurationAttribute, IServiceCollection> Inheritance object ConfigurationObjects Implements ICanAddServicesForTypesWith<ConfigurationAttribute> ICanAddServicesForTypesWith<ConfigurationAttribute, IServiceCollection> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Methods AddServiceFor(Type, ConfigurationAttribute, IServiceCollection) Adds services for the Type with the ConfigurationAttribute attribute to the IServiceCollection. public void AddServiceFor(Type type, ConfigurationAttribute attribute, IServiceCollection services) Parameters type Type The type with the attribute. attribute ConfigurationAttribute The attribute instance. services IServiceCollection The builder to add services into."
  },
  "api/DNV.DependencyInjection.Configuration.DNVConfigurationOptions.html": {
    "href": "api/DNV.DependencyInjection.Configuration.DNVConfigurationOptions.html",
    "title": "Class DNVConfigurationOptions",
    "keywords": "Class DNVConfigurationOptions Namespace DNV.DependencyInjection.Configuration Assembly DNV.DependencyInjection.Configuration.dll Represents the configuration of the DNV configuration system. public class DNVConfigurationOptions Inheritance object DNVConfigurationOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties Prefix Gets or sets the configuration path prefix used by the DNV configuration system when reading in configuration objects when ConfigurationAttribute decorator. public string Prefix { get; set; } Property Value string"
  },
  "api/DNV.DependencyInjection.Configuration.HostExtensions.html": {
    "href": "api/DNV.DependencyInjection.Configuration.HostExtensions.html",
    "title": "Class HostExtensions",
    "keywords": "Class HostExtensions Namespace DNV.DependencyInjection.Configuration Assembly DNV.DependencyInjection.Configuration.dll Represents extension methods for adding the DNV configuration system to a host. public static class HostExtensions Inheritance object HostExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddDNVConfigurations(IServiceCollection, params string[]) Adds the DNV Configuration system. public static IServiceCollection AddDNVConfigurations(this IServiceCollection services, params string[] configurationPrefixes) Parameters services IServiceCollection The IServiceCollection. configurationPrefixes string[] The configuration prefixes. Returns IServiceCollection The builder for continuation. UseDNVConfigurations(IHostBuilder, params string[]) Use the DNV Configuration system. public static IHostBuilder UseDNVConfigurations(this IHostBuilder builder, params string[] configurationPrefixes) Parameters builder IHostBuilder The IHostBuilder. configurationPrefixes string[] The configuration prefixes. Returns IHostBuilder The builder for continuation."
  },
  "api/DNV.DependencyInjection.Configuration.IAmAConfigurationObjectDefinition.html": {
    "href": "api/DNV.DependencyInjection.Configuration.IAmAConfigurationObjectDefinition.html",
    "title": "Interface IAmAConfigurationObjectDefinition",
    "keywords": "Interface IAmAConfigurationObjectDefinition Namespace DNV.DependencyInjection.Configuration Assembly DNV.DependencyInjection.Configuration.dll Defines a configuration object definition. public interface IAmAConfigurationObjectDefinition Extension Methods Throws.IfNull<T>(T, string?) Properties ConfigurationObjectType Gets the Type of the configuration object. Type ConfigurationObjectType { get; } Property Value Type Section Gets the section where this configuration resides in the IConfiguration. string Section { get; } Property Value string"
  },
  "api/DNV.DependencyInjection.Configuration.Parsing.CannotParseConfiguration.html": {
    "href": "api/DNV.DependencyInjection.Configuration.Parsing.CannotParseConfiguration.html",
    "title": "Class CannotParseConfiguration",
    "keywords": "Class CannotParseConfiguration Namespace DNV.DependencyInjection.Configuration.Parsing Assembly DNV.DependencyInjection.Configuration.dll Exception that gets thrown when a configuration type cannot be parsed. public class CannotParseConfiguration : Exception, ISerializable Inheritance object Exception CannotParseConfiguration Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Throws.IfNull<T>(T, string?) Constructors CannotParseConfiguration(Exception, Type, string) Initializes a new instance of the CannotParseConfiguration class. public CannotParseConfiguration(Exception error, Type configuration, string section) Parameters error Exception configuration Type section string"
  },
  "api/DNV.DependencyInjection.Configuration.Parsing.ConfigurationParser.html": {
    "href": "api/DNV.DependencyInjection.Configuration.Parsing.ConfigurationParser.html",
    "title": "Class ConfigurationParser",
    "keywords": "Class ConfigurationParser Namespace DNV.DependencyInjection.Configuration.Parsing Assembly DNV.DependencyInjection.Configuration.dll Represents an implementation of IParseConfigurationObjects. public class ConfigurationParser : IParseConfigurationObjects Inheritance object ConfigurationParser Implements IParseConfigurationObjects Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Methods TryParseFrom<TOptions>(IConfigurationSection, out TOptions?, out Exception?) Tries to parse the IConfigurationSection to the specified TOptions. public bool TryParseFrom<TOptions>(IConfigurationSection configuration, out TOptions? parsed, out Exception? error) where TOptions : class Parameters configuration IConfigurationSection The IConfigurationSection to parse. parsed TOptions The outputted TOptions. error Exception The outputted Exception. Returns bool True if successfully parsed, false if not. Type Parameters TOptions The type of the configuration."
  },
  "api/DNV.DependencyInjection.Configuration.Parsing.IParseConfigurationObjects.html": {
    "href": "api/DNV.DependencyInjection.Configuration.Parsing.IParseConfigurationObjects.html",
    "title": "Interface IParseConfigurationObjects",
    "keywords": "Interface IParseConfigurationObjects Namespace DNV.DependencyInjection.Configuration.Parsing Assembly DNV.DependencyInjection.Configuration.dll Defines a parser for a DNV IConfigurationSection. public interface IParseConfigurationObjects Extension Methods Throws.IfNull<T>(T, string?) Methods TryParseFrom<TOptions>(IConfigurationSection, out TOptions?, out Exception?) Tries to parse the IConfigurationSection to the specified TOptions. bool TryParseFrom<TOptions>(IConfigurationSection configuration, out TOptions? parsed, out Exception? error) where TOptions : class Parameters configuration IConfigurationSection The IConfigurationSection to parse. parsed TOptions The outputted TOptions. error Exception The outputted Exception. Returns bool True if successfully parsed, false if not. Type Parameters TOptions The type of the configuration."
  },
  "api/DNV.DependencyInjection.Configuration.Parsing.html": {
    "href": "api/DNV.DependencyInjection.Configuration.Parsing.html",
    "title": "Namespace DNV.DependencyInjection.Configuration.Parsing",
    "keywords": "Namespace DNV.DependencyInjection.Configuration.Parsing Classes CannotParseConfiguration Exception that gets thrown when a configuration type cannot be parsed. ConfigurationParser Represents an implementation of IParseConfigurationObjects. Interfaces IParseConfigurationObjects Defines a parser for a DNV IConfigurationSection."
  },
  "api/DNV.DependencyInjection.Configuration.html": {
    "href": "api/DNV.DependencyInjection.Configuration.html",
    "title": "Namespace DNV.DependencyInjection.Configuration",
    "keywords": "Namespace DNV.DependencyInjection.Configuration Classes ConfigurationAttribute Indicates that the type should be registered as a configuration object in a DI container. ConfigurationObjectDefinition<TConfiguration> Represents the definition of a DNV configuration. ConfigurationObjects Represents an implementation of ICanAddServicesForTypesWith<TAttribute, TContainerBuilder> for adding ConfigurationObjectDefinition<TConfiguration> to the IoC container for each type with the ConfigurationAttribute attribute. DNVConfigurationOptions Represents the configuration of the DNV configuration system. HostExtensions Represents extension methods for adding the DNV configuration system to a host. Interfaces IAmAConfigurationObjectDefinition Defines a configuration object definition."
  },
  "api/DNV.DependencyInjection.Microsoft.HostBuilderExtensions.html": {
    "href": "api/DNV.DependencyInjection.Microsoft.HostBuilderExtensions.html",
    "title": "Class HostBuilderExtensions",
    "keywords": "Class HostBuilderExtensions Namespace DNV.DependencyInjection.Microsoft Assembly DNV.DependencyInjection.Microsoft.dll Extension methods for IHostBuilder. public static class HostBuilderExtensions Inheritance object HostBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods UseDnvMicrosoftDependencyInjection(IHostBuilder, Assembly, Action<DNVServiceProviderOptions>?, Action<IServiceCollection>?) Adds the DNV DI container discovery process and service providers to the host. public static IHostBuilder UseDnvMicrosoftDependencyInjection(this IHostBuilder builder, Assembly entryAssembly, Action<DNVServiceProviderOptions>? configureOptions = null, Action<IServiceCollection>? configureContainer = null) Parameters builder IHostBuilder The IHostBuilder to modify. entryAssembly Assembly The entry point assembly to discover services in. configureOptions Action<DNVServiceProviderOptions> The callback for configuring DNVServiceProviderOptions. configureContainer Action<IServiceCollection> The callback for configuring IServiceCollection. Returns IHostBuilder The IHostBuilder for continuation. UseDnvMicrosoftDependencyInjection(IHostBuilder, string, Action<DNVServiceProviderOptions>?, Action<IServiceCollection>?) Adds the DNV DI container discovery process and service providers to the host. public static IHostBuilder UseDnvMicrosoftDependencyInjection(this IHostBuilder builder, string entryAssemblyName, Action<DNVServiceProviderOptions>? configureOptions = null, Action<IServiceCollection>? configureContainer = null) Parameters builder IHostBuilder The IHostBuilder to modify. entryAssemblyName string The entry point assembly name to discover services in. configureOptions Action<DNVServiceProviderOptions> The callback for configuring DNVServiceProviderOptions. configureContainer Action<IServiceCollection> The callback for configuring IServiceCollection. Returns IHostBuilder The IHostBuilder for continuation."
  },
  "api/DNV.DependencyInjection.Microsoft.html": {
    "href": "api/DNV.DependencyInjection.Microsoft.html",
    "title": "Namespace DNV.DependencyInjection.Microsoft",
    "keywords": "Namespace DNV.DependencyInjection.Microsoft Classes HostBuilderExtensions Extension methods for IHostBuilder."
  },
  "api/DNV.DependencyInjection.Registry.CouldNotCreateInstanceOfType.html": {
    "href": "api/DNV.DependencyInjection.Registry.CouldNotCreateInstanceOfType.html",
    "title": "Class CouldNotCreateInstanceOfType",
    "keywords": "Class CouldNotCreateInstanceOfType Namespace DNV.DependencyInjection.Registry Assembly DNV.DependencyInjection.Registry.dll Exception that gets thrown when instantiating a Type using the default parameterless constructor fails. public class CouldNotCreateInstanceOfType : Exception, ISerializable Inheritance object Exception CouldNotCreateInstanceOfType Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Throws.IfNull<T>(T, string?) Constructors CouldNotCreateInstanceOfType(Type) Initializes a new instance of the CouldNotCreateInstanceOfType class. public CouldNotCreateInstanceOfType(Type type) Parameters type Type The type that could not be instantiated. CouldNotCreateInstanceOfType(Type, Exception) Initializes a new instance of the CouldNotCreateInstanceOfType class. public CouldNotCreateInstanceOfType(Type type, Exception exception) Parameters type Type The type that could not be created. exception Exception The inner exception."
  },
  "api/DNV.DependencyInjection.Registry.DNVServiceProviderFactory-1.html": {
    "href": "api/DNV.DependencyInjection.Registry.DNVServiceProviderFactory-1.html",
    "title": "Class DNVServiceProviderFactory<TContainerBuilder>",
    "keywords": "Class DNVServiceProviderFactory<TContainerBuilder> Namespace DNV.DependencyInjection.Registry Assembly DNV.DependencyInjection.Registry.dll Represents a base implementation of IServiceProviderFactory<TContainerBuilder> for DNV service provider implementations. public abstract class DNVServiceProviderFactory<TContainerBuilder> : IServiceProviderFactory<TContainerBuilder> where TContainerBuilder : notnull Type Parameters TContainerBuilder The IServiceProviderFactory<TContainerBuilder> of the container builder. Inheritance object DNVServiceProviderFactory<TContainerBuilder> Implements IServiceProviderFactory<TContainerBuilder> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Methods CreateBuilder(IServiceCollection) Creates a container builder from an IServiceCollection. public TContainerBuilder CreateBuilder(IServiceCollection services) Parameters services IServiceCollection The collection of services Returns TContainerBuilder A container builder that can be used to create an IServiceProvider. CreateContainerBuilder(IServiceCollection) Create the TContainerBuilder from the IServiceCollection. protected abstract TContainerBuilder CreateContainerBuilder(IServiceCollection services) Parameters services IServiceCollection The service collection. Returns TContainerBuilder The TContainerBuilder. CreateServiceProvider(TContainerBuilder) Creates an IServiceProvider from the container builder. public IServiceProvider CreateServiceProvider(TContainerBuilder containerBuilder) Parameters containerBuilder TContainerBuilder The container builder Returns IServiceProvider An IServiceProvider CreateServiceProvider(TContainerBuilder, DiscoveredServices<TContainerBuilder>) Create the IServiceProvider using the TContainerBuilder. protected abstract IServiceProvider CreateServiceProvider(TContainerBuilder containerBuilder, DiscoveredServices<TContainerBuilder> discoveredServices) Parameters containerBuilder TContainerBuilder The container builder. discoveredServices DiscoveredServices<TContainerBuilder> The discovered services. Returns IServiceProvider The IServiceProvider."
  },
  "api/DNV.DependencyInjection.Registry.DiscoveredServices-1.html": {
    "href": "api/DNV.DependencyInjection.Registry.DiscoveredServices-1.html",
    "title": "Class DiscoveredServices<TContainerBuilder>",
    "keywords": "Class DiscoveredServices<TContainerBuilder> Namespace DNV.DependencyInjection.Registry Assembly DNV.DependencyInjection.Registry.dll Represents the discovered services that should be configured in the IoC container. public class DiscoveredServices<TContainerBuilder> where TContainerBuilder : notnull Type Parameters TContainerBuilder Inheritance object DiscoveredServices<TContainerBuilder> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties AdditionalServices Gets the additional IServiceCollection to register. public IServiceCollection AdditionalServices { get; } Property Value IServiceCollection Assemblies The assemblies that were searched through. public IReadOnlyCollection<Assembly> Assemblies { get; } Property Value IReadOnlyCollection<Assembly> ClassesToRegister Gets the ClassesByLifeTime to be registered as their implementing types. public ClassesByLifeTime ClassesToRegister { get; } Property Value ClassesByLifeTime ClassesToRegisterAsSelf Gets the ClassesByLifeTime to be registered as themselves. public ClassesByLifeTime ClassesToRegisterAsSelf { get; } Property Value ClassesByLifeTime Methods DiscoverServices(DNVServiceProviderOptions, TContainerBuilder) Gets the singleton instance of DiscoveredServices<TContainerBuilder>. public static DiscoveredServices<TContainerBuilder> DiscoverServices(DNVServiceProviderOptions options, TContainerBuilder builder) Parameters options DNVServiceProviderOptions The options. builder TContainerBuilder The container builder. Returns DiscoveredServices<TContainerBuilder> The singleton instance of DiscoveredServices<TContainerBuilder>."
  },
  "api/DNV.DependencyInjection.Registry.Types.ClassesByLifeTime.html": {
    "href": "api/DNV.DependencyInjection.Registry.Types.ClassesByLifeTime.html",
    "title": "Class ClassesByLifeTime",
    "keywords": "Class ClassesByLifeTime Namespace DNV.DependencyInjection.Registry.Types Assembly DNV.DependencyInjection.Registry.dll Represents a set of discovered classes grouped by DI lifecycle. public class ClassesByLifeTime Inheritance object ClassesByLifeTime Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors ClassesByLifeTime(IEnumerable<Type>, IEnumerable<Type>, IEnumerable<Type>) Initializes a new instance of the ClassesByLifeTime class. public ClassesByLifeTime(IEnumerable<Type> singletonClasses, IEnumerable<Type> scopedClasses, IEnumerable<Type> transientClasses) Parameters singletonClasses IEnumerable<Type> The implementations to be registered as singleton. scopedClasses IEnumerable<Type> The implementations to be registered as scoped. transientClasses IEnumerable<Type> The implementations to be registered as transient. Properties ScopedClasses Gets the discovered classes that should be registered as scoped. public IReadOnlyCollection<Type> ScopedClasses { get; } Property Value IReadOnlyCollection<Type> SingletonClasses Gets the discovered classes that should be registered as singleton. public IReadOnlyCollection<Type> SingletonClasses { get; } Property Value IReadOnlyCollection<Type> TransientClasses Gets the discovered classes that should be registered as transient. public IReadOnlyCollection<Type> TransientClasses { get; } Property Value IReadOnlyCollection<Type>"
  },
  "api/DNV.DependencyInjection.Registry.Types.GenericTypeExtensions.html": {
    "href": "api/DNV.DependencyInjection.Registry.Types.GenericTypeExtensions.html",
    "title": "Class GenericTypeExtensions",
    "keywords": "Class GenericTypeExtensions Namespace DNV.DependencyInjection.Registry.Types Assembly DNV.DependencyInjection.Registry.dll Extensions on Type for getting information about generic types. public static class GenericTypeExtensions Inheritance object GenericTypeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetImplementedGenericInterfaceFirstGenericArgumentType(Type, Type) Tries to get the generic type of an implemented generic interface. public static Type GetImplementedGenericInterfaceFirstGenericArgumentType(this Type type, Type openGenericInterface) Parameters type Type The Type to get the implemented generic interface type from. openGenericInterface Type The open generic interface. Returns Type The generic type of an implemented generic interface."
  },
  "api/DNV.DependencyInjection.Registry.Types.OpenGenericInterfaceShouldHaveOnlyOneGenericParameter.html": {
    "href": "api/DNV.DependencyInjection.Registry.Types.OpenGenericInterfaceShouldHaveOnlyOneGenericParameter.html",
    "title": "Class OpenGenericInterfaceShouldHaveOnlyOneGenericParameter",
    "keywords": "Class OpenGenericInterfaceShouldHaveOnlyOneGenericParameter Namespace DNV.DependencyInjection.Registry.Types Assembly DNV.DependencyInjection.Registry.dll Exception that gets thrown when an open generic interface has more that one generic parameter when it's expected to have only one. public class OpenGenericInterfaceShouldHaveOnlyOneGenericParameter : Exception, ISerializable Inheritance object Exception OpenGenericInterfaceShouldHaveOnlyOneGenericParameter Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Throws.IfNull<T>(T, string?) Constructors OpenGenericInterfaceShouldHaveOnlyOneGenericParameter(Type, Type) Initializes a new instance of the OpenGenericInterfaceShouldHaveOnlyOneGenericParameter class. public OpenGenericInterfaceShouldHaveOnlyOneGenericParameter(Type type, Type genericInterface) Parameters type Type The Type. genericInterface Type The generic interface with multiple generic parameters."
  },
  "api/DNV.DependencyInjection.Registry.Types.TypeDoesNotImplementGenericInterface.html": {
    "href": "api/DNV.DependencyInjection.Registry.Types.TypeDoesNotImplementGenericInterface.html",
    "title": "Class TypeDoesNotImplementGenericInterface",
    "keywords": "Class TypeDoesNotImplementGenericInterface Namespace DNV.DependencyInjection.Registry.Types Assembly DNV.DependencyInjection.Registry.dll Exception that gets thrown when a Type does not implement the given generic interfaces. public class TypeDoesNotImplementGenericInterface : Exception, ISerializable Inheritance object Exception TypeDoesNotImplementGenericInterface Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Throws.IfNull<T>(T, string?) Constructors TypeDoesNotImplementGenericInterface(Type, Type) Initializes a new instance of the TypeDoesNotImplementGenericInterface class. public TypeDoesNotImplementGenericInterface(Type type, Type genericInterface) Parameters type Type The Type. genericInterface Type The open generic interface."
  },
  "api/DNV.DependencyInjection.Registry.Types.TypeImplementsGenericInterfaceMultipleTimes.html": {
    "href": "api/DNV.DependencyInjection.Registry.Types.TypeImplementsGenericInterfaceMultipleTimes.html",
    "title": "Class TypeImplementsGenericInterfaceMultipleTimes",
    "keywords": "Class TypeImplementsGenericInterfaceMultipleTimes Namespace DNV.DependencyInjection.Registry.Types Assembly DNV.DependencyInjection.Registry.dll Exception that gets thrown when a Type implements the given open generic interfaces multiple times. public class TypeImplementsGenericInterfaceMultipleTimes : Exception, ISerializable Inheritance object Exception TypeImplementsGenericInterfaceMultipleTimes Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Throws.IfNull<T>(T, string?) Constructors TypeImplementsGenericInterfaceMultipleTimes(Type, Type) Initializes a new instance of the TypeImplementsGenericInterfaceMultipleTimes class. public TypeImplementsGenericInterfaceMultipleTimes(Type type, Type genericInterface) Parameters type Type The Type. genericInterface Type The open generic interface."
  },
  "api/DNV.DependencyInjection.Registry.Types.html": {
    "href": "api/DNV.DependencyInjection.Registry.Types.html",
    "title": "Namespace DNV.DependencyInjection.Registry.Types",
    "keywords": "Namespace DNV.DependencyInjection.Registry.Types Classes ClassesByLifeTime Represents a set of discovered classes grouped by DI lifecycle. GenericTypeExtensions Extensions on Type for getting information about generic types. OpenGenericInterfaceShouldHaveOnlyOneGenericParameter Exception that gets thrown when an open generic interface has more that one generic parameter when it's expected to have only one. TypeDoesNotImplementGenericInterface Exception that gets thrown when a Type does not implement the given generic interfaces. TypeImplementsGenericInterfaceMultipleTimes Exception that gets thrown when a Type implements the given open generic interfaces multiple times."
  },
  "api/DNV.DependencyInjection.Registry.html": {
    "href": "api/DNV.DependencyInjection.Registry.html",
    "title": "Namespace DNV.DependencyInjection.Registry",
    "keywords": "Namespace DNV.DependencyInjection.Registry Classes CouldNotCreateInstanceOfType Exception that gets thrown when instantiating a Type using the default parameterless constructor fails. DNVServiceProviderFactory<TContainerBuilder> Represents a base implementation of IServiceProviderFactory<TContainerBuilder> for DNV service provider implementations. DiscoveredServices<TContainerBuilder> Represents the discovered services that should be configured in the IoC container."
  },
  "api/DNV.Domain.EventHub.MediatR.Extensions.DependencyInjectionExtensions.html": {
    "href": "api/DNV.Domain.EventHub.MediatR.Extensions.DependencyInjectionExtensions.html",
    "title": "Class DependencyInjectionExtensions",
    "keywords": "Class DependencyInjectionExtensions Namespace DNV.Domain.EventHub.MediatR.Extensions Assembly DNV.Domain.EventHub.MediatR.dll public static class DependencyInjectionExtensions Inheritance object DependencyInjectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddMrEventHub(IServiceCollection, MediatRServiceConfiguration, params Assembly[]) public static IServiceCollection AddMrEventHub(this IServiceCollection services, MediatRServiceConfiguration config, params Assembly[] assemblies) Parameters services IServiceCollection config MediatRServiceConfiguration assemblies Assembly[] Returns IServiceCollection AddMrEventHub(IServiceCollection, Action<MediatRServiceConfiguration>, params Assembly[]) public static IServiceCollection AddMrEventHub(this IServiceCollection services, Action<MediatRServiceConfiguration> configAction, params Assembly[] assemblies) Parameters services IServiceCollection configAction Action<MediatRServiceConfiguration> assemblies Assembly[] Returns IServiceCollection AddMrEventHub(IServiceCollection, Action<MediatRServiceConfiguration>, params Type[]) public static IServiceCollection AddMrEventHub(this IServiceCollection services, Action<MediatRServiceConfiguration> configAction, params Type[] types) Parameters services IServiceCollection configAction Action<MediatRServiceConfiguration> types Type[] Returns IServiceCollection AddMrEventHub(IServiceCollection, params Assembly[]) public static IServiceCollection AddMrEventHub(this IServiceCollection services, params Assembly[] assemblies) Parameters services IServiceCollection assemblies Assembly[] Returns IServiceCollection AddMrEventHub(IServiceCollection, params Type[]) public static IServiceCollection AddMrEventHub(this IServiceCollection services, params Type[] types) Parameters services IServiceCollection types Type[] Returns IServiceCollection"
  },
  "api/DNV.Domain.EventHub.MediatR.Extensions.html": {
    "href": "api/DNV.Domain.EventHub.MediatR.Extensions.html",
    "title": "Namespace DNV.Domain.EventHub.MediatR.Extensions",
    "keywords": "Namespace DNV.Domain.EventHub.MediatR.Extensions Classes DependencyInjectionExtensions"
  },
  "api/DNV.Domain.Seedwork.Entity.html": {
    "href": "api/DNV.Domain.Seedwork.Entity.html",
    "title": "Class Entity",
    "keywords": "Class Entity Namespace DNV.Domain.Seedwork Assembly DNV.Domain.Seedwork.dll public abstract class Entity Inheritance object Entity Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties DomainEvents public IReadOnlyCollection<Event>? DomainEvents { get; } Property Value IReadOnlyCollection<Event> Id public string Id { get; set; } Property Value string Methods AddDomainEvent(Event) public void AddDomainEvent(Event @event) Parameters event Event CalculateHashCode() protected virtual int CalculateHashCode() Returns int ClearDomainEvents() public void ClearDomainEvents() Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. IsTransient() public bool IsTransient() Returns bool RemoveDomainEvent(Event) public void RemoveDomainEvent(Event @event) Parameters event Event"
  },
  "api/DNV.Domain.Seedwork.Enumeration-1.html": {
    "href": "api/DNV.Domain.Seedwork.Enumeration-1.html",
    "title": "Class Enumeration<T>",
    "keywords": "Class Enumeration<T> Namespace DNV.Domain.Seedwork Assembly DNV.Domain.Seedwork.dll public abstract class Enumeration<T> : IComparable where T : IComparable Type Parameters T Inheritance object Enumeration<T> Implements IComparable Derived EventType Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Throws.IfNull<T>(T, string?) Constructors Enumeration(T, string) protected Enumeration(T id, string name) Parameters id T name string Properties Id public T Id { get; } Property Value T Name public string Name { get; } Property Value string Methods CompareTo(object) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(object obj) Parameters obj object An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes obj in the sort order. Zero This instance occurs in the same position in the sort order as obj. Greater than zero This instance follows obj in the sort order. Exceptions ArgumentException obj is not the same type as this instance. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. FromDisplayName<TEnumeration>(string) public static TEnumeration FromDisplayName<TEnumeration>(string displayName) where TEnumeration : Enumeration<T> Parameters displayName string Returns TEnumeration Type Parameters TEnumeration FromValue<TEnumeration>(T) public static TEnumeration FromValue<TEnumeration>(T value) where TEnumeration : Enumeration<T> Parameters value T Returns TEnumeration Type Parameters TEnumeration GetAll<TEnumeration>() public static IEnumerable<TEnumeration> GetAll<TEnumeration>() where TEnumeration : Enumeration<T> Returns IEnumerable<TEnumeration> Type Parameters TEnumeration GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/DNV.Domain.Seedwork.Event.html": {
    "href": "api/DNV.Domain.Seedwork.Event.html",
    "title": "Class Event",
    "keywords": "Class Event Namespace DNV.Domain.Seedwork Assembly DNV.Domain.Seedwork.dll public abstract class Event Inheritance object Event Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors Event(Entity) protected Event(Entity eventSource) Parameters eventSource Entity Properties EventSource public Entity EventSource { get; } Property Value Entity EventType public abstract EventType EventType { get; } Property Value EventType"
  },
  "api/DNV.Domain.Seedwork.EventType.html": {
    "href": "api/DNV.Domain.Seedwork.EventType.html",
    "title": "Class EventType",
    "keywords": "Class EventType Namespace DNV.Domain.Seedwork Assembly DNV.Domain.Seedwork.dll public abstract class EventType : Enumeration<string>, IComparable Inheritance object Enumeration<string> EventType Implements IComparable Inherited Members Enumeration<string>.Id Enumeration<string>.Name Enumeration<string>.ToString() Enumeration<string>.GetAll<TEnumeration>() Enumeration<string>.Equals(object) Enumeration<string>.GetHashCode() Enumeration<string>.FromValue<TEnumeration>(string) Enumeration<string>.FromDisplayName<TEnumeration>(string) Enumeration<string>.CompareTo(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Throws.IfNull<T>(T, string?) Constructors EventType(string, string, string) protected EventType(string @namespace, string id, string name) Parameters namespace string id string name string Properties Namespace public string Namespace { get; } Property Value string"
  },
  "api/DNV.Domain.Seedwork.IAggregateRoot.html": {
    "href": "api/DNV.Domain.Seedwork.IAggregateRoot.html",
    "title": "Interface IAggregateRoot",
    "keywords": "Interface IAggregateRoot Namespace DNV.Domain.Seedwork Assembly DNV.Domain.Seedwork.dll public interface IAggregateRoot Extension Methods Throws.IfNull<T>(T, string?)"
  },
  "api/DNV.Domain.Seedwork.IEventHandler-1.html": {
    "href": "api/DNV.Domain.Seedwork.IEventHandler-1.html",
    "title": "Interface IEventHandler<T>",
    "keywords": "Interface IEventHandler<T> Namespace DNV.Domain.Seedwork Assembly DNV.Domain.Seedwork.dll public interface IEventHandler<in T> where T : Event Type Parameters T Extension Methods Throws.IfNull<T>(T, string?) Methods HandleAsync(T, CancellationToken) Task HandleAsync(T @event, CancellationToken cancellationToken = default) Parameters event T cancellationToken CancellationToken Returns Task"
  },
  "api/DNV.Domain.Seedwork.ValueObject.html": {
    "href": "api/DNV.Domain.Seedwork.ValueObject.html",
    "title": "Class ValueObject",
    "keywords": "Class ValueObject Namespace DNV.Domain.Seedwork Assembly DNV.Domain.Seedwork.dll public abstract class ValueObject Inheritance object ValueObject Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Methods EqualOperator(ValueObject, ValueObject) protected static bool EqualOperator(ValueObject left, ValueObject right) Parameters left ValueObject right ValueObject Returns bool Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetAtomicValues() protected abstract IEnumerable<object> GetAtomicValues() Returns IEnumerable<object> GetCopy() public ValueObject GetCopy() Returns ValueObject GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. NotEqualOperator(ValueObject, ValueObject) protected static bool NotEqualOperator(ValueObject left, ValueObject right) Parameters left ValueObject right ValueObject Returns bool"
  },
  "api/DNV.Domain.Seedwork.html": {
    "href": "api/DNV.Domain.Seedwork.html",
    "title": "Namespace DNV.Domain.Seedwork",
    "keywords": "Namespace DNV.Domain.Seedwork Classes Entity Enumeration<T> Event EventType ValueObject Interfaces IAggregateRoot IEventHandler<T>"
  },
  "api/DNV.OAuth.Abstractions.Constants.FlowTypeClaimValues.html": {
    "href": "api/DNV.OAuth.Abstractions.Constants.FlowTypeClaimValues.html",
    "title": "Class FlowTypeClaimValues",
    "keywords": "Class FlowTypeClaimValues Namespace DNV.OAuth.Abstractions.Constants Assembly DNV.OAuth.Abstractions.dll public class FlowTypeClaimValues Inheritance object FlowTypeClaimValues Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Fields ClientFlow public const string ClientFlow = \"client\" Field Value string UserFlow public const string UserFlow = \"user\" Field Value string"
  },
  "api/DNV.OAuth.Abstractions.Constants.TokenClaimTypes.html": {
    "href": "api/DNV.OAuth.Abstractions.Constants.TokenClaimTypes.html",
    "title": "Class TokenClaimTypes",
    "keywords": "Class TokenClaimTypes Namespace DNV.OAuth.Abstractions.Constants Assembly DNV.OAuth.Abstractions.dll public class TokenClaimTypes Inheritance object TokenClaimTypes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Fields AppId public const string AppId = \"appid\" Field Value string FlowType public const string FlowType = \"flowtype\" Field Value string RequestParty public const string RequestParty = \"reqpty\" Field Value string Version public const string Version = \"ver\" Field Value string"
  },
  "api/DNV.OAuth.Abstractions.Constants.html": {
    "href": "api/DNV.OAuth.Abstractions.Constants.html",
    "title": "Namespace DNV.OAuth.Abstractions.Constants",
    "keywords": "Namespace DNV.OAuth.Abstractions.Constants Classes FlowTypeClaimValues TokenClaimTypes"
  },
  "api/DNV.OAuth.Abstractions.IClientApp.html": {
    "href": "api/DNV.OAuth.Abstractions.IClientApp.html",
    "title": "Interface IClientApp",
    "keywords": "Interface IClientApp Namespace DNV.OAuth.Abstractions Assembly DNV.OAuth.Abstractions.dll public interface IClientApp Extension Methods Throws.IfNull<T>(T, string?) Methods AcquireTokenByAuthorizationCode(string, string?) Attempts to authenticate using account retrieved from the specified context by calling AcquireTokenByAuthorizationCode(IEnumerable<string>, string). Task<AuthenticationResult> AcquireTokenByAuthorizationCode(string authCode, string? codeVerifier = null) Parameters authCode string codeVerifier string Returns Task<AuthenticationResult> Authentication result containing a token for the requested scopes. AcquireTokenForClient() Attempts to authenticate using client credentials by calling AcquireTokenForClient(IEnumerable<string>). Task<AuthenticationResult> AcquireTokenForClient() Returns Task<AuthenticationResult> Authentication result containing a token. AcquireTokenSilent(ClaimsPrincipal) Attempts to authenticate using account retrieved from the ClaimsPrincipal by calling AcquireTokenSilent(IEnumerable<string>, string). Task<AuthenticationResult> AcquireTokenSilent(ClaimsPrincipal user) Parameters user ClaimsPrincipal Returns Task<AuthenticationResult> Authentication result containing a token. ClearUserTokenCache(ClaimsPrincipal) Removes all tokens in the cache for the account retrieved from the specified ClaimsPrincipal. Task ClearUserTokenCache(ClaimsPrincipal user) Parameters user ClaimsPrincipal Returns Task Execute(Func<Task<AuthenticationResult>>) Internal method only for unit test visibility. Task<AuthenticationResult> Execute(Func<Task<AuthenticationResult>> func) Parameters func Func<Task<AuthenticationResult>> Returns Task<AuthenticationResult> GetAccount(ClaimsPrincipal) Gets the IAccount by its user principal among the accounts available in the token cache. Task<IAccount> GetAccount(ClaimsPrincipal user) Parameters user ClaimsPrincipal Returns Task<IAccount>"
  },
  "api/DNV.OAuth.Abstractions.IClientAppBuilder.html": {
    "href": "api/DNV.OAuth.Abstractions.IClientAppBuilder.html",
    "title": "Interface IClientAppBuilder",
    "keywords": "Interface IClientAppBuilder Namespace DNV.OAuth.Abstractions Assembly DNV.OAuth.Abstractions.dll public interface IClientAppBuilder Extension Methods Throws.IfNull<T>(T, string?) Methods Build(OAuth2Options) IClientApp Build(OAuth2Options options) Parameters options OAuth2Options Returns IClientApp"
  },
  "api/DNV.OAuth.Abstractions.ITokenCacheProvider.html": {
    "href": "api/DNV.OAuth.Abstractions.ITokenCacheProvider.html",
    "title": "Interface ITokenCacheProvider",
    "keywords": "Interface ITokenCacheProvider Namespace DNV.OAuth.Abstractions Assembly DNV.OAuth.Abstractions.dll public interface ITokenCacheProvider Extension Methods Throws.IfNull<T>(T, string?) Methods ClearAsync(string) Task ClearAsync(string identifier) Parameters identifier string Returns Task InitializeAsync(ITokenCache) Task InitializeAsync(ITokenCache tokenCache) Parameters tokenCache ITokenCache Returns Task"
  },
  "api/DNV.OAuth.Abstractions.OAuth2Options.html": {
    "href": "api/DNV.OAuth.Abstractions.OAuth2Options.html",
    "title": "Class OAuth2Options",
    "keywords": "Class OAuth2Options Namespace DNV.OAuth.Abstractions Assembly DNV.OAuth.Abstractions.dll public class OAuth2Options Inheritance object OAuth2Options Derived OidcOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties Authority Gets or sets the Authority to use when making OpenIdConnect calls. public string Authority { get; set; } Property Value string Remarks v1 https://login.microsoftonline.com/a68572e3-63ce-4bc1-acdc-b64943502e9d https://login.veracity.com/tfp/a68572e3-63ce-4bc1-acdc-b64943502e9d/b2c_1a_signinwithadfsidp (don't use it) v2 https://login.microsoftonline.com/a68572e3-63ce-4bc1-acdc-b64943502e9d/v2.0 https://login.veracity.com/tfp/a68572e3-63ce-4bc1-acdc-b64943502e9d/b2c_1a_signinwithadfsidp/v2.0 (by default) path segment 'tfp' is required for MSAL, it is obsoleted and might be removed in the future. CallbackPath The request path within the application's base path where the user-agent will be returned. The middleware will process this request when it arrives. public string CallbackPath { get; set; } Property Value string ClientId Gets or sets the 'client_id'. public string ClientId { get; set; } Property Value string ClientSecret Gets or sets the 'client_secret'. public string ClientSecret { get; set; } Property Value string Resource Gets or sets the resource for v1 only. public string Resource { get; set; } Property Value string Scopes Gets or sets the list of permissions for requests. public string[] Scopes { get; set; } Property Value string[] Methods Clone() public OAuth2Options Clone() Returns OAuth2Options"
  },
  "api/DNV.OAuth.Abstractions.html": {
    "href": "api/DNV.OAuth.Abstractions.html",
    "title": "Namespace DNV.OAuth.Abstractions",
    "keywords": "Namespace DNV.OAuth.Abstractions Classes OAuth2Options Interfaces IClientApp IClientAppBuilder ITokenCacheProvider"
  },
  "api/DNV.OAuth.Api.HttpClient.Exceptions.ClientConfigurationNotFoundException.html": {
    "href": "api/DNV.OAuth.Api.HttpClient.Exceptions.ClientConfigurationNotFoundException.html",
    "title": "Class ClientConfigurationNotFoundException",
    "keywords": "Class ClientConfigurationNotFoundException Namespace DNV.OAuth.Api.HttpClient.Exceptions Assembly DNV.OAuth.Api.HttpClient.dll [Serializable] public sealed class ClientConfigurationNotFoundException : Exception, ISerializable Inheritance object Exception ClientConfigurationNotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Extension Methods Throws.IfNull<T>(T, string?) Constructors ClientConfigurationNotFoundException() public ClientConfigurationNotFoundException()"
  },
  "api/DNV.OAuth.Api.HttpClient.Exceptions.InvalidCredentialFlowException.html": {
    "href": "api/DNV.OAuth.Api.HttpClient.Exceptions.InvalidCredentialFlowException.html",
    "title": "Class InvalidCredentialFlowException",
    "keywords": "Class InvalidCredentialFlowException Namespace DNV.OAuth.Api.HttpClient.Exceptions Assembly DNV.OAuth.Api.HttpClient.dll [Serializable] public sealed class InvalidCredentialFlowException : Exception, ISerializable Inheritance object Exception InvalidCredentialFlowException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Extension Methods Throws.IfNull<T>(T, string?) Constructors InvalidCredentialFlowException(OAuthCredentialFlow) public InvalidCredentialFlowException(OAuthCredentialFlow credentialFlow) Parameters credentialFlow OAuthCredentialFlow"
  },
  "api/DNV.OAuth.Api.HttpClient.Exceptions.MissingTokenException.html": {
    "href": "api/DNV.OAuth.Api.HttpClient.Exceptions.MissingTokenException.html",
    "title": "Class MissingTokenException",
    "keywords": "Class MissingTokenException Namespace DNV.OAuth.Api.HttpClient.Exceptions Assembly DNV.OAuth.Api.HttpClient.dll [Serializable] public class MissingTokenException : Exception, ISerializable Inheritance object Exception MissingTokenException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Throws.IfNull<T>(T, string?) Constructors MissingTokenException() public MissingTokenException()"
  },
  "api/DNV.OAuth.Api.HttpClient.Exceptions.html": {
    "href": "api/DNV.OAuth.Api.HttpClient.Exceptions.html",
    "title": "Namespace DNV.OAuth.Api.HttpClient.Exceptions",
    "keywords": "Namespace DNV.OAuth.Api.HttpClient.Exceptions Classes ClientConfigurationNotFoundException InvalidCredentialFlowException MissingTokenException"
  },
  "api/DNV.OAuth.Api.HttpClient.Extensions.HttpClientFactoryExtensions.html": {
    "href": "api/DNV.OAuth.Api.HttpClient.Extensions.HttpClientFactoryExtensions.html",
    "title": "Class HttpClientFactoryExtensions",
    "keywords": "Class HttpClientFactoryExtensions Namespace DNV.OAuth.Api.HttpClient.Extensions Assembly DNV.OAuth.Api.HttpClient.dll public static class HttpClientFactoryExtensions Inheritance object HttpClientFactoryExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateWithClientCredentialFlow(IHttpClientFactory, string) Creates and configures a HttpClient using configuration corresponding to the provided name that is authenticated by the Client Credential flow. public static HttpClient CreateWithClientCredentialFlow(this IHttpClientFactory factory, string name) Parameters factory IHttpClientFactory Http client factory available to create HttpClient instance. name string Value to match Name of configuration options for the created instance. Returns HttpClient CreateWithUserCredentialFlow(IHttpClientFactory, string) Creates and configures a HttpClient using configuration corresponding to the provided name that is authenticated by the User Credential flow. public static HttpClient CreateWithUserCredentialFlow(this IHttpClientFactory factory, string name) Parameters factory IHttpClientFactory Http client factory available to create HttpClient instance. name string Value to match Name of configuration options for the created instance. Returns HttpClient"
  },
  "api/DNV.OAuth.Api.HttpClient.Extensions.OAuthHttpClientExtensions.html": {
    "href": "api/DNV.OAuth.Api.HttpClient.Extensions.OAuthHttpClientExtensions.html",
    "title": "Class OAuthHttpClientExtensions",
    "keywords": "Class OAuthHttpClientExtensions Namespace DNV.OAuth.Api.HttpClient.Extensions Assembly DNV.OAuth.Api.HttpClient.dll public static class OAuthHttpClientExtensions Inheritance object OAuthHttpClientExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddOAuthHttpClient(IServiceCollection, OAuthHttpClientOptions, Action<IHttpClientBuilder>?, Action<IServiceProvider, HttpClient>?, Action<DistributedCacheEntryOptions>?) public static IServiceCollection AddOAuthHttpClient(this IServiceCollection services, OAuthHttpClientOptions option, Action<IHttpClientBuilder>? configBuilderAction = null, Action<IServiceProvider, HttpClient>? clientConfigAction = null, Action<DistributedCacheEntryOptions>? cacheConfigAction = null) Parameters services IServiceCollection option OAuthHttpClientOptions configBuilderAction Action<IHttpClientBuilder> clientConfigAction Action<IServiceProvider, HttpClient> cacheConfigAction Action<DistributedCacheEntryOptions> Returns IServiceCollection AddOAuthHttpClientHandler(IHttpClientBuilder, OAuthHttpClientOptions, Action<DistributedCacheEntryOptions>?) public static IHttpClientBuilder AddOAuthHttpClientHandler(this IHttpClientBuilder builder, OAuthHttpClientOptions options, Action<DistributedCacheEntryOptions>? cacheConfigAction = null) Parameters builder IHttpClientBuilder options OAuthHttpClientOptions cacheConfigAction Action<DistributedCacheEntryOptions> Returns IHttpClientBuilder Exceptions ArgumentOutOfRangeException AddOAuthHttpClients(IServiceCollection, Action<ICollection<OAuthHttpClientOptions>>, Action<IHttpClientBuilder>?, Action<IServiceProvider, HttpClient>?, Action<DistributedCacheEntryOptions>?) public static IServiceCollection AddOAuthHttpClients(this IServiceCollection services, Action<ICollection<OAuthHttpClientOptions>> optionsConfigAction, Action<IHttpClientBuilder>? configBuilderAction = null, Action<IServiceProvider, HttpClient>? clientConfigAction = null, Action<DistributedCacheEntryOptions>? cacheConfigAction = null) Parameters services IServiceCollection optionsConfigAction Action<ICollection<OAuthHttpClientOptions>> configBuilderAction Action<IHttpClientBuilder> clientConfigAction Action<IServiceProvider, HttpClient> cacheConfigAction Action<DistributedCacheEntryOptions> Returns IServiceCollection AddOAuthHttpClients(IServiceCollection, IEnumerable<OAuthHttpClientOptions>, Action<IHttpClientBuilder>?, Action<IServiceProvider, HttpClient>?, Action<DistributedCacheEntryOptions>?) public static IServiceCollection AddOAuthHttpClients(this IServiceCollection services, IEnumerable<OAuthHttpClientOptions> options, Action<IHttpClientBuilder>? configBuilderAction = null, Action<IServiceProvider, HttpClient>? clientConfigAction = null, Action<DistributedCacheEntryOptions>? cacheConfigAction = null) Parameters services IServiceCollection options IEnumerable<OAuthHttpClientOptions> configBuilderAction Action<IHttpClientBuilder> clientConfigAction Action<IServiceProvider, HttpClient> cacheConfigAction Action<DistributedCacheEntryOptions> Returns IServiceCollection GetAllOAuthClientOptions(IServiceProvider, string) public static IEnumerable<OAuthHttpClientOptions> GetAllOAuthClientOptions(this IServiceProvider serviceProvider, string name) Parameters serviceProvider IServiceProvider name string Returns IEnumerable<OAuthHttpClientOptions> GetOAuthClientOptions(IServiceProvider, string) public static OAuthHttpClientOptions GetOAuthClientOptions(this IServiceProvider serviceProvider, string name) Parameters serviceProvider IServiceProvider name string Returns OAuthHttpClientOptions"
  },
  "api/DNV.OAuth.Api.HttpClient.Extensions.OAuthHttpClientFactoryExtensions.html": {
    "href": "api/DNV.OAuth.Api.HttpClient.Extensions.OAuthHttpClientFactoryExtensions.html",
    "title": "Class OAuthHttpClientFactoryExtensions",
    "keywords": "Class OAuthHttpClientFactoryExtensions Namespace DNV.OAuth.Api.HttpClient.Extensions Assembly DNV.OAuth.Api.HttpClient.dll public static class OAuthHttpClientFactoryExtensions Inheritance object OAuthHttpClientFactoryExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddOAuthHttpClientFactory(IServiceCollection, Action<ICollection<OAuthHttpClientOptions>>) Adds an implementation of IHttpClientFactory to the IServiceCollection providing authenticated instances of HttpClient. public static IServiceCollection AddOAuthHttpClientFactory(this IServiceCollection services, Action<ICollection<OAuthHttpClientOptions>> configureOptions) Parameters services IServiceCollection The IServiceCollection to add the IHttpClientFactory instance to. configureOptions Action<ICollection<OAuthHttpClientOptions>> A method to manipulate the default options. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. AddOAuthHttpClientFactory(IServiceCollection, IEnumerable<OAuthHttpClientOptions>, Action<DistributedCacheEntryOptions>?) Adds an implementation of IHttpClientFactory to the IServiceCollection providing authenticated instances of HttpClient. public static IServiceCollection AddOAuthHttpClientFactory(this IServiceCollection services, IEnumerable<OAuthHttpClientOptions> options, Action<DistributedCacheEntryOptions>? cacheSetupAction = null) Parameters services IServiceCollection The IServiceCollection to add the IHttpClientFactory instance to. options IEnumerable<OAuthHttpClientOptions> A collection of configurations for the HttpClients produced by the factory. cacheSetupAction Action<DistributedCacheEntryOptions> Returns IServiceCollection The IServiceCollection so that additional calls can be chained."
  },
  "api/DNV.OAuth.Api.HttpClient.Extensions.html": {
    "href": "api/DNV.OAuth.Api.HttpClient.Extensions.html",
    "title": "Namespace DNV.OAuth.Api.HttpClient.Extensions",
    "keywords": "Namespace DNV.OAuth.Api.HttpClient.Extensions Classes HttpClientFactoryExtensions OAuthHttpClientExtensions OAuthHttpClientFactoryExtensions"
  },
  "api/DNV.OAuth.Api.HttpClient.OAuthCredentialFlow.html": {
    "href": "api/DNV.OAuth.Api.HttpClient.OAuthCredentialFlow.html",
    "title": "Enum OAuthCredentialFlow",
    "keywords": "Enum OAuthCredentialFlow Namespace DNV.OAuth.Api.HttpClient Assembly DNV.OAuth.Api.HttpClient.dll [JsonConverter(typeof(JsonStringEnumConverter))] public enum OAuthCredentialFlow Extension Methods Throws.IfNull<T>(T, string?) Fields [EnumMember(Value = \"client-credentials\")] ClientCredentials = 1 [EnumMember(Value = \"user-credentials\")] UserCredentials = 0"
  },
  "api/DNV.OAuth.Api.HttpClient.OAuthHttpClientOptions.html": {
    "href": "api/DNV.OAuth.Api.HttpClient.OAuthHttpClientOptions.html",
    "title": "Class OAuthHttpClientOptions",
    "keywords": "Class OAuthHttpClientOptions Namespace DNV.OAuth.Api.HttpClient Assembly DNV.OAuth.Api.HttpClient.dll public class OAuthHttpClientOptions Inheritance object OAuthHttpClientOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties BaseUri Gets or sets the route URI (Universal Resource Identifier) for the Web API the HTTP client instance will make requests to. public string BaseUri { get; set; } Property Value string Flow Gets or sets the default credential flow applied to requests by the HTTP client instance. public OAuthCredentialFlow Flow { get; set; } Property Value OAuthCredentialFlow Name Gets or sets a unique identifier for HTTP client instance which is used to retrieve it from the IOAuthHttpClientFactory. public string Name { get; set; } Property Value string OAuthClientOptions Gets or sets the Open Id Connect options to apply to authentication by the HTTP client instance. public OAuth2Options OAuthClientOptions { get; set; } Property Value OAuth2Options SubscriptionKey Gets or sets the subscription key (from API management) for the Web API the HTTP client instance will connect to. public string SubscriptionKey { get; set; } Property Value string Methods Bind(OAuthHttpClientOptions) public void Bind(OAuthHttpClientOptions options) Parameters options OAuthHttpClientOptions GetHttpClientName() public string GetHttpClientName() Returns string"
  },
  "api/DNV.OAuth.Api.HttpClient.html": {
    "href": "api/DNV.OAuth.Api.HttpClient.html",
    "title": "Namespace DNV.OAuth.Api.HttpClient",
    "keywords": "Namespace DNV.OAuth.Api.HttpClient Classes OAuthHttpClientOptions Enums OAuthCredentialFlow"
  },
  "api/DNV.OAuth.Core.Exceptions.MissingScopeException.html": {
    "href": "api/DNV.OAuth.Core.Exceptions.MissingScopeException.html",
    "title": "Class MissingScopeException",
    "keywords": "Class MissingScopeException Namespace DNV.OAuth.Core.Exceptions Assembly DNV.OAuth.Core.dll [Serializable] public class MissingScopeException : Exception, ISerializable Inheritance object Exception MissingScopeException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Throws.IfNull<T>(T, string?) Constructors MissingScopeException() public MissingScopeException()"
  },
  "api/DNV.OAuth.Core.Exceptions.TokenExpiredException.html": {
    "href": "api/DNV.OAuth.Core.Exceptions.TokenExpiredException.html",
    "title": "Class TokenExpiredException",
    "keywords": "Class TokenExpiredException Namespace DNV.OAuth.Core.Exceptions Assembly DNV.OAuth.Core.dll [Serializable] public sealed class TokenExpiredException : Exception, ISerializable Inheritance object Exception TokenExpiredException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Extension Methods Throws.IfNull<T>(T, string?) Constructors TokenExpiredException() public TokenExpiredException()"
  },
  "api/DNV.OAuth.Core.Exceptions.html": {
    "href": "api/DNV.OAuth.Core.Exceptions.html",
    "title": "Namespace DNV.OAuth.Core.Exceptions",
    "keywords": "Namespace DNV.OAuth.Core.Exceptions Classes MissingScopeException TokenExpiredException"
  },
  "api/DNV.OAuth.Core.MsalClientApp.html": {
    "href": "api/DNV.OAuth.Core.MsalClientApp.html",
    "title": "Class MsalClientApp",
    "keywords": "Class MsalClientApp Namespace DNV.OAuth.Core Assembly DNV.OAuth.Core.dll public class MsalClientApp : IClientApp Inheritance object MsalClientApp Implements IClientApp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors MsalClientApp(IConfidentialClientApplication, StringValues) public MsalClientApp(IConfidentialClientApplication confidentialClientApplication, StringValues scopes) Parameters confidentialClientApplication IConfidentialClientApplication scopes StringValues Methods AcquireTokenByAuthorizationCode(string, string?) Attempts to authenticate using account retrieved from the specified context by calling AcquireTokenByAuthorizationCode(IEnumerable<string>, string). public Task<AuthenticationResult> AcquireTokenByAuthorizationCode(string authCode, string? codeVerifier = null) Parameters authCode string codeVerifier string Returns Task<AuthenticationResult> Authentication result containing a token for the requested scopes. AcquireTokenForClient() Attempts to authenticate using client credentials by calling AcquireTokenForClient(IEnumerable<string>). public Task<AuthenticationResult> AcquireTokenForClient() Returns Task<AuthenticationResult> Authentication result containing a token. AcquireTokenSilent(ClaimsPrincipal) Attempts to authenticate using account retrieved from the ClaimsPrincipal by calling AcquireTokenSilent(IEnumerable<string>, string). public Task<AuthenticationResult> AcquireTokenSilent(ClaimsPrincipal user) Parameters user ClaimsPrincipal Returns Task<AuthenticationResult> Authentication result containing a token. ClearUserTokenCache(ClaimsPrincipal) Removes all tokens in the cache for the account retrieved from the specified ClaimsPrincipal. public Task ClearUserTokenCache(ClaimsPrincipal user) Parameters user ClaimsPrincipal Returns Task Execute(Func<Task<AuthenticationResult>>) Internal method only for unit test visibility. public virtual Task<AuthenticationResult> Execute(Func<Task<AuthenticationResult>> func) Parameters func Func<Task<AuthenticationResult>> Returns Task<AuthenticationResult> GetAccount(ClaimsPrincipal) Gets the IAccount by its user principal among the accounts available in the token cache. public virtual Task<IAccount> GetAccount(ClaimsPrincipal user) Parameters user ClaimsPrincipal Returns Task<IAccount>"
  },
  "api/DNV.OAuth.Core.MsalClientAppBuilder.html": {
    "href": "api/DNV.OAuth.Core.MsalClientAppBuilder.html",
    "title": "Class MsalClientAppBuilder",
    "keywords": "Class MsalClientAppBuilder Namespace DNV.OAuth.Core Assembly DNV.OAuth.Core.dll Provides a simple way to create IClientApp. public class MsalClientAppBuilder : IClientAppBuilder Inheritance object MsalClientAppBuilder Implements IClientAppBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors MsalClientAppBuilder(ITokenCacheProvider) public MsalClientAppBuilder(ITokenCacheProvider tokenCacheProvider) Parameters tokenCacheProvider ITokenCacheProvider Methods Build(OAuth2Options) Builds a IClientApp instance with giving OAuth2Options. public IClientApp Build(OAuth2Options options) Parameters options OAuth2Options Returns IClientApp"
  },
  "api/DNV.OAuth.Core.OAuthExtensions.html": {
    "href": "api/DNV.OAuth.Core.OAuthExtensions.html",
    "title": "Class OAuthExtensions",
    "keywords": "Class OAuthExtensions Namespace DNV.OAuth.Core Assembly DNV.OAuth.Core.dll public static class OAuthExtensions Inheritance object OAuthExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddOAuthCore(IServiceCollection, Action<DistributedCacheEntryOptions>?) Register OAuthCore required services to DI container. public static IServiceCollection AddOAuthCore(this IServiceCollection services, Action<DistributedCacheEntryOptions>? configAction = null) Parameters services IServiceCollection configAction Action<DistributedCacheEntryOptions> Returns IServiceCollection"
  },
  "api/DNV.OAuth.Core.TokenCache.TokenCacheProvider.html": {
    "href": "api/DNV.OAuth.Core.TokenCache.TokenCacheProvider.html",
    "title": "Class TokenCacheProvider",
    "keywords": "Class TokenCacheProvider Namespace DNV.OAuth.Core.TokenCache Assembly DNV.OAuth.Core.dll public class TokenCacheProvider : TokenCacheProviderBase, ITokenCacheProvider Inheritance object TokenCacheProviderBase TokenCacheProvider Implements ITokenCacheProvider Inherited Members TokenCacheProviderBase.InitializeAsync(ITokenCache) TokenCacheProviderBase.ClearAsync(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors TokenCacheProvider(IDistributedCache, IOptionsMonitor<DistributedCacheEntryOptions>) public TokenCacheProvider(IDistributedCache cache, IOptionsMonitor<DistributedCacheEntryOptions> cacheOptions) Parameters cache IDistributedCache cacheOptions IOptionsMonitor<DistributedCacheEntryOptions> TokenCacheProvider(IDistributedCache, IOptionsMonitor<DistributedCacheEntryOptions>, IDataProtectionProvider?) public TokenCacheProvider(IDistributedCache cache, IOptionsMonitor<DistributedCacheEntryOptions> cacheOptions, IDataProtectionProvider? dataProtectionProvider) Parameters cache IDistributedCache cacheOptions IOptionsMonitor<DistributedCacheEntryOptions> dataProtectionProvider IDataProtectionProvider Properties Cache protected override IDistributedCache Cache { get; } Property Value IDistributedCache CacheOptions protected override DistributedCacheEntryOptions CacheOptions { get; } Property Value DistributedCacheEntryOptions DataProtector protected IDataProtector? DataProtector { get; } Property Value IDataProtector Methods Protect(byte[]?) protected override byte[]? Protect(byte[]? bytes) Parameters bytes byte[] Returns byte[] Unprotect(byte[]?) protected override byte[]? Unprotect(byte[]? bytes) Parameters bytes byte[] Returns byte[]"
  },
  "api/DNV.OAuth.Core.TokenCache.TokenCacheProviderBase.html": {
    "href": "api/DNV.OAuth.Core.TokenCache.TokenCacheProviderBase.html",
    "title": "Class TokenCacheProviderBase",
    "keywords": "Class TokenCacheProviderBase Namespace DNV.OAuth.Core.TokenCache Assembly DNV.OAuth.Core.dll public abstract class TokenCacheProviderBase : ITokenCacheProvider Inheritance object TokenCacheProviderBase Implements ITokenCacheProvider Derived TokenCacheProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties Cache protected abstract IDistributedCache Cache { get; } Property Value IDistributedCache CacheOptions protected abstract DistributedCacheEntryOptions CacheOptions { get; } Property Value DistributedCacheEntryOptions Methods ClearAsync(string) public virtual Task ClearAsync(string identifier) Parameters identifier string Returns Task InitializeAsync(ITokenCache) public virtual Task InitializeAsync(ITokenCache tokenCache) Parameters tokenCache ITokenCache Returns Task Protect(byte[]?) protected abstract byte[]? Protect(byte[]? bytes) Parameters bytes byte[] Returns byte[] Unprotect(byte[]?) protected abstract byte[]? Unprotect(byte[]? bytes) Parameters bytes byte[] Returns byte[]"
  },
  "api/DNV.OAuth.Core.TokenCache.html": {
    "href": "api/DNV.OAuth.Core.TokenCache.html",
    "title": "Namespace DNV.OAuth.Core.TokenCache",
    "keywords": "Namespace DNV.OAuth.Core.TokenCache Classes TokenCacheProvider TokenCacheProviderBase"
  },
  "api/DNV.OAuth.Core.TokenValidator.DNVTokenValidator.html": {
    "href": "api/DNV.OAuth.Core.TokenValidator.DNVTokenValidator.html",
    "title": "Class DNVTokenValidator",
    "keywords": "Class DNVTokenValidator Namespace DNV.OAuth.Core.TokenValidator Assembly DNV.OAuth.Core.dll public class DNVTokenValidator : JwtSecurityTokenHandler, ISecurityTokenValidator Inheritance object TokenHandler SecurityTokenHandler JwtSecurityTokenHandler DNVTokenValidator Implements ISecurityTokenValidator Inherited Members JwtSecurityTokenHandler.DefaultInboundClaimTypeMap JwtSecurityTokenHandler.DefaultMapInboundClaims JwtSecurityTokenHandler.DefaultOutboundClaimTypeMap JwtSecurityTokenHandler.DefaultInboundClaimFilter JwtSecurityTokenHandler.DefaultOutboundAlgorithmMap JwtSecurityTokenHandler.CanReadToken(string) JwtSecurityTokenHandler.CreateEncodedJwt(SecurityTokenDescriptor) JwtSecurityTokenHandler.CreateEncodedJwt(string, string, ClaimsIdentity, DateTime?, DateTime?, DateTime?, SigningCredentials) JwtSecurityTokenHandler.CreateEncodedJwt(string, string, ClaimsIdentity, DateTime?, DateTime?, DateTime?, SigningCredentials, EncryptingCredentials) JwtSecurityTokenHandler.CreateEncodedJwt(string, string, ClaimsIdentity, DateTime?, DateTime?, DateTime?, SigningCredentials, EncryptingCredentials, IDictionary<string, object>) JwtSecurityTokenHandler.CreateJwtSecurityToken(SecurityTokenDescriptor) JwtSecurityTokenHandler.CreateJwtSecurityToken(string, string, ClaimsIdentity, DateTime?, DateTime?, DateTime?, SigningCredentials, EncryptingCredentials) JwtSecurityTokenHandler.CreateJwtSecurityToken(string, string, ClaimsIdentity, DateTime?, DateTime?, DateTime?, SigningCredentials, EncryptingCredentials, IDictionary<string, object>) JwtSecurityTokenHandler.CreateJwtSecurityToken(string, string, ClaimsIdentity, DateTime?, DateTime?, DateTime?, SigningCredentials) JwtSecurityTokenHandler.CreateToken(SecurityTokenDescriptor) JwtSecurityTokenHandler.ReadJwtToken(string) JwtSecurityTokenHandler.ReadToken(string) JwtSecurityTokenHandler.ReadToken(XmlReader, TokenValidationParameters) JwtSecurityTokenHandler.ValidateTokenPayload(JwtSecurityToken, TokenValidationParameters) JwtSecurityTokenHandler.WriteToken(SecurityToken) JwtSecurityTokenHandler.ValidateSignature(string, TokenValidationParameters) JwtSecurityTokenHandler.CreateClaimsIdentity(JwtSecurityToken, string, TokenValidationParameters) JwtSecurityTokenHandler.CreateActorValue(ClaimsIdentity) JwtSecurityTokenHandler.ValidateAudience(IEnumerable<string>, JwtSecurityToken, TokenValidationParameters) JwtSecurityTokenHandler.ValidateLifetime(DateTime?, DateTime?, JwtSecurityToken, TokenValidationParameters) JwtSecurityTokenHandler.ValidateIssuer(string, JwtSecurityToken, TokenValidationParameters) JwtSecurityTokenHandler.ValidateTokenReplay(DateTime?, string, TokenValidationParameters) JwtSecurityTokenHandler.ResolveIssuerSigningKey(string, JwtSecurityToken, TokenValidationParameters) JwtSecurityTokenHandler.ResolveTokenDecryptionKey(string, JwtSecurityToken, TokenValidationParameters) JwtSecurityTokenHandler.DecryptToken(JwtSecurityToken, TokenValidationParameters) JwtSecurityTokenHandler.ValidateIssuerSecurityKey(SecurityKey, JwtSecurityToken, TokenValidationParameters) JwtSecurityTokenHandler.WriteToken(XmlWriter, SecurityToken) JwtSecurityTokenHandler.ValidateTokenAsync(string, TokenValidationParameters) JwtSecurityTokenHandler.MapInboundClaims JwtSecurityTokenHandler.InboundClaimTypeMap JwtSecurityTokenHandler.OutboundClaimTypeMap JwtSecurityTokenHandler.OutboundAlgorithmMap JwtSecurityTokenHandler.InboundClaimFilter JwtSecurityTokenHandler.ShortClaimTypeProperty JwtSecurityTokenHandler.JsonClaimTypeProperty JwtSecurityTokenHandler.CanValidateToken JwtSecurityTokenHandler.CanWriteToken JwtSecurityTokenHandler.TokenType SecurityTokenHandler.CreateSecurityTokenReference(SecurityToken, bool) SecurityTokenHandler.CanReadToken(XmlReader) SecurityTokenHandler.ReadToken(XmlReader) SecurityTokenHandler.ValidateToken(XmlReader, TokenValidationParameters, out SecurityToken) TokenHandler.DefaultTokenLifetimeInMinutes TokenHandler.ValidateTokenAsync(SecurityToken, TokenValidationParameters) TokenHandler.MaximumTokenSizeInBytes TokenHandler.SetDefaultTimesOnTokenCreation TokenHandler.TokenLifetimeInMinutes object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors DNVTokenValidator(Func<IEnumerable<Claim>, (bool Succeeded, string FailureReason)>?) public DNVTokenValidator(Func<IEnumerable<Claim>, (bool Succeeded, string FailureReason)>? customClaimsValidator = null) Parameters customClaimsValidator Func<IEnumerable<Claim>, (bool Succeeded, string FailureReason)> Methods ExtendIdentity(ClaimsIdentity) protected virtual void ExtendIdentity(ClaimsIdentity identity) Parameters identity ClaimsIdentity ValidateToken(string, TokenValidationParameters, out SecurityToken) public override ClaimsPrincipal ValidateToken(string token, TokenValidationParameters validationParameters, out SecurityToken validatedToken) Parameters token string validationParameters TokenValidationParameters validatedToken SecurityToken Returns ClaimsPrincipal Exceptions SecurityTokenValidationException"
  },
  "api/DNV.OAuth.Core.TokenValidator.html": {
    "href": "api/DNV.OAuth.Core.TokenValidator.html",
    "title": "Namespace DNV.OAuth.Core.TokenValidator",
    "keywords": "Namespace DNV.OAuth.Core.TokenValidator Classes DNVTokenValidator"
  },
  "api/DNV.OAuth.Core.html": {
    "href": "api/DNV.OAuth.Core.html",
    "title": "Namespace DNV.OAuth.Core",
    "keywords": "Namespace DNV.OAuth.Core Classes MsalClientApp MsalClientAppBuilder Provides a simple way to create IClientApp. OAuthExtensions"
  },
  "api/DNV.OAuth.Web.Extensions.Cookie.CookieAuthenticationExtensions.html": {
    "href": "api/DNV.OAuth.Web.Extensions.Cookie.CookieAuthenticationExtensions.html",
    "title": "Class CookieAuthenticationExtensions",
    "keywords": "Class CookieAuthenticationExtensions Namespace DNV.OAuth.Web.Extensions.Cookie Assembly DNV.OAuth.Web.Extensions.dll public static class CookieAuthenticationExtensions Inheritance object CookieAuthenticationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SuppressOAuthRedirectForApi(CookieAuthenticationOptions, Func<HttpRequest, bool>?) public static CookieAuthenticationOptions SuppressOAuthRedirectForApi(this CookieAuthenticationOptions options, Func<HttpRequest, bool>? apiPredicate = null) Parameters options CookieAuthenticationOptions apiPredicate Func<HttpRequest, bool> Returns CookieAuthenticationOptions Exceptions ArgumentNullException SuppressOAuthRedirectForApi(IServiceCollection, Func<HttpRequest, bool>?) public static IServiceCollection SuppressOAuthRedirectForApi(this IServiceCollection services, Func<HttpRequest, bool>? apiPredicate = null) Parameters services IServiceCollection apiPredicate Func<HttpRequest, bool> Returns IServiceCollection Exceptions ArgumentNullException"
  },
  "api/DNV.OAuth.Web.Extensions.Cookie.html": {
    "href": "api/DNV.OAuth.Web.Extensions.Cookie.html",
    "title": "Namespace DNV.OAuth.Web.Extensions.Cookie",
    "keywords": "Namespace DNV.OAuth.Web.Extensions.Cookie Classes CookieAuthenticationExtensions"
  },
  "api/DNV.OAuth.Web.Extensions.Mfa.MfaExtensions.html": {
    "href": "api/DNV.OAuth.Web.Extensions.Mfa.MfaExtensions.html",
    "title": "Class MfaExtensions",
    "keywords": "Class MfaExtensions Namespace DNV.OAuth.Web.Extensions.Mfa Assembly DNV.OAuth.Web.Extensions.dll public static class MfaExtensions Inheritance object MfaExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddMfaSupport(OidcOptions, Func<HttpRequest, bool>?) public static OidcOptions AddMfaSupport(this OidcOptions options, Func<HttpRequest, bool>? mfaPredict = null) Parameters options OidcOptions mfaPredict Func<HttpRequest, bool> Returns OidcOptions Exceptions ArgumentNullException ChallengeForMfaAsync(HttpContext, string) public static Task ChallengeForMfaAsync(this HttpContext ctx, string redirectUrl) Parameters ctx HttpContext redirectUrl string Returns Task SignedInWithMfa(HttpContext) public static bool SignedInWithMfa(this HttpContext ctx) Parameters ctx HttpContext Returns bool"
  },
  "api/DNV.OAuth.Web.Extensions.Mfa.html": {
    "href": "api/DNV.OAuth.Web.Extensions.Mfa.html",
    "title": "Namespace DNV.OAuth.Web.Extensions.Mfa",
    "keywords": "Namespace DNV.OAuth.Web.Extensions.Mfa Classes MfaExtensions"
  },
  "api/DNV.OAuth.Web.Extensions.Multitenancy.MtCookieBuilder.html": {
    "href": "api/DNV.OAuth.Web.Extensions.Multitenancy.MtCookieBuilder.html",
    "title": "Class MtCookieBuilder",
    "keywords": "Class MtCookieBuilder Namespace DNV.OAuth.Web.Extensions.Multitenancy Assembly DNV.OAuth.Web.Extensions.dll public class MtCookieBuilder : CookieBuilder Inheritance object CookieBuilder MtCookieBuilder Inherited Members CookieBuilder.Build(HttpContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors MtCookieBuilder(CookieBuilder, IHttpContextAccessor, OpenIdConnectOptions) public MtCookieBuilder(CookieBuilder decoratedOrigin, IHttpContextAccessor httpContextAccessor, OpenIdConnectOptions oidcOptions) Parameters decoratedOrigin CookieBuilder httpContextAccessor IHttpContextAccessor oidcOptions OpenIdConnectOptions Properties Domain The domain to associate the cookie with. public override string? Domain { get; set; } Property Value string Remarks Determines the value that will set on Domain. Expiration Gets or sets the lifespan of a cookie. public override TimeSpan? Expiration { get; set; } Property Value TimeSpan? HttpOnly Indicates whether a cookie is accessible by client-side script. public override bool HttpOnly { get; set; } Property Value bool Remarks Determines the value that will set on HttpOnly. IsEssential Indicates if this cookie is essential for the application to function correctly. If true then consent policy checks may be bypassed. The default value is false. public override bool IsEssential { get; set; } Property Value bool MaxAge Gets or sets the max-age for the cookie. public override TimeSpan? MaxAge { get; set; } Property Value TimeSpan? Name The name of the cookie. public override string? Name { get; set; } Property Value string Path The cookie path. public override string? Path { get; set; } Property Value string Remarks Determines the value that will set on Path. SameSite The SameSite attribute of the cookie. The default value is Unspecified public override SameSiteMode SameSite { get; set; } Property Value SameSiteMode Remarks Determines the value that will set on SameSite. SecurePolicy The policy that will be used to determine Secure. This is determined from the HttpContext passed to Build(HttpContext, DateTimeOffset). public override CookieSecurePolicy SecurePolicy { get; set; } Property Value CookieSecurePolicy Methods Build(HttpContext, DateTimeOffset) Creates the cookie options from the given context with an expiration based on expiresFrom and Expiration. public override CookieOptions Build(HttpContext context, DateTimeOffset expiresFrom) Parameters context HttpContext The HttpContext. expiresFrom DateTimeOffset The time to use as the base for computing Expires. Returns CookieOptions The cookie options."
  },
  "api/DNV.OAuth.Web.Extensions.Multitenancy.MtExtensions.html": {
    "href": "api/DNV.OAuth.Web.Extensions.Multitenancy.MtExtensions.html",
    "title": "Class MtExtensions",
    "keywords": "Class MtExtensions Namespace DNV.OAuth.Web.Extensions.Multitenancy Assembly DNV.OAuth.Web.Extensions.dll public static class MtExtensions Inheritance object MtExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddMultitenantAuthentication(AuthenticationBuilder, Action<CookieAuthenticationOptions, HttpContext>?) public static AuthenticationBuilder AddMultitenantAuthentication(this AuthenticationBuilder builder, Action<CookieAuthenticationOptions, HttpContext>? configAction = null) Parameters builder AuthenticationBuilder configAction Action<CookieAuthenticationOptions, HttpContext> Returns AuthenticationBuilder UseMultitenancy(IApplicationBuilder, Func<PathString, bool>?) public static IApplicationBuilder UseMultitenancy(this IApplicationBuilder appBuilder, Func<PathString, bool>? shouldSkip = null) Parameters appBuilder IApplicationBuilder shouldSkip Func<PathString, bool> Returns IApplicationBuilder"
  },
  "api/DNV.OAuth.Web.Extensions.Multitenancy.html": {
    "href": "api/DNV.OAuth.Web.Extensions.Multitenancy.html",
    "title": "Namespace DNV.OAuth.Web.Extensions.Multitenancy",
    "keywords": "Namespace DNV.OAuth.Web.Extensions.Multitenancy Classes MtCookieBuilder MtExtensions"
  },
  "api/DNV.OAuth.Web.Extensions.Policy.Constants.TokenClaimTypes.html": {
    "href": "api/DNV.OAuth.Web.Extensions.Policy.Constants.TokenClaimTypes.html",
    "title": "Class TokenClaimTypes",
    "keywords": "Class TokenClaimTypes Namespace DNV.OAuth.Web.Extensions.Policy.Constants Assembly DNV.OAuth.Web.Extensions.dll public class TokenClaimTypes Inheritance object TokenClaimTypes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Fields VeracityPolicyValidated public const string VeracityPolicyValidated = \"vplcvdt\" Field Value string"
  },
  "api/DNV.OAuth.Web.Extensions.Policy.Constants.html": {
    "href": "api/DNV.OAuth.Web.Extensions.Policy.Constants.html",
    "title": "Namespace DNV.OAuth.Web.Extensions.Policy.Constants",
    "keywords": "Namespace DNV.OAuth.Web.Extensions.Policy.Constants Classes TokenClaimTypes"
  },
  "api/DNV.OAuth.Web.Extensions.Policy.IPolicyValidator.html": {
    "href": "api/DNV.OAuth.Web.Extensions.Policy.IPolicyValidator.html",
    "title": "Interface IPolicyValidator",
    "keywords": "Interface IPolicyValidator Namespace DNV.OAuth.Web.Extensions.Policy Assembly DNV.OAuth.Web.Extensions.dll public interface IPolicyValidator Extension Methods Throws.IfNull<T>(T, string?) Methods Validate<TOptions>(RemoteAuthenticationContext<TOptions>, PolicyValidationOptions) Task<bool> Validate<TOptions>(RemoteAuthenticationContext<TOptions> ctx, PolicyValidationOptions options) where TOptions : AuthenticationSchemeOptions Parameters ctx RemoteAuthenticationContext<TOptions> options PolicyValidationOptions Returns Task<bool> Type Parameters TOptions"
  },
  "api/DNV.OAuth.Web.Extensions.Policy.IPolicyViolationHandler.html": {
    "href": "api/DNV.OAuth.Web.Extensions.Policy.IPolicyViolationHandler.html",
    "title": "Interface IPolicyViolationHandler",
    "keywords": "Interface IPolicyViolationHandler Namespace DNV.OAuth.Web.Extensions.Policy Assembly DNV.OAuth.Web.Extensions.dll public interface IPolicyViolationHandler Extension Methods Throws.IfNull<T>(T, string?) Methods HandleCompanyAffiliationViolated<TOptions>(RemoteAuthenticationContext<TOptions>, PolicyValidationResult) Task HandleCompanyAffiliationViolated<TOptions>(RemoteAuthenticationContext<TOptions> ctx, PolicyValidationResult validationResult) where TOptions : AuthenticationSchemeOptions Parameters ctx RemoteAuthenticationContext<TOptions> validationResult PolicyValidationResult Returns Task Type Parameters TOptions HandleServiceSubscriptionViolated<TOptions>(RemoteAuthenticationContext<TOptions>, PolicyValidationResult) Task HandleServiceSubscriptionViolated<TOptions>(RemoteAuthenticationContext<TOptions> ctx, PolicyValidationResult validationResult) where TOptions : AuthenticationSchemeOptions Parameters ctx RemoteAuthenticationContext<TOptions> validationResult PolicyValidationResult Returns Task Type Parameters TOptions HandleTermsAndConditionsViolated<TOptions>(RemoteAuthenticationContext<TOptions>, PolicyValidationResult) Task HandleTermsAndConditionsViolated<TOptions>(RemoteAuthenticationContext<TOptions> ctx, PolicyValidationResult validationResult) where TOptions : AuthenticationSchemeOptions Parameters ctx RemoteAuthenticationContext<TOptions> validationResult PolicyValidationResult Returns Task Type Parameters TOptions"
  },
  "api/DNV.OAuth.Web.Extensions.Policy.PolicyExtensions.html": {
    "href": "api/DNV.OAuth.Web.Extensions.Policy.PolicyExtensions.html",
    "title": "Class PolicyExtensions",
    "keywords": "Class PolicyExtensions Namespace DNV.OAuth.Web.Extensions.Policy Assembly DNV.OAuth.Web.Extensions.dll public static class PolicyExtensions Inheritance object PolicyExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddPolicyValidation(AuthenticationBuilder, PolicyValidationOptions) public static AuthenticationBuilder AddPolicyValidation(this AuthenticationBuilder builder, PolicyValidationOptions policyValidationOptions) Parameters builder AuthenticationBuilder policyValidationOptions PolicyValidationOptions Returns AuthenticationBuilder Exceptions ArgumentNullException AddPolicyValidation(AuthenticationBuilder, Action<PolicyValidationOptions>) public static AuthenticationBuilder AddPolicyValidation(this AuthenticationBuilder builder, Action<PolicyValidationOptions> configAction) Parameters builder AuthenticationBuilder configAction Action<PolicyValidationOptions> Returns AuthenticationBuilder Exceptions ArgumentNullException"
  },
  "api/DNV.OAuth.Web.Extensions.Policy.PolicyValidationMode.html": {
    "href": "api/DNV.OAuth.Web.Extensions.Policy.PolicyValidationMode.html",
    "title": "Enum PolicyValidationMode",
    "keywords": "Enum PolicyValidationMode Namespace DNV.OAuth.Web.Extensions.Policy Assembly DNV.OAuth.Web.Extensions.dll [Flags] public enum PolicyValidationMode Extension Methods Throws.IfNull<T>(T, string?) Fields All = PlatformAndService | ServiceSubscription PlatformAndService = 2 PlatformTermsAndCondition = 1 ServiceSubscription = 4 must be used together with PlatformTermsAndCondition or PlatformAndService"
  },
  "api/DNV.OAuth.Web.Extensions.Policy.PolicyValidationOptions.html": {
    "href": "api/DNV.OAuth.Web.Extensions.Policy.PolicyValidationOptions.html",
    "title": "Class PolicyValidationOptions",
    "keywords": "Class PolicyValidationOptions Namespace DNV.OAuth.Web.Extensions.Policy Assembly DNV.OAuth.Web.Extensions.dll public class PolicyValidationOptions Inheritance object PolicyValidationOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Fields VeracityDefaultPolicy public const string VeracityDefaultPolicy = \"VeracityDefaultPolicy\" Field Value string Properties AddAsDefaultPolicy public bool AddAsDefaultPolicy { get; set; } Property Value bool AuthorizationPolicyName public string AuthorizationPolicyName { get; set; } Property Value string GetReturnUrl public Func<HttpContext, string, string>? GetReturnUrl { get; set; } Property Value Func<HttpContext, string, string> PolicyValidationMode public PolicyValidationMode PolicyValidationMode { get; set; } Property Value PolicyValidationMode ServiceId public string? ServiceId { get; set; } Property Value string VeracityPolicyApiConfigName public string? VeracityPolicyApiConfigName { get; set; } Property Value string"
  },
  "api/DNV.OAuth.Web.Extensions.Policy.html": {
    "href": "api/DNV.OAuth.Web.Extensions.Policy.html",
    "title": "Namespace DNV.OAuth.Web.Extensions.Policy",
    "keywords": "Namespace DNV.OAuth.Web.Extensions.Policy Classes PolicyExtensions PolicyValidationOptions Interfaces IPolicyValidator IPolicyViolationHandler Enums PolicyValidationMode"
  },
  "api/DNV.OAuth.Web.JwtExtensions.html": {
    "href": "api/DNV.OAuth.Web.JwtExtensions.html",
    "title": "Class JwtExtensions",
    "keywords": "Class JwtExtensions Namespace DNV.OAuth.Web Assembly DNV.OAuth.Web.dll public static class JwtExtensions Inheritance object JwtExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddJwt(AuthenticationBuilder, Action<IDictionary<string, JwtOptions>>) public static AuthenticationBuilder AddJwt(this AuthenticationBuilder builder, Action<IDictionary<string, JwtOptions>> setupAction) Parameters builder AuthenticationBuilder setupAction Action<IDictionary<string, JwtOptions>> Returns AuthenticationBuilder AddJwt(AuthenticationBuilder, IDictionary<string, JwtOptions>) public static AuthenticationBuilder AddJwt(this AuthenticationBuilder builder, IDictionary<string, JwtOptions> schemaOptions) Parameters builder AuthenticationBuilder schemaOptions IDictionary<string, JwtOptions> Returns AuthenticationBuilder Exceptions ArgumentNullException AddJwt(AuthenticationBuilder, IEnumerable<IConfigurationSection>) public static AuthenticationBuilder AddJwt(this AuthenticationBuilder builder, IEnumerable<IConfigurationSection> sections) Parameters builder AuthenticationBuilder sections IEnumerable<IConfigurationSection> Returns AuthenticationBuilder AddJwt(AuthenticationBuilder, string, JwtOptions) public static AuthenticationBuilder AddJwt(this AuthenticationBuilder builder, string authenticationSchema, JwtOptions jwtOptions) Parameters builder AuthenticationBuilder authenticationSchema string jwtOptions JwtOptions Returns AuthenticationBuilder AddJwt(AuthenticationBuilder, string, Action<JwtOptions>) public static AuthenticationBuilder AddJwt(this AuthenticationBuilder builder, string authenticationSchema, Action<JwtOptions> setupAction) Parameters builder AuthenticationBuilder authenticationSchema string setupAction Action<JwtOptions> Returns AuthenticationBuilder"
  },
  "api/DNV.OAuth.Web.JwtOptions.AuthorityItem.html": {
    "href": "api/DNV.OAuth.Web.JwtOptions.AuthorityItem.html",
    "title": "Class JwtOptions.AuthorityItem",
    "keywords": "Class JwtOptions.AuthorityItem Namespace DNV.OAuth.Web Assembly DNV.OAuth.Web.dll public class JwtOptions.AuthorityItem Inheritance object JwtOptions.AuthorityItem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties Authority public string? Authority { get; set; } Property Value string SchemePostfix public string? SchemePostfix { get; set; } Property Value string"
  },
  "api/DNV.OAuth.Web.JwtOptions.html": {
    "href": "api/DNV.OAuth.Web.JwtOptions.html",
    "title": "Class JwtOptions",
    "keywords": "Class JwtOptions Namespace DNV.OAuth.Web Assembly DNV.OAuth.Web.dll public class JwtOptions Inheritance object JwtOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Fields JwtDefaultPolicy public const string JwtDefaultPolicy = \"JwtDefaultPolicy\" Field Value string Properties AddAsDefault public bool AddAsDefault { get; set; } Property Value bool Audience public string? Audience { get; set; } Property Value string Authorities Multiple Authorities public List<JwtOptions.AuthorityItem> Authorities { get; set; } Property Value List<JwtOptions.AuthorityItem> Authority Gets or sets the Authority to use when making OpenIdConnect calls. public string? Authority { get; set; } Property Value string Remarks v1 https://login.microsoftonline.com/a68572e3-63ce-4bc1-acdc-b64943502e9d (not recommended) https://login.veracity.com/tfp/a68572e3-63ce-4bc1-acdc-b64943502e9d/b2c_1a_signinwithadfsidp (don't use it) v2 https://login.microsoftonline.com/a68572e3-63ce-4bc1-acdc-b64943502e9d/v2.0 https://login.veracity.com/tfp/a68572e3-63ce-4bc1-acdc-b64943502e9d/b2c_1a_signinwithadfsidp/v2.0 (by default) path segment 'tfp' is required for MSAL, it is obsoleted and might be removed in the future. AuthorizationPolicyName public string AuthorizationPolicyName { get; set; } Property Value string ClientId [Obsolete(\"Use Audience instead\")] public string? ClientId { get; set; } Property Value string CustomClaimsValidator public Func<IEnumerable<Claim>, (bool Succeeded, string FailedReason)>? CustomClaimsValidator { get; set; } Property Value Func<IEnumerable<Claim>, (bool Succeeded, string FailureReason)> Events public JwtBearerEvents? Events { get; set; } Property Value JwtBearerEvents SecurityTokenValidator public ISecurityTokenValidator? SecurityTokenValidator { get; set; } Property Value ISecurityTokenValidator TokenValidationParameters public TokenValidationParameters? TokenValidationParameters { get; set; } Property Value TokenValidationParameters"
  },
  "api/DNV.OAuth.Web.OAuthExtensions.html": {
    "href": "api/DNV.OAuth.Web.OAuthExtensions.html",
    "title": "Class OAuthExtensions",
    "keywords": "Class OAuthExtensions Namespace DNV.OAuth.Web Assembly DNV.OAuth.Web.dll public static class OAuthExtensions Inheritance object OAuthExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddOidc(AuthenticationBuilder, OidcOptions, Action<CookieAuthenticationOptions>?, Action<DistributedCacheEntryOptions>?) Add OpenId Connect authentication public static AuthenticationBuilder AddOidc(this AuthenticationBuilder builder, OidcOptions oidcOptions, Action<CookieAuthenticationOptions>? cookieSetupAction = null, Action<DistributedCacheEntryOptions>? cacheSetupAction = null) Parameters builder AuthenticationBuilder oidcOptions OidcOptions cookieSetupAction Action<CookieAuthenticationOptions> cacheSetupAction Action<DistributedCacheEntryOptions> Returns AuthenticationBuilder AddOidc(AuthenticationBuilder, Action<OidcOptions>, Action<CookieAuthenticationOptions>?, Action<DistributedCacheEntryOptions>?) public static AuthenticationBuilder AddOidc(this AuthenticationBuilder builder, Action<OidcOptions> oidcSetupAction, Action<CookieAuthenticationOptions>? cookieSetupAction = null, Action<DistributedCacheEntryOptions>? cacheSetupAction = null) Parameters builder AuthenticationBuilder oidcSetupAction Action<OidcOptions> cookieSetupAction Action<CookieAuthenticationOptions> cacheSetupAction Action<DistributedCacheEntryOptions> Returns AuthenticationBuilder AddOidc(IServiceCollection, OidcOptions, Action<CookieAuthenticationOptions>?, Action<DistributedCacheEntryOptions>?) public static AuthenticationBuilder AddOidc(this IServiceCollection services, OidcOptions oidcOptions, Action<CookieAuthenticationOptions>? cookieSetupAction = null, Action<DistributedCacheEntryOptions>? cacheSetupAction = null) Parameters services IServiceCollection oidcOptions OidcOptions cookieSetupAction Action<CookieAuthenticationOptions> cacheSetupAction Action<DistributedCacheEntryOptions> Returns AuthenticationBuilder AddOidc(IServiceCollection, Action<OidcOptions>, Action<CookieAuthenticationOptions>?, Action<DistributedCacheEntryOptions>?) public static AuthenticationBuilder AddOidc(this IServiceCollection services, Action<OidcOptions> oidcSetupAction, Action<CookieAuthenticationOptions>? cookieSetupAction = null, Action<DistributedCacheEntryOptions>? cacheSetupAction = null) Parameters services IServiceCollection oidcSetupAction Action<OidcOptions> cookieSetupAction Action<CookieAuthenticationOptions> cacheSetupAction Action<DistributedCacheEntryOptions> Returns AuthenticationBuilder"
  },
  "api/DNV.OAuth.Web.Oidc.OidcMessageExtensions.html": {
    "href": "api/DNV.OAuth.Web.Oidc.OidcMessageExtensions.html",
    "title": "Class OidcMessageExtensions",
    "keywords": "Class OidcMessageExtensions Namespace DNV.OAuth.Web.Oidc Assembly DNV.OAuth.Web.dll public static class OidcMessageExtensions Inheritance object OidcMessageExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields FormPostScriptHashCode public const string FormPostScriptHashCode = \"sha256-N4ps+XP2YXr4JI2/sWVoER7gSQH2UxrXbN3v6MvHM4I=\" Field Value string"
  },
  "api/DNV.OAuth.Web.Oidc.html": {
    "href": "api/DNV.OAuth.Web.Oidc.html",
    "title": "Namespace DNV.OAuth.Web.Oidc",
    "keywords": "Namespace DNV.OAuth.Web.Oidc Classes OidcMessageExtensions"
  },
  "api/DNV.OAuth.Web.OidcOptions.html": {
    "href": "api/DNV.OAuth.Web.OidcOptions.html",
    "title": "Class OidcOptions",
    "keywords": "Class OidcOptions Namespace DNV.OAuth.Web Assembly DNV.OAuth.Web.dll public class OidcOptions : OAuth2Options Inheritance object OAuth2Options OidcOptions Inherited Members OAuth2Options.Authority OAuth2Options.ClientId OAuth2Options.ClientSecret OAuth2Options.Resource OAuth2Options.Scopes OAuth2Options.CallbackPath OAuth2Options.Clone() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties AuthenticationMethod public OpenIdConnectRedirectBehavior AuthenticationMethod { get; set; } Property Value OpenIdConnectRedirectBehavior Events public OpenIdConnectEvents? Events { get; set; } Property Value OpenIdConnectEvents ResponseType Gets or sets the 'response_type'. public string ResponseType { get; set; } Property Value string SecurityTokenValidator public ISecurityTokenValidator? SecurityTokenValidator { get; set; } Property Value ISecurityTokenValidator"
  },
  "api/DNV.OAuth.Web.html": {
    "href": "api/DNV.OAuth.Web.html",
    "title": "Namespace DNV.OAuth.Web",
    "keywords": "Namespace DNV.OAuth.Web Classes JwtExtensions JwtOptions JwtOptions.AuthorityItem OAuthExtensions OidcOptions"
  },
  "api/DNV.SecretsManager.ConsoleApp.Commands.CommandType.html": {
    "href": "api/DNV.SecretsManager.ConsoleApp.Commands.CommandType.html",
    "title": "Enum CommandType",
    "keywords": "Enum CommandType Namespace DNV.SecretsManager.ConsoleApp.Commands Assembly secretsmanager.dll public enum CommandType Extension Methods Throws.IfNull<T>(T, string?) Fields Clear = 3 Download = 1 None = 0 Restart = 4 Upload = 2"
  },
  "api/DNV.SecretsManager.ConsoleApp.Commands.ConsoleCommand.html": {
    "href": "api/DNV.SecretsManager.ConsoleApp.Commands.ConsoleCommand.html",
    "title": "Class ConsoleCommand",
    "keywords": "Class ConsoleCommand Namespace DNV.SecretsManager.ConsoleApp.Commands Assembly secretsmanager.dll public static class ConsoleCommand Inheritance object ConsoleCommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BuildCommandUseage(IConsoleCommand, string) public static string BuildCommandUseage(IConsoleCommand command, string applicationName) Parameters command IConsoleCommand applicationName string Returns string CollectOptions(IEnumerable<ConsoleOption>, string[]) public static Dictionary<string, object> CollectOptions(IEnumerable<ConsoleOption> optionDefinitions, string[] args) Parameters optionDefinitions IEnumerable<ConsoleOption> args string[] Returns Dictionary<string, object> GetDownloadFilenameOrInvalid(string) public static string GetDownloadFilenameOrInvalid(string value) Parameters value string Returns string GetStringOrInvalid(string, string, Func<string, bool>, Func<string, string>) public static string GetStringOrInvalid(string value, string prompt, Func<string, bool> isValid, Func<string, string> invalidMessage) Parameters value string prompt string isValid Func<string, bool> invalidMessage Func<string, string> Returns string GetStringOrInvalid(string, string, Func<string, Task<bool>>, Func<string, string>) public static Task<string> GetStringOrInvalid(string value, string prompt, Func<string, Task<bool>> isValid, Func<string, string> invalidMessage) Parameters value string prompt string isValid Func<string, Task<bool>> invalidMessage Func<string, string> Returns Task<string> GetUploadFilenameOrInvalid(string) public static string GetUploadFilenameOrInvalid(string value) Parameters value string Returns string"
  },
  "api/DNV.SecretsManager.ConsoleApp.Commands.IConsoleCommand.html": {
    "href": "api/DNV.SecretsManager.ConsoleApp.Commands.IConsoleCommand.html",
    "title": "Interface IConsoleCommand",
    "keywords": "Interface IConsoleCommand Namespace DNV.SecretsManager.ConsoleApp.Commands Assembly secretsmanager.dll public interface IConsoleCommand Extension Methods Throws.IfNull<T>(T, string?) Properties Description string Description { get; } Property Value string Name string Name { get; } Property Value string Options IEnumerable<ConsoleOption> Options { get; } Property Value IEnumerable<ConsoleOption> Methods Build(Dictionary<string, object>) Task<IConsoleCommand> Build(Dictionary<string, object> options) Parameters options Dictionary<string, object> Returns Task<IConsoleCommand> Execute() Task Execute() Returns Task"
  },
  "api/DNV.SecretsManager.ConsoleApp.Commands.KeyVault.CommandType.html": {
    "href": "api/DNV.SecretsManager.ConsoleApp.Commands.KeyVault.CommandType.html",
    "title": "Enum CommandType",
    "keywords": "Enum CommandType Namespace DNV.SecretsManager.ConsoleApp.Commands.KeyVault Assembly secretsmanager.dll public enum CommandType Extension Methods Throws.IfNull<T>(T, string?) Fields Clear = 3 Download = 1 None = 0 Restart = 4 Upload = 2"
  },
  "api/DNV.SecretsManager.ConsoleApp.Commands.KeyVault.html": {
    "href": "api/DNV.SecretsManager.ConsoleApp.Commands.KeyVault.html",
    "title": "Namespace DNV.SecretsManager.ConsoleApp.Commands.KeyVault",
    "keywords": "Namespace DNV.SecretsManager.ConsoleApp.Commands.KeyVault Enums CommandType"
  },
  "api/DNV.SecretsManager.ConsoleApp.Commands.VariableGroup.CommandType.html": {
    "href": "api/DNV.SecretsManager.ConsoleApp.Commands.VariableGroup.CommandType.html",
    "title": "Enum CommandType",
    "keywords": "Enum CommandType Namespace DNV.SecretsManager.ConsoleApp.Commands.VariableGroup Assembly secretsmanager.dll public enum CommandType Extension Methods Throws.IfNull<T>(T, string?) Fields Clear = 3 Download = 1 None = 0 Upload = 2"
  },
  "api/DNV.SecretsManager.ConsoleApp.Commands.VariableGroup.html": {
    "href": "api/DNV.SecretsManager.ConsoleApp.Commands.VariableGroup.html",
    "title": "Namespace DNV.SecretsManager.ConsoleApp.Commands.VariableGroup",
    "keywords": "Namespace DNV.SecretsManager.ConsoleApp.Commands.VariableGroup Enums CommandType"
  },
  "api/DNV.SecretsManager.ConsoleApp.Commands.html": {
    "href": "api/DNV.SecretsManager.ConsoleApp.Commands.html",
    "title": "Namespace DNV.SecretsManager.ConsoleApp.Commands",
    "keywords": "Namespace DNV.SecretsManager.ConsoleApp.Commands Classes ConsoleCommand Interfaces IConsoleCommand Enums CommandType"
  },
  "api/DNV.SecretsManager.ConsoleApp.ConsoleOption.html": {
    "href": "api/DNV.SecretsManager.ConsoleApp.ConsoleOption.html",
    "title": "Class ConsoleOption",
    "keywords": "Class ConsoleOption Namespace DNV.SecretsManager.ConsoleApp Assembly secretsmanager.dll public class ConsoleOption Inheritance object ConsoleOption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties Abbreviation public char Abbreviation { get; set; } Property Value char IsFlag public bool IsFlag { get; set; } Property Value bool IsOptional public bool IsOptional { get; set; } Property Value bool Name public string Name { get; set; } Property Value string"
  },
  "api/DNV.SecretsManager.ConsoleApp.html": {
    "href": "api/DNV.SecretsManager.ConsoleApp.html",
    "title": "Namespace DNV.SecretsManager.ConsoleApp",
    "keywords": "Namespace DNV.SecretsManager.ConsoleApp Classes ConsoleOption"
  },
  "api/DNV.SecretsManager.Exceptions.JsonParseException.html": {
    "href": "api/DNV.SecretsManager.Exceptions.JsonParseException.html",
    "title": "Class JsonParseException",
    "keywords": "Class JsonParseException Namespace DNV.SecretsManager.Exceptions Assembly DNV.SecretsManager.dll [Serializable] public sealed class JsonParseException : Exception, ISerializable Inheritance object Exception JsonParseException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Extension Methods Throws.IfNull<T>(T, string?) Constructors JsonParseException(string) public JsonParseException(string pathSegment) Parameters pathSegment string"
  },
  "api/DNV.SecretsManager.Exceptions.html": {
    "href": "api/DNV.SecretsManager.Exceptions.html",
    "title": "Namespace DNV.SecretsManager.Exceptions",
    "keywords": "Namespace DNV.SecretsManager.Exceptions Classes JsonParseException"
  },
  "api/DNV.SecretsManager.Services.Abstractions.IKeyVaultSecretService.html": {
    "href": "api/DNV.SecretsManager.Services.Abstractions.IKeyVaultSecretService.html",
    "title": "Interface IKeyVaultSecretService",
    "keywords": "Interface IKeyVaultSecretService Namespace DNV.SecretsManager.Services.Abstractions Assembly DNV.SecretsManager.dll public interface IKeyVaultSecretService Extension Methods Throws.IfNull<T>(T, string?) Methods ClearSecrets(string) Task<int> ClearSecrets(string source) Parameters source string Returns Task<int> FromJson(string) Dictionary<string, SecureString> FromJson(string json) Parameters json string Returns Dictionary<string, SecureString> GetAppServiceOptionsByName(string) Task<IEnumerable<AppServiceOption>> GetAppServiceOptionsByName(string name) Parameters name string Returns Task<IEnumerable<AppServiceOption>> GetSecretsAsDictionary(string) Task<Dictionary<string, SecureString>> GetSecretsAsDictionary(string source) Parameters source string Returns Task<Dictionary<string, SecureString>> RestartAppService(string) Task RestartAppService(string resourceId) Parameters resourceId string Returns Task SetSecretsFromDictionary(string, Dictionary<string, SecureString>) Task SetSecretsFromDictionary(string source, Dictionary<string, SecureString> secrets) Parameters source string secrets Dictionary<string, SecureString> Returns Task SetSecretsFromJson(string, string) Task SetSecretsFromJson(string source, string json) Parameters source string json string Returns Task ToJson(Dictionary<string, SecureString>) string ToJson(Dictionary<string, SecureString> secrets) Parameters secrets Dictionary<string, SecureString> Returns string"
  },
  "api/DNV.SecretsManager.Services.Abstractions.IVariableGroupSecretsService.html": {
    "href": "api/DNV.SecretsManager.Services.Abstractions.IVariableGroupSecretsService.html",
    "title": "Interface IVariableGroupSecretsService",
    "keywords": "Interface IVariableGroupSecretsService Namespace DNV.SecretsManager.Services.Abstractions Assembly DNV.SecretsManager.dll public interface IVariableGroupSecretsService Extension Methods Throws.IfNull<T>(T, string?) Methods ClearSecrets(string) Task<int> ClearSecrets(string source) Parameters source string Returns Task<int> FromJson(string) Dictionary<string, SecureString> FromJson(string json) Parameters json string Returns Dictionary<string, SecureString> GetSecretsAsDictionary(string) Task<Dictionary<string, SecureString>> GetSecretsAsDictionary(string source) Parameters source string Returns Task<Dictionary<string, SecureString>> SetClientConfiguration(VariableGroupClientConfiguration) void SetClientConfiguration(VariableGroupClientConfiguration configuration) Parameters configuration VariableGroupClientConfiguration SetSecretsFromDictionary(string, Dictionary<string, SecureString>) Task SetSecretsFromDictionary(string source, Dictionary<string, SecureString> secrets) Parameters source string secrets Dictionary<string, SecureString> Returns Task SetSecretsFromJson(string, string) Task SetSecretsFromJson(string source, string json) Parameters source string json string Returns Task ToJson(Dictionary<string, SecureString>) string ToJson(Dictionary<string, SecureString> secrets) Parameters secrets Dictionary<string, SecureString> Returns string"
  },
  "api/DNV.SecretsManager.Services.Abstractions.html": {
    "href": "api/DNV.SecretsManager.Services.Abstractions.html",
    "title": "Namespace DNV.SecretsManager.Services.Abstractions",
    "keywords": "Namespace DNV.SecretsManager.Services.Abstractions Interfaces IKeyVaultSecretService IVariableGroupSecretsService"
  },
  "api/DNV.SecretsManager.Services.KeyVaultSecretsService.html": {
    "href": "api/DNV.SecretsManager.Services.KeyVaultSecretsService.html",
    "title": "Class KeyVaultSecretsService",
    "keywords": "Class KeyVaultSecretsService Namespace DNV.SecretsManager.Services Assembly DNV.SecretsManager.dll public class KeyVaultSecretsService : SecretsService, IKeyVaultSecretService Inheritance object SecretsService KeyVaultSecretsService Implements IKeyVaultSecretService Inherited Members SecretsService.ToJson(Dictionary<string, SecureString>) SecretsService.FromJson(string) SecretsService.ToSecureDictionary(Dictionary<string, string>) SecretsService.FromSecureDictionary(Dictionary<string, SecureString>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors KeyVaultSecretsService() public KeyVaultSecretsService() Methods ClearSecrets(string) public override Task<int> ClearSecrets(string source) Parameters source string Returns Task<int> GetAppServiceOptionsByName(string) public Task<IEnumerable<AppServiceOption>> GetAppServiceOptionsByName(string name) Parameters name string Returns Task<IEnumerable<AppServiceOption>> GetSecretsAsDictionary(string) public override Task<Dictionary<string, SecureString>> GetSecretsAsDictionary(string source) Parameters source string Returns Task<Dictionary<string, SecureString>> RestartAppService(string) public Task RestartAppService(string resourceId) Parameters resourceId string Returns Task SetSecretsFromDictionary(string, Dictionary<string, SecureString>) public override Task SetSecretsFromDictionary(string source, Dictionary<string, SecureString> secrets) Parameters source string secrets Dictionary<string, SecureString> Returns Task SetSecretsFromJson(string, string) public override Task SetSecretsFromJson(string source, string json) Parameters source string json string Returns Task"
  },
  "api/DNV.SecretsManager.Services.SecretsService.html": {
    "href": "api/DNV.SecretsManager.Services.SecretsService.html",
    "title": "Class SecretsService",
    "keywords": "Class SecretsService Namespace DNV.SecretsManager.Services Assembly DNV.SecretsManager.dll public abstract class SecretsService Inheritance object SecretsService Derived KeyVaultSecretsService VariableGroupSecretsService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Methods ClearSecrets(string) public abstract Task<int> ClearSecrets(string source) Parameters source string Returns Task<int> FromJson(string) public Dictionary<string, SecureString> FromJson(string json) Parameters json string Returns Dictionary<string, SecureString> FromSecureDictionary(Dictionary<string, SecureString>) protected Dictionary<string, string> FromSecureDictionary(Dictionary<string, SecureString> dict) Parameters dict Dictionary<string, SecureString> Returns Dictionary<string, string> GetSecretsAsDictionary(string) public abstract Task<Dictionary<string, SecureString>> GetSecretsAsDictionary(string source) Parameters source string Returns Task<Dictionary<string, SecureString>> SetSecretsFromDictionary(string, Dictionary<string, SecureString>) public abstract Task SetSecretsFromDictionary(string vaultBaseUrl, Dictionary<string, SecureString> secrets) Parameters vaultBaseUrl string secrets Dictionary<string, SecureString> Returns Task SetSecretsFromJson(string, string) public abstract Task SetSecretsFromJson(string source, string json) Parameters source string json string Returns Task ToJson(Dictionary<string, SecureString>) public string ToJson(Dictionary<string, SecureString> secrets) Parameters secrets Dictionary<string, SecureString> Returns string ToSecureDictionary(Dictionary<string, string>) protected Dictionary<string, SecureString> ToSecureDictionary(Dictionary<string, string> dict) Parameters dict Dictionary<string, string> Returns Dictionary<string, SecureString>"
  },
  "api/DNV.SecretsManager.Services.VariableGroupSecretsService.html": {
    "href": "api/DNV.SecretsManager.Services.VariableGroupSecretsService.html",
    "title": "Class VariableGroupSecretsService",
    "keywords": "Class VariableGroupSecretsService Namespace DNV.SecretsManager.Services Assembly DNV.SecretsManager.dll public class VariableGroupSecretsService : SecretsService, IVariableGroupSecretsService Inheritance object SecretsService VariableGroupSecretsService Implements IVariableGroupSecretsService Inherited Members SecretsService.ToJson(Dictionary<string, SecureString>) SecretsService.FromJson(string) SecretsService.ToSecureDictionary(Dictionary<string, string>) SecretsService.FromSecureDictionary(Dictionary<string, SecureString>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Methods ClearSecrets(string) public override Task<int> ClearSecrets(string source) Parameters source string Returns Task<int> GetSecretsAsDictionary(string) public override Task<Dictionary<string, SecureString>> GetSecretsAsDictionary(string source) Parameters source string Returns Task<Dictionary<string, SecureString>> SetClientConfiguration(VariableGroupClientConfiguration) public void SetClientConfiguration(VariableGroupClientConfiguration configuration) Parameters configuration VariableGroupClientConfiguration SetSecretsFromDictionary(string, Dictionary<string, SecureString>) public override Task SetSecretsFromDictionary(string source, Dictionary<string, SecureString> secrets) Parameters source string secrets Dictionary<string, SecureString> Returns Task SetSecretsFromJson(string, string) public override Task SetSecretsFromJson(string source, string json) Parameters source string json string Returns Task"
  },
  "api/DNV.SecretsManager.Services.html": {
    "href": "api/DNV.SecretsManager.Services.html",
    "title": "Namespace DNV.SecretsManager.Services",
    "keywords": "Namespace DNV.SecretsManager.Services Classes KeyVaultSecretsService SecretsService VariableGroupSecretsService"
  },
  "api/DNV.SecretsManager.VariableGroupClientConfiguration.html": {
    "href": "api/DNV.SecretsManager.VariableGroupClientConfiguration.html",
    "title": "Class VariableGroupClientConfiguration",
    "keywords": "Class VariableGroupClientConfiguration Namespace DNV.SecretsManager Assembly DNV.SecretsManager.dll public class VariableGroupClientConfiguration Inheritance object VariableGroupClientConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties ApiVersion public string ApiVersion { get; set; } Property Value string BaseUrl public string BaseUrl { get; set; } Property Value string Organization public string Organization { get; set; } Property Value string PersonalAccessToken public string PersonalAccessToken { get; set; } Property Value string"
  },
  "api/DNV.SecretsManager.html": {
    "href": "api/DNV.SecretsManager.html",
    "title": "Namespace DNV.SecretsManager",
    "keywords": "Namespace DNV.SecretsManager Classes VariableGroupClientConfiguration"
  },
  "api/DNV.Security.DataProtection.KeyVault.AzureKeyVaultXmlRepository.html": {
    "href": "api/DNV.Security.DataProtection.KeyVault.AzureKeyVaultXmlRepository.html",
    "title": "Class AzureKeyVaultXmlRepository",
    "keywords": "Class AzureKeyVaultXmlRepository Namespace DNV.Security.DataProtection.KeyVault Assembly DNV.Security.DataProtection.KeyVault.dll public class AzureKeyVaultXmlRepository : IXmlRepository Inheritance object AzureKeyVaultXmlRepository Implements IXmlRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors AzureKeyVaultXmlRepository(ILoggerFactory, IAzureClientFactory<SecretClient>, Uri, string) public AzureKeyVaultXmlRepository(ILoggerFactory loggerFactory, IAzureClientFactory<SecretClient> secretClientFactory, Uri vaultUri, string secretName) Parameters loggerFactory ILoggerFactory secretClientFactory IAzureClientFactory<SecretClient> vaultUri Uri secretName string Methods GetAllElements() Gets all top-level XML elements in the repository. public IReadOnlyCollection<XElement> GetAllElements() Returns IReadOnlyCollection<XElement> Remarks All top-level elements in the repository. StoreElement(XElement, string) Adds a top-level XML element to the repository. public void StoreElement(XElement element, string friendlyName) Parameters element XElement The element to add. friendlyName string An optional name to be associated with the XML element. For instance, if this repository stores XML files on disk, the friendly name may be used as part of the file name. Repository implementations are not required to observe this parameter even if it has been provided by the caller. Remarks The 'friendlyName' parameter must be unique if specified. For instance, it could be the id of the key being stored."
  },
  "api/DNV.Security.DataProtection.KeyVault.DataProtectionBuilderExtensions.html": {
    "href": "api/DNV.Security.DataProtection.KeyVault.DataProtectionBuilderExtensions.html",
    "title": "Class DataProtectionBuilderExtensions",
    "keywords": "Class DataProtectionBuilderExtensions Namespace DNV.Security.DataProtection.KeyVault Assembly DNV.Security.DataProtection.KeyVault.dll public static class DataProtectionBuilderExtensions Inheritance object DataProtectionBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods PersistAndProtectKeysToAzureKeyVault(IDataProtectionBuilder, Uri, string, string, TokenCredential) public static IDataProtectionBuilder PersistAndProtectKeysToAzureKeyVault(this IDataProtectionBuilder builder, Uri vaultUri, string keyName, string secretName, TokenCredential tokenCredential) Parameters builder IDataProtectionBuilder vaultUri Uri keyName string secretName string tokenCredential TokenCredential Returns IDataProtectionBuilder PersistKeysToAzureKeyVault(IDataProtectionBuilder, Uri, string, TokenCredential) public static IDataProtectionBuilder PersistKeysToAzureKeyVault(this IDataProtectionBuilder builder, Uri vaultUri, string secretName, TokenCredential tokenCredential) Parameters builder IDataProtectionBuilder vaultUri Uri secretName string tokenCredential TokenCredential Returns IDataProtectionBuilder"
  },
  "api/DNV.Security.DataProtection.KeyVault.html": {
    "href": "api/DNV.Security.DataProtection.KeyVault.html",
    "title": "Namespace DNV.Security.DataProtection.KeyVault",
    "keywords": "Namespace DNV.Security.DataProtection.KeyVault Classes AzureKeyVaultXmlRepository DataProtectionBuilderExtensions"
  },
  "api/DNV.Specifications.NUnit.Specification.html": {
    "href": "api/DNV.Specifications.NUnit.Specification.html",
    "title": "Class Specification",
    "keywords": "Class Specification Namespace DNV.Specifications.NUnit Assembly DNV.Specifications.NUnit.dll Represents the base class for specifications. public abstract class Specification : SpecificationBase<Specification> Inheritance object SpecificationBase<Specification> Specification Inherited Members SpecificationBase<Specification>.Arrange() SpecificationBase<Specification>.Act() SpecificationBase<Specification>.Cleanup() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors Specification() Initializes a new instance of the Specification class. public Specification() Specification(string, string, string) Initializes a new instance of the Specification class. public Specification(string arrangeMethodName, string actMethodName, string cleanupMethodName) Parameters arrangeMethodName string The name of the methods used for arranging the test. actMethodName string The name of the methods used for acting the test. cleanupMethodName string The name of the methods used for cleaning up after a test. Methods DisposeAsync() Tears down the test by doing the cleanup parts. [TearDown] public Task DisposeAsync() Returns Task The Task representing the asynchronous operation. InitializeAsync() Initializes the test by doing the arrange and act parts. [SetUp] public Task InitializeAsync() Returns Task The Task representing the asynchronous operation."
  },
  "api/DNV.Specifications.NUnit.html": {
    "href": "api/DNV.Specifications.NUnit.html",
    "title": "Namespace DNV.Specifications.NUnit",
    "keywords": "Namespace DNV.Specifications.NUnit Classes Specification Represents the base class for specifications."
  },
  "api/DNV.Specifications.SpecificationBase-1.html": {
    "href": "api/DNV.Specifications.SpecificationBase-1.html",
    "title": "Class SpecificationBase<TSpecification>",
    "keywords": "Class SpecificationBase<TSpecification> Namespace DNV.Specifications Assembly DNV.Specifications.dll Represents the base class for specifications. public abstract class SpecificationBase<TSpecification> Type Parameters TSpecification The type of the specification class. Inheritance object SpecificationBase<TSpecification> Derived Specification Specification Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors SpecificationBase(string, string, string) Initializes a new instance of the SpecificationBase<TSpecification> class. protected SpecificationBase(string arrangeMethodName = \"Establish\", string actMethodName = \"Because\", string cleanupMethodName = \"Destroy\") Parameters arrangeMethodName string The name of the methods used for arranging the test. actMethodName string The name of the methods used for acting the test. cleanupMethodName string The name of the methods used for cleaning up after a test. Methods Act() Calls all methods in the class hierarchy for the Act-part. protected Task Act() Returns Task A Task representing the asynchronous operation. Arrange() Calls all methods in the class hierarchy for the Arrange-part. protected Task Arrange() Returns Task A Task representing the asynchronous operation. Cleanup() Calls all methods in the class hierarchy for the Cleanup-part. protected Task Cleanup() Returns Task A Task representing the asynchronous operation."
  },
  "api/DNV.Specifications.SpecificationMethods-2.html": {
    "href": "api/DNV.Specifications.SpecificationMethods-2.html",
    "title": "Class SpecificationMethods<TTest, TSpecification>",
    "keywords": "Class SpecificationMethods<TTest, TSpecification> Namespace DNV.Specifications Assembly DNV.Specifications.dll Represents the lifecycle methods for a SpecificationBase<TSpecification>. public static class SpecificationMethods<TTest, TSpecification> Type Parameters TTest Target type it represents. TSpecification The specification base class. Inheritance object SpecificationMethods<TTest, TSpecification> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Because(object, string) Invoke all Because methods. public static Task Because(object unit, string methodName) Parameters unit object Unit to invoke them on. methodName string The name of the method. Returns Task A Task representing the asynchronous operation. Destroy(object, string) Invoke all Destroy methods. public static Task Destroy(object unit, string methodName) Parameters unit object Unit to invoke them on. methodName string The name of the method. Returns Task A Task representing the asynchronous operation. Establish(object, string) Invoke all Establish methods. public static Task Establish(object unit, string methodName) Parameters unit object Unit to invoke them on. methodName string The name of the method. Returns Task A Task representing the asynchronous operation."
  },
  "api/DNV.Specifications.XUnit.Specification.html": {
    "href": "api/DNV.Specifications.XUnit.Specification.html",
    "title": "Class Specification",
    "keywords": "Class Specification Namespace DNV.Specifications.XUnit Assembly DNV.Specifications.XUnit.dll Represents the base class for specifications. public abstract class Specification : SpecificationBase<Specification>, IAsyncLifetime Inheritance object SpecificationBase<Specification> Specification Implements IAsyncLifetime Inherited Members SpecificationBase<Specification>.Arrange() SpecificationBase<Specification>.Act() SpecificationBase<Specification>.Cleanup() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors Specification() Initializes a new instance of the Specification class. protected Specification() Specification(string, string, string) Initializes a new instance of the Specification class. protected Specification(string arrangeMethodName, string actMethodName, string cleanupMethodName) Parameters arrangeMethodName string The name of the methods used for arranging the test. actMethodName string The name of the methods used for acting the test. cleanupMethodName string The name of the methods used for cleaning up after a test. Methods DisposeAsync() Called when an object is no longer needed. Called just before Dispose() if the class also implements that. public Task DisposeAsync() Returns Task InitializeAsync() Called immediately after the class has been created, before it is used. public Task InitializeAsync() Returns Task"
  },
  "api/DNV.Specifications.XUnit.html": {
    "href": "api/DNV.Specifications.XUnit.html",
    "title": "Namespace DNV.Specifications.XUnit",
    "keywords": "Namespace DNV.Specifications.XUnit Classes Specification Represents the base class for specifications."
  },
  "api/DNV.Specifications.html": {
    "href": "api/DNV.Specifications.html",
    "title": "Namespace DNV.Specifications",
    "keywords": "Namespace DNV.Specifications Classes SpecificationBase<TSpecification> Represents the base class for specifications. SpecificationMethods<TTest, TSpecification> Represents the lifecycle methods for a SpecificationBase<TSpecification>."
  },
  "api/DNV.Veracity.Services.Api.ApiClientFactory.html": {
    "href": "api/DNV.Veracity.Services.Api.ApiClientFactory.html",
    "title": "Class ApiClientFactory",
    "keywords": "Class ApiClientFactory Namespace DNV.Veracity.Services.Api Assembly DNV.Veracity.Services.Api.dll public class ApiClientFactory Inheritance object ApiClientFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors ApiClientFactory(IEnumerable<OAuthHttpClientOptions>, IHttpClientFactory, ISerializer) public ApiClientFactory(IEnumerable<OAuthHttpClientOptions> optionsList, IHttpClientFactory httpClientFactory, ISerializer serializer) Parameters optionsList IEnumerable<OAuthHttpClientOptions> httpClientFactory IHttpClientFactory serializer ISerializer Fields _httpClientFactory protected readonly IHttpClientFactory _httpClientFactory Field Value IHttpClientFactory _optionsList protected readonly IEnumerable<OAuthHttpClientOptions> _optionsList Field Value IEnumerable<OAuthHttpClientOptions> _serializer protected readonly ISerializer _serializer Field Value ISerializer Methods GetClient(OAuthCredentialFlow?) public IApiClient GetClient(OAuthCredentialFlow? flow = null) Parameters flow OAuthCredentialFlow? Returns IApiClient"
  },
  "api/DNV.Veracity.Services.Api.ApiResourceClientBuilder.html": {
    "href": "api/DNV.Veracity.Services.Api.ApiResourceClientBuilder.html",
    "title": "Class ApiResourceClientBuilder",
    "keywords": "Class ApiResourceClientBuilder Namespace DNV.Veracity.Services.Api Assembly DNV.Veracity.Services.Api.dll public class ApiResourceClientBuilder Inheritance object ApiResourceClientBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Methods Build() public IApiClient Build() Returns IApiClient CreateWithOAuthClientOptions(OAuthHttpClientOptions) public static ApiResourceClientBuilder CreateWithOAuthClientOptions(OAuthHttpClientOptions options) Parameters options OAuthHttpClientOptions Returns ApiResourceClientBuilder ToAcceptMediaType(DataFormat) protected string ToAcceptMediaType(DataFormat dataFormat) Parameters dataFormat DataFormat Returns string WithDataFormat(DataFormat) public ApiResourceClientBuilder WithDataFormat(DataFormat dataFormat) Parameters dataFormat DataFormat Returns ApiResourceClientBuilder WithHttpFactory(IHttpClientFactory) public ApiResourceClientBuilder WithHttpFactory(IHttpClientFactory httpClientFactory) Parameters httpClientFactory IHttpClientFactory Returns ApiResourceClientBuilder WithSerializer(ISerializer) public ApiResourceClientBuilder WithSerializer(ISerializer serializer) Parameters serializer ISerializer Returns ApiResourceClientBuilder WithTimeout(TimeSpan) public ApiResourceClientBuilder WithTimeout(TimeSpan timeout) Parameters timeout TimeSpan Returns ApiResourceClientBuilder"
  },
  "api/DNV.Veracity.Services.Api.DataFormat.html": {
    "href": "api/DNV.Veracity.Services.Api.DataFormat.html",
    "title": "Enum DataFormat",
    "keywords": "Enum DataFormat Namespace DNV.Veracity.Services.Api Assembly DNV.Veracity.Services.Api.dll public enum DataFormat Extension Methods Throws.IfNull<T>(T, string?) Fields Json = 0 Xml = 1"
  },
  "api/DNV.Veracity.Services.Api.Directory.Abstractions.ICompanyDirectory.html": {
    "href": "api/DNV.Veracity.Services.Api.Directory.Abstractions.ICompanyDirectory.html",
    "title": "Interface ICompanyDirectory",
    "keywords": "Interface ICompanyDirectory Namespace DNV.Veracity.Services.Api.Directory.Abstractions Assembly DNV.Veracity.Services.Api.Directory.Abstractions.dll Exposes methods available for 'Company' resource within 'Directory' view point. public interface ICompanyDirectory Extension Methods Throws.IfNull<T>(T, string?) Methods Get(string) Retrieves an individual company. Task<Company> Get(string companyId) Parameters companyId string Returns Task<Company> ListUsers(string, int, int) Retrieves a paginated collection of user references of users affiliated with a company. Task<IEnumerable<UserReference>> ListUsers(string companyId, int page = 1, int pageSize = 20) Parameters companyId string page int pageSize int Returns Task<IEnumerable<UserReference>>"
  },
  "api/DNV.Veracity.Services.Api.Directory.Abstractions.IServiceDirectory.html": {
    "href": "api/DNV.Veracity.Services.Api.Directory.Abstractions.IServiceDirectory.html",
    "title": "Interface IServiceDirectory",
    "keywords": "Interface IServiceDirectory Namespace DNV.Veracity.Services.Api.Directory.Abstractions Assembly DNV.Veracity.Services.Api.Directory.Abstractions.dll Exposes methods available for 'Service' resource within 'Directory' view point. public interface IServiceDirectory Extension Methods Throws.IfNull<T>(T, string?) Methods Get(string) Retrieves an individual service. Task<Service> Get(string serviceId) Parameters serviceId string Returns Task<Service> GetServiceSubscriptions(string, string, string) Retrieves a paginated collection of subscriptions to a service. Task<IEnumerable<Subscription>> GetServiceSubscriptions(string serviceId, string filter, string pageNo) Parameters serviceId string filter string pageNo string Returns Task<IEnumerable<Subscription>> IsAdmin(string, string) Retrieve a boolean value indicating whether or not a user has administrator role for a service. Task<bool> IsAdmin(string serviceId, string userId) Parameters serviceId string userId string Returns Task<bool> ListUsers(string, int, int) Retrieves a paginated collection of user references of users subscribed to a service. Task<IEnumerable<UserReference>> ListUsers(string serviceId, int page = 1, int pageSize = 20) Parameters serviceId string page int pageSize int Returns Task<IEnumerable<UserReference>>"
  },
  "api/DNV.Veracity.Services.Api.Directory.Abstractions.IUserDirectory.html": {
    "href": "api/DNV.Veracity.Services.Api.Directory.Abstractions.IUserDirectory.html",
    "title": "Interface IUserDirectory",
    "keywords": "Interface IUserDirectory Namespace DNV.Veracity.Services.Api.Directory.Abstractions Assembly DNV.Veracity.Services.Api.Directory.Abstractions.dll Exposes methods available for 'User' resource within 'Directory' view point. public interface IUserDirectory Extension Methods Throws.IfNull<T>(T, string?) Methods Get(string) Retrieves an individual user. Task<User> Get(string userId) Parameters userId string Returns Task<User> GetSubscription(string, string) Retrieve an individual subscription for a specified user and service. Task<Subscription> GetSubscription(string userId, string serviceId) Parameters userId string serviceId string Returns Task<Subscription> ListByEmail(string) Retrieves a collection of user references by a specified email value. Task<IEnumerable<UserReference>> ListByEmail(string email) Parameters email string Returns Task<IEnumerable<UserReference>> ListByUserId(params string[]) Retrieves a collection of users where the id is included in the parameters. Task<IEnumerable<User>> ListByUserId(params string[] userIds) Parameters userIds string[] Returns Task<IEnumerable<User>> ListCompanies(string) Retrieves a collection of company references of companies with which a user is affiliated. Task<IEnumerable<CompanyReference>> ListCompanies(string userId) Parameters userId string Returns Task<IEnumerable<CompanyReference>> ListServices(string, int, int) Retrieves a paginated collection of service references of services to which a user is subscribed. Task<IEnumerable<ServiceReference>> ListServices(string userId, int page = 1, int pageSize = 20) Parameters userId string page int pageSize int Returns Task<IEnumerable<ServiceReference>>"
  },
  "api/DNV.Veracity.Services.Api.Directory.Abstractions.html": {
    "href": "api/DNV.Veracity.Services.Api.Directory.Abstractions.html",
    "title": "Namespace DNV.Veracity.Services.Api.Directory.Abstractions",
    "keywords": "Namespace DNV.Veracity.Services.Api.Directory.Abstractions Interfaces ICompanyDirectory Exposes methods available for 'Company' resource within 'Directory' view point. IServiceDirectory Exposes methods available for 'Service' resource within 'Directory' view point. IUserDirectory Exposes methods available for 'User' resource within 'Directory' view point."
  },
  "api/DNV.Veracity.Services.Api.Directory.CompanyDirectory.html": {
    "href": "api/DNV.Veracity.Services.Api.Directory.CompanyDirectory.html",
    "title": "Class CompanyDirectory",
    "keywords": "Class CompanyDirectory Namespace DNV.Veracity.Services.Api.Directory Assembly DNV.Veracity.Services.Api.Directory.dll public class CompanyDirectory : ICompanyDirectory Inheritance object CompanyDirectory Implements ICompanyDirectory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors CompanyDirectory(ApiClientFactory) public CompanyDirectory(ApiClientFactory apiClientFactory) Parameters apiClientFactory ApiClientFactory Methods Get(string) Retrieves an individual company. public Task<Company> Get(string companyId) Parameters companyId string Returns Task<Company> ListUsers(string, int, int) Retrieves a paginated collection of user references of users affiliated with a company. public Task<IEnumerable<UserReference>> ListUsers(string companyId, int page = 1, int pageSize = 20) Parameters companyId string page int pageSize int Returns Task<IEnumerable<UserReference>>"
  },
  "api/DNV.Veracity.Services.Api.Directory.Extensions.ConfigurationExtensions.html": {
    "href": "api/DNV.Veracity.Services.Api.Directory.Extensions.ConfigurationExtensions.html",
    "title": "Class ConfigurationExtensions",
    "keywords": "Class ConfigurationExtensions Namespace DNV.Veracity.Services.Api.Directory.Extensions Assembly DNV.Veracity.Services.Api.Directory.dll public static class ConfigurationExtensions Inheritance object ConfigurationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddCompanyDirectory(IServiceCollection, string) Adds an implementation of ICompanyDirectory to the IServiceCollection. public static IServiceCollection AddCompanyDirectory(this IServiceCollection services, string clientConfigurationName = \"company-directory-api\") Parameters services IServiceCollection The IServiceCollection to add the IHttpClientFactory instance to. clientConfigurationName string The name of the configuration section to retrieve OAuthHttpClientOptions from. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. AddServiceDirectory(IServiceCollection, string) Adds an implementation of IServiceDirectory to the IServiceCollection. public static IServiceCollection AddServiceDirectory(this IServiceCollection services, string clientConfigurationName = \"service-directory-api\") Parameters services IServiceCollection The IServiceCollection to add the IHttpClientFactory instance to. clientConfigurationName string The name of the configuration section to retrieve OAuthHttpClientOptions from. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. AddUserDirectory(IServiceCollection, string) Adds an implementation of IUserDirectory to the IServiceCollection. public static IServiceCollection AddUserDirectory(this IServiceCollection services, string clientConfigurationName = \"user-directory-api\") Parameters services IServiceCollection The IServiceCollection to add the IHttpClientFactory instance to. clientConfigurationName string The name of the configuration section to retrieve OAuthHttpClientOptions from. Returns IServiceCollection The IServiceCollection so that additional calls can be chained."
  },
  "api/DNV.Veracity.Services.Api.Directory.Extensions.html": {
    "href": "api/DNV.Veracity.Services.Api.Directory.Extensions.html",
    "title": "Namespace DNV.Veracity.Services.Api.Directory.Extensions",
    "keywords": "Namespace DNV.Veracity.Services.Api.Directory.Extensions Classes ConfigurationExtensions"
  },
  "api/DNV.Veracity.Services.Api.Directory.ServiceDirectory.html": {
    "href": "api/DNV.Veracity.Services.Api.Directory.ServiceDirectory.html",
    "title": "Class ServiceDirectory",
    "keywords": "Class ServiceDirectory Namespace DNV.Veracity.Services.Api.Directory Assembly DNV.Veracity.Services.Api.Directory.dll public class ServiceDirectory : IServiceDirectory Inheritance object ServiceDirectory Implements IServiceDirectory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors ServiceDirectory(ApiClientFactory) public ServiceDirectory(ApiClientFactory apiClientFactory) Parameters apiClientFactory ApiClientFactory Methods Get(string) Retrieves an individual service. public Task<Service> Get(string serviceId) Parameters serviceId string Returns Task<Service> GetServiceSubscriptions(string, string, string) Retrieves a paginated collection of subscriptions to a service. public Task<IEnumerable<Subscription>> GetServiceSubscriptions(string serviceId, string filter, string pageNo) Parameters serviceId string filter string pageNo string Returns Task<IEnumerable<Subscription>> IsAdmin(string, string) Retrieve a boolean value indicating whether or not a user has administrator role for a service. public Task<bool> IsAdmin(string serviceId, string userId) Parameters serviceId string userId string Returns Task<bool> ListUsers(string, int, int) Retrieves a paginated collection of user references of users subscribed to a service. public Task<IEnumerable<UserReference>> ListUsers(string serviceId, int page = 1, int pageSize = 20) Parameters serviceId string page int pageSize int Returns Task<IEnumerable<UserReference>>"
  },
  "api/DNV.Veracity.Services.Api.Directory.UserDirectory.html": {
    "href": "api/DNV.Veracity.Services.Api.Directory.UserDirectory.html",
    "title": "Class UserDirectory",
    "keywords": "Class UserDirectory Namespace DNV.Veracity.Services.Api.Directory Assembly DNV.Veracity.Services.Api.Directory.dll public class UserDirectory : IUserDirectory Inheritance object UserDirectory Implements IUserDirectory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors UserDirectory(ApiClientFactory) public UserDirectory(ApiClientFactory apiClientFactory) Parameters apiClientFactory ApiClientFactory Methods Get(string) Retrieves an individual user. public Task<User> Get(string userId) Parameters userId string Returns Task<User> GetSubscription(string, string) Retrieve an individual subscription for a specified user and service. public Task<Subscription> GetSubscription(string userId, string serviceId) Parameters userId string serviceId string Returns Task<Subscription> ListByEmail(string) Retrieves a collection of user references by a specified email value. public Task<IEnumerable<UserReference>> ListByEmail(string email) Parameters email string Returns Task<IEnumerable<UserReference>> ListByUserId(params string[]) Retrieves a collection of users where the id is included in the parameters. public Task<IEnumerable<User>> ListByUserId(params string[] userIds) Parameters userIds string[] Returns Task<IEnumerable<User>> ListCompanies(string) Retrieves a collection of company references of companies with which a user is affiliated. public Task<IEnumerable<CompanyReference>> ListCompanies(string userId) Parameters userId string Returns Task<IEnumerable<CompanyReference>> ListServices(string, int, int) Retrieves a paginated collection of service references of services to which a user is subscribed. public Task<IEnumerable<ServiceReference>> ListServices(string userId, int page = 1, int pageSize = 20) Parameters userId string page int pageSize int Returns Task<IEnumerable<ServiceReference>>"
  },
  "api/DNV.Veracity.Services.Api.Directory.html": {
    "href": "api/DNV.Veracity.Services.Api.Directory.html",
    "title": "Namespace DNV.Veracity.Services.Api.Directory",
    "keywords": "Namespace DNV.Veracity.Services.Api.Directory Classes CompanyDirectory ServiceDirectory UserDirectory"
  },
  "api/DNV.Veracity.Services.Api.Exceptions.ServerErrorException.html": {
    "href": "api/DNV.Veracity.Services.Api.Exceptions.ServerErrorException.html",
    "title": "Class ServerErrorException",
    "keywords": "Class ServerErrorException Namespace DNV.Veracity.Services.Api.Exceptions Assembly DNV.Veracity.Services.Api.dll [Serializable] public class ServerErrorException : Exception, ISerializable Inheritance object Exception ServerErrorException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Throws.IfNull<T>(T, string?) Constructors ServerErrorException(HttpStatusCode, string, string, Exception) public ServerErrorException(HttpStatusCode httpStatusCode, string responseContent, string message, Exception innerException) Parameters httpStatusCode HttpStatusCode responseContent string message string innerException Exception ServerErrorException(SerializationInfo, StreamingContext) protected ServerErrorException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo context StreamingContext Properties ResponseContent public string ResponseContent { get; set; } Property Value string StatusCode public HttpStatusCode StatusCode { get; set; } Property Value HttpStatusCode Methods FromResponse(HttpResponseMessage, Exception) public static Task<ServerErrorException> FromResponse(HttpResponseMessage response, Exception innerException = null) Parameters response HttpResponseMessage innerException Exception Returns Task<ServerErrorException>"
  },
  "api/DNV.Veracity.Services.Api.Exceptions.html": {
    "href": "api/DNV.Veracity.Services.Api.Exceptions.html",
    "title": "Namespace DNV.Veracity.Services.Api.Exceptions",
    "keywords": "Namespace DNV.Veracity.Services.Api.Exceptions Classes ServerErrorException"
  },
  "api/DNV.Veracity.Services.Api.Extensions.ConfigurationExtensions.html": {
    "href": "api/DNV.Veracity.Services.Api.Extensions.ConfigurationExtensions.html",
    "title": "Class ConfigurationExtensions",
    "keywords": "Class ConfigurationExtensions Namespace DNV.Veracity.Services.Api.Extensions Assembly DNV.Veracity.Services.Api.dll public static class ConfigurationExtensions Inheritance object ConfigurationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddSerializer(IServiceCollection, Action<JsonSerializerOptions>?) public static IServiceCollection AddSerializer(this IServiceCollection services, Action<JsonSerializerOptions>? optionsSetup = null) Parameters services IServiceCollection optionsSetup Action<JsonSerializerOptions> Returns IServiceCollection"
  },
  "api/DNV.Veracity.Services.Api.Extensions.IApiClientExtensions.html": {
    "href": "api/DNV.Veracity.Services.Api.Extensions.IApiClientExtensions.html",
    "title": "Class IApiClientExtensions",
    "keywords": "Class IApiClientExtensions Namespace DNV.Veracity.Services.Api.Extensions Assembly DNV.Veracity.Services.Api.dll public static class IApiClientExtensions Inheritance object IApiClientExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DeleteResource(IApiClient, string) public static Task DeleteResource(this IApiClient client, string requestUri) Parameters client IApiClient requestUri string Returns Task DeserializeFromStream<T>(IApiClient, Stream) public static Task<T?> DeserializeFromStream<T>(this IApiClient client, Stream stream) Parameters client IApiClient stream Stream Returns Task<T> Type Parameters T Deserialize<T>(IApiClient, string) public static T? Deserialize<T>(this IApiClient client, string strValue) Parameters client IApiClient strValue string Returns T Type Parameters T DoCallApi(IApiClient, Func<Task<HttpResponseMessage>>, bool, Func<HttpResponseMessage, bool, Task>?) public static Task<HttpResponseMessage> DoCallApi(this IApiClient client, Func<Task<HttpResponseMessage>> doSend, bool ignoreNotFound = false, Func<HttpResponseMessage, bool, Task>? checkResponse = null) Parameters client IApiClient doSend Func<Task<HttpResponseMessage>> ignoreNotFound bool checkResponse Func<HttpResponseMessage, bool, Task> Returns Task<HttpResponseMessage> DoCallApi<T>(IApiClient, Func<Task<HttpResponseMessage>>, bool, Func<HttpResponseMessage, Task<T>>?, Func<HttpResponseMessage, bool, Task>?) public static Task<T> DoCallApi<T>(this IApiClient client, Func<Task<HttpResponseMessage>> doSend, bool ignoreNotFound = false, Func<HttpResponseMessage, Task<T>>? buildResult = null, Func<HttpResponseMessage, bool, Task>? checkResponse = null) Parameters client IApiClient doSend Func<Task<HttpResponseMessage>> ignoreNotFound bool buildResult Func<HttpResponseMessage, Task<T>> checkResponse Func<HttpResponseMessage, bool, Task> Returns Task<T> Type Parameters T GetResource<T>(IApiClient, string, bool) public static Task<T> GetResource<T>(this IApiClient client, string requestUri, bool isNotFoundNull = true) Parameters client IApiClient requestUri string isNotFoundNull bool Returns Task<T> Type Parameters T PatchResource(IApiClient, string) public static Task PatchResource(this IApiClient client, string requestUri) Parameters client IApiClient requestUri string Returns Task PostResource<T>(IApiClient, string, HttpContent, bool) public static Task<T> PostResource<T>(this IApiClient client, string requestUri, HttpContent content, bool isNotFoundNull = true) Parameters client IApiClient requestUri string content HttpContent isNotFoundNull bool Returns Task<T> Type Parameters T PutResource(IApiClient, string, HttpContent) public static Task PutResource(this IApiClient client, string requestUri, HttpContent content) Parameters client IApiClient requestUri string content HttpContent Returns Task PutResource<T>(IApiClient, string, HttpContent, bool) public static Task<T> PutResource<T>(this IApiClient client, string requestUri, HttpContent content, bool isNotFoundNull = true) Parameters client IApiClient requestUri string content HttpContent isNotFoundNull bool Returns Task<T> Type Parameters T SerializeToStream<T>(IApiClient, T, Stream) public static Task SerializeToStream<T>(this IApiClient client, T value, Stream stream) Parameters client IApiClient value T stream Stream Returns Task Type Parameters T Serialize<T>(IApiClient, T) public static string Serialize<T>(this IApiClient client, T value) Parameters client IApiClient value T Returns string Type Parameters T ToJsonContent(IApiClient, object) public static HttpContent ToJsonContent(this IApiClient client, object content) Parameters client IApiClient content object Returns HttpContent ToJsonContent(IApiClient, string) public static HttpContent ToJsonContent(this IApiClient client, string serializedContent) Parameters client IApiClient serializedContent string Returns HttpContent ToResourceResult(IApiClient, HttpRequestMessage) public static Task ToResourceResult(this IApiClient client, HttpRequestMessage request) Parameters client IApiClient request HttpRequestMessage Returns Task ToResourceResult<T>(IApiClient, HttpRequestMessage, bool, Func<HttpResponseMessage, Task<T>>?, Func<HttpResponseMessage, bool, Task>?) public static Task<T> ToResourceResult<T>(this IApiClient client, HttpRequestMessage request, bool isNotFoundNull = false, Func<HttpResponseMessage, Task<T>>? buildResult = null, Func<HttpResponseMessage, bool, Task>? checkResponse = null) Parameters client IApiClient request HttpRequestMessage isNotFoundNull bool buildResult Func<HttpResponseMessage, Task<T>> checkResponse Func<HttpResponseMessage, bool, Task> Returns Task<T> Type Parameters T"
  },
  "api/DNV.Veracity.Services.Api.Extensions.html": {
    "href": "api/DNV.Veracity.Services.Api.Extensions.html",
    "title": "Namespace DNV.Veracity.Services.Api.Extensions",
    "keywords": "Namespace DNV.Veracity.Services.Api.Extensions Classes ConfigurationExtensions IApiClientExtensions"
  },
  "api/DNV.Veracity.Services.Api.IApiClient.html": {
    "href": "api/DNV.Veracity.Services.Api.IApiClient.html",
    "title": "Interface IApiClient",
    "keywords": "Interface IApiClient Namespace DNV.Veracity.Services.Api Assembly DNV.Veracity.Services.Api.dll public interface IApiClient Extension Methods IApiClientExtensions.DeleteResource(IApiClient, string) IApiClientExtensions.DeserializeFromStream<T>(IApiClient, Stream) IApiClientExtensions.Deserialize<T>(IApiClient, string) IApiClientExtensions.DoCallApi(IApiClient, Func<Task<HttpResponseMessage>>, bool, Func<HttpResponseMessage, bool, Task>?) IApiClientExtensions.DoCallApi<T>(IApiClient, Func<Task<HttpResponseMessage>>, bool, Func<HttpResponseMessage, Task<T>>?, Func<HttpResponseMessage, bool, Task>?) IApiClientExtensions.GetResource<T>(IApiClient, string, bool) IApiClientExtensions.PatchResource(IApiClient, string) IApiClientExtensions.PostResource<T>(IApiClient, string, HttpContent, bool) IApiClientExtensions.PutResource(IApiClient, string, HttpContent) IApiClientExtensions.PutResource<T>(IApiClient, string, HttpContent, bool) IApiClientExtensions.SerializeToStream<T>(IApiClient, T, Stream) IApiClientExtensions.Serialize<T>(IApiClient, T) IApiClientExtensions.ToJsonContent(IApiClient, object) IApiClientExtensions.ToJsonContent(IApiClient, string) IApiClientExtensions.ToResourceResult(IApiClient, HttpRequestMessage) IApiClientExtensions.ToResourceResult<T>(IApiClient, HttpRequestMessage, bool, Func<HttpResponseMessage, Task<T>>?, Func<HttpResponseMessage, bool, Task>?) Throws.IfNull<T>(T, string?) Properties Serializer ISerializer Serializer { get; } Property Value ISerializer Methods SendAsync(HttpRequestMessage) Task<HttpResponseMessage> SendAsync(HttpRequestMessage request) Parameters request HttpRequestMessage Returns Task<HttpResponseMessage>"
  },
  "api/DNV.Veracity.Services.Api.ISerializer.html": {
    "href": "api/DNV.Veracity.Services.Api.ISerializer.html",
    "title": "Interface ISerializer",
    "keywords": "Interface ISerializer Namespace DNV.Veracity.Services.Api Assembly DNV.Veracity.Services.Api.dll public interface ISerializer Extension Methods Throws.IfNull<T>(T, string?) Properties DataFormat DataFormat DataFormat { get; } Property Value DataFormat Methods DeserializeAsync<T>(Stream, CancellationToken) Task<T?> DeserializeAsync<T>(Stream stream, CancellationToken cancellationToken = default) Parameters stream Stream cancellationToken CancellationToken Returns Task<T> Type Parameters T Deserialize<T>(string) T? Deserialize<T>(string strValue) Parameters strValue string Returns T Type Parameters T SerializeAsync<T>(T, Stream, CancellationToken) Task SerializeAsync<T>(T value, Stream stream, CancellationToken cancellationToken = default) Parameters value T stream Stream cancellationToken CancellationToken Returns Task Type Parameters T Serialize<T>(T) string Serialize<T>(T value) Parameters value T Returns string Type Parameters T"
  },
  "api/DNV.Veracity.Services.Api.JsonSerializer.html": {
    "href": "api/DNV.Veracity.Services.Api.JsonSerializer.html",
    "title": "Class JsonSerializer",
    "keywords": "Class JsonSerializer Namespace DNV.Veracity.Services.Api Assembly DNV.Veracity.Services.Api.dll public class JsonSerializer : ISerializer Inheritance object JsonSerializer Implements ISerializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors JsonSerializer(IOptions<JsonSerializerOptions>) public JsonSerializer(IOptions<JsonSerializerOptions> jsonSerializerOptions) Parameters jsonSerializerOptions IOptions<JsonSerializerOptions> Properties DataFormat public DataFormat DataFormat { get; } Property Value DataFormat Methods DeserializeAsync<T>(Stream, CancellationToken) public Task<T?> DeserializeAsync<T>(Stream stream, CancellationToken cancellationToken) Parameters stream Stream cancellationToken CancellationToken Returns Task<T> Type Parameters T Deserialize<T>(string) public T? Deserialize<T>(string strValue) Parameters strValue string Returns T Type Parameters T SerializeAsync<T>(T, Stream, CancellationToken) public Task SerializeAsync<T>(T value, Stream stream, CancellationToken cancellationToken) Parameters value T stream Stream cancellationToken CancellationToken Returns Task Type Parameters T Serialize<T>(T) public string Serialize<T>(T value) Parameters value T Returns string Type Parameters T"
  },
  "api/DNV.Veracity.Services.Api.Models.Administrator.html": {
    "href": "api/DNV.Veracity.Services.Api.Models.Administrator.html",
    "title": "Class Administrator",
    "keywords": "Class Administrator Namespace DNV.Veracity.Services.Api.Models Assembly DNV.Veracity.Services.Api.dll public class Administrator : User Inheritance object User Administrator Inherited Members User.Name User.Email User.Id User.NumberOfCompanies User.IsEmailVerified User.Language User.Identity User.Phone User.IsPhoneVerified User.ServicesUrl User.CompaniesUrl User.FirstName User.LastName User.CountryCode User.IsManagedAccount User.IsActivated object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties Roles public RoleReference[] Roles { get; set; } Property Value RoleReference[]"
  },
  "api/DNV.Veracity.Services.Api.Models.AdministratorReference.html": {
    "href": "api/DNV.Veracity.Services.Api.Models.AdministratorReference.html",
    "title": "Class AdministratorReference",
    "keywords": "Class AdministratorReference Namespace DNV.Veracity.Services.Api.Models Assembly DNV.Veracity.Services.Api.dll public class AdministratorReference : UserReference Inheritance object Reference UserReference AdministratorReference Inherited Members UserReference.IsActivated Reference.Identity Reference.Name Reference.Id Reference.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties AccessLevelUrl public string AccessLevelUrl { get; set; } Property Value string ServiceId public string ServiceId { get; set; } Property Value string"
  },
  "api/DNV.Veracity.Services.Api.Models.Company.html": {
    "href": "api/DNV.Veracity.Services.Api.Models.Company.html",
    "title": "Class Company",
    "keywords": "Class Company Namespace DNV.Veracity.Services.Api.Models Assembly DNV.Veracity.Services.Api.dll public class Company Inheritance object Company Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties AddressLines public IEnumerable<string> AddressLines { get; set; } Property Value IEnumerable<string> City public string City { get; set; } Property Value string Country public string Country { get; set; } Property Value string CountryCode public string CountryCode { get; set; } Property Value string Email public string Email { get; set; } Property Value string Id public string Id { get; set; } Property Value string InternalId public string InternalId { get; set; } Property Value string Name public string Name { get; set; } Property Value string NumberOfEmployees [JsonPropertyName(\"#employees\")] public uint NumberOfEmployees { get; set; } Property Value uint NumberOfRequests [JsonPropertyName(\"#requests\")] public uint NumberOfRequests { get; set; } Property Value uint Url public string Url { get; set; } Property Value string UsersUrl public string UsersUrl { get; set; } Property Value string ZipCode public string ZipCode { get; set; } Property Value string"
  },
  "api/DNV.Veracity.Services.Api.Models.CompanyReference.html": {
    "href": "api/DNV.Veracity.Services.Api.Models.CompanyReference.html",
    "title": "Class CompanyReference",
    "keywords": "Class CompanyReference Namespace DNV.Veracity.Services.Api.Models Assembly DNV.Veracity.Services.Api.dll public class CompanyReference : Reference Inheritance object Reference CompanyReference Inherited Members Reference.Identity Reference.Name Reference.Id Reference.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?)"
  },
  "api/DNV.Veracity.Services.Api.Models.CreateUserReference.html": {
    "href": "api/DNV.Veracity.Services.Api.Models.CreateUserReference.html",
    "title": "Class CreateUserReference",
    "keywords": "Class CreateUserReference Namespace DNV.Veracity.Services.Api.Models Assembly DNV.Veracity.Services.Api.dll public class CreateUserReference : UserReference Inheritance object Reference UserReference CreateUserReference Inherited Members UserReference.IsActivated Reference.Identity Reference.Name Reference.Id Reference.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties ConfirmationUrl public string ConfirmationUrl { get; set; } Property Value string"
  },
  "api/DNV.Veracity.Services.Api.Models.Message.html": {
    "href": "api/DNV.Veracity.Services.Api.Models.Message.html",
    "title": "Class Message",
    "keywords": "Class Message Namespace DNV.Veracity.Services.Api.Models Assembly DNV.Veracity.Services.Api.dll public class Message Inheritance object Message Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties ChannelId public string ChannelId { get; set; } Property Value string Content public string Content { get; set; } Property Value string Id public string Id { get; set; } Property Value string Name public string Name { get; set; } Property Value string TimeStamp public string TimeStamp { get; set; } Property Value string Type public int Type { get; set; } Property Value int"
  },
  "api/DNV.Veracity.Services.Api.Models.MyServiceReference.html": {
    "href": "api/DNV.Veracity.Services.Api.Models.MyServiceReference.html",
    "title": "Class MyServiceReference",
    "keywords": "Class MyServiceReference Namespace DNV.Veracity.Services.Api.Models Assembly DNV.Veracity.Services.Api.dll public class MyServiceReference : ServiceReference Inheritance object Reference ServiceReference MyServiceReference Inherited Members Reference.Identity Reference.Name Reference.Id Reference.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties ServiceUrl public string ServiceUrl { get; set; } Property Value string"
  },
  "api/DNV.Veracity.Services.Api.Models.PolicyValidationResult.html": {
    "href": "api/DNV.Veracity.Services.Api.Models.PolicyValidationResult.html",
    "title": "Class PolicyValidationResult",
    "keywords": "Class PolicyValidationResult Namespace DNV.Veracity.Services.Api.Models Assembly DNV.Veracity.Services.Api.dll public class PolicyValidationResult Inheritance object PolicyValidationResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties Information public string Information { get; set; } Property Value string Message public string Message { get; set; } Property Value string StatusCode public int StatusCode { get; set; } Property Value int SubCode public int SubCode { get; set; } Property Value int Url public string Url { get; set; } Property Value string ViolatedPolicies public List<string> ViolatedPolicies { get; set; } Property Value List<string>"
  },
  "api/DNV.Veracity.Services.Api.Models.Profile.html": {
    "href": "api/DNV.Veracity.Services.Api.Models.Profile.html",
    "title": "Class Profile",
    "keywords": "Class Profile Namespace DNV.Veracity.Services.Api.Models Assembly DNV.Veracity.Services.Api.dll public class Profile Inheritance object Profile Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties CompaniesUrl public string CompaniesUrl { get; set; } Property Value string CountryCode public string CountryCode { get; set; } Property Value string Email public string Email { get; set; } Property Value string FirstName public string FirstName { get; set; } Property Value string Id public string Id { get; set; } Property Value string Identity public string Identity { get; set; } Property Value string IsAccountManaged [JsonPropertyName(\"managedAccount\")] public bool IsAccountManaged { get; set; } Property Value bool IsActivated [JsonPropertyName(\"activated\")] public bool IsActivated { get; set; } Property Value bool IsEmailVerified [JsonPropertyName(\"verifiedEmail\")] public bool IsEmailVerified { get; set; } Property Value bool IsPhoneVerified [JsonPropertyName(\"verifiedPhone\")] public bool IsPhoneVerified { get; set; } Property Value bool Language public string Language { get; set; } Property Value string LastName public string LastName { get; set; } Property Value string MessageUrl public string MessageUrl { get; set; } Property Value string Name public string Name { get; set; } Property Value string NumberOfCompanies [JsonPropertyName(\"#companies\")] public uint NumberOfCompanies { get; set; } Property Value uint Phone public string Phone { get; set; } Property Value string ProfilePageUrl public string ProfilePageUrl { get; set; } Property Value string ServicesUrl public string ServicesUrl { get; set; } Property Value string"
  },
  "api/DNV.Veracity.Services.Api.Models.ProfilePicture.html": {
    "href": "api/DNV.Veracity.Services.Api.Models.ProfilePicture.html",
    "title": "Class ProfilePicture",
    "keywords": "Class ProfilePicture Namespace DNV.Veracity.Services.Api.Models Assembly DNV.Veracity.Services.Api.dll public class ProfilePicture Inheritance object ProfilePicture Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties Image public byte[] Image { get; set; } Property Value byte[] MimeType public string MimeType { get; set; } Property Value string Methods AsBase64Image() public string AsBase64Image() Returns string"
  },
  "api/DNV.Veracity.Services.Api.Models.Reference.html": {
    "href": "api/DNV.Veracity.Services.Api.Models.Reference.html",
    "title": "Class Reference",
    "keywords": "Class Reference Namespace DNV.Veracity.Services.Api.Models Assembly DNV.Veracity.Services.Api.dll public abstract class Reference Inheritance object Reference Derived CompanyReference RoleReference ServiceReference UserReference Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties Description public string Description { get; set; } Property Value string Id public string Id { get; set; } Property Value string Identity public string Identity { get; set; } Property Value string Name public string Name { get; set; } Property Value string"
  },
  "api/DNV.Veracity.Services.Api.Models.RoleReference.html": {
    "href": "api/DNV.Veracity.Services.Api.Models.RoleReference.html",
    "title": "Class RoleReference",
    "keywords": "Class RoleReference Namespace DNV.Veracity.Services.Api.Models Assembly DNV.Veracity.Services.Api.dll public class RoleReference : Reference Inheritance object Reference RoleReference Inherited Members Reference.Identity Reference.Name Reference.Id Reference.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?)"
  },
  "api/DNV.Veracity.Services.Api.Models.Service.html": {
    "href": "api/DNV.Veracity.Services.Api.Models.Service.html",
    "title": "Class Service",
    "keywords": "Class Service Namespace DNV.Veracity.Services.Api.Models Assembly DNV.Veracity.Services.Api.dll public class Service Inheritance object Service Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties ApiAudience public string ApiAudience { get; set; } Property Value string Category public string Category { get; set; } Property Value string ChildrenUrl public string ChildrenUrl { get; set; } Property Value string Description public string Description { get; set; } Property Value string Id public string Id { get; set; } Property Value string IsInherited [JsonPropertyName(\"inherited\")] public bool IsInherited { get; set; } Property Value bool IsPublic [JsonPropertyName(\"public\")] public bool IsPublic { get; set; } Property Value bool IsSelfSubscribable [JsonPropertyName(\"selfSubscribe\")] public bool IsSelfSubscribable { get; set; } Property Value bool LastUpdated public DateTime? LastUpdated { get; set; } Property Value DateTime? Name public string Name { get; set; } Property Value string ParentId public string ParentId { get; set; } Property Value string ParentUrl public string ParentUrl { get; set; } Property Value string ServiceOwner public string ServiceOwner { get; set; } Property Value string ServiceUrl public string ServiceUrl { get; set; } Property Value string ShortDescription public string ShortDescription { get; set; } Property Value string TermsOfUser public string TermsOfUser { get; set; } Property Value string"
  },
  "api/DNV.Veracity.Services.Api.Models.ServiceReference.html": {
    "href": "api/DNV.Veracity.Services.Api.Models.ServiceReference.html",
    "title": "Class ServiceReference",
    "keywords": "Class ServiceReference Namespace DNV.Veracity.Services.Api.Models Assembly DNV.Veracity.Services.Api.dll public class ServiceReference : Reference Inheritance object Reference ServiceReference Derived MyServiceReference Inherited Members Reference.Identity Reference.Name Reference.Id Reference.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?)"
  },
  "api/DNV.Veracity.Services.Api.Models.Subscription.html": {
    "href": "api/DNV.Veracity.Services.Api.Models.Subscription.html",
    "title": "Class Subscription",
    "keywords": "Class Subscription Namespace DNV.Veracity.Services.Api.Models Assembly DNV.Veracity.Services.Api.dll public class Subscription Inheritance object Subscription Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties Role public RoleReference Role { get; set; } Property Value RoleReference Service public ServiceReference Service { get; set; } Property Value ServiceReference SubscriptionState public SubscriptionState SubscriptionState { get; set; } Property Value SubscriptionState User public UserReference User { get; set; } Property Value UserReference"
  },
  "api/DNV.Veracity.Services.Api.Models.SubscriptionState.html": {
    "href": "api/DNV.Veracity.Services.Api.Models.SubscriptionState.html",
    "title": "Class SubscriptionState",
    "keywords": "Class SubscriptionState Namespace DNV.Veracity.Services.Api.Models Assembly DNV.Veracity.Services.Api.dll public class SubscriptionState Inheritance object SubscriptionState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties State public SubscriptionStates State { get; set; } Property Value SubscriptionStates"
  },
  "api/DNV.Veracity.Services.Api.Models.SubscriptionStates.html": {
    "href": "api/DNV.Veracity.Services.Api.Models.SubscriptionStates.html",
    "title": "Enum SubscriptionStates",
    "keywords": "Enum SubscriptionStates Namespace DNV.Veracity.Services.Api.Models Assembly DNV.Veracity.Services.Api.dll public enum SubscriptionStates Extension Methods Throws.IfNull<T>(T, string?) Fields Subscribing = 0"
  },
  "api/DNV.Veracity.Services.Api.Models.User.html": {
    "href": "api/DNV.Veracity.Services.Api.Models.User.html",
    "title": "Class User",
    "keywords": "Class User Namespace DNV.Veracity.Services.Api.Models Assembly DNV.Veracity.Services.Api.dll public class User Inheritance object User Derived Administrator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties CompaniesUrl public string CompaniesUrl { get; set; } Property Value string CountryCode public string CountryCode { get; set; } Property Value string Email public string Email { get; set; } Property Value string FirstName public string FirstName { get; set; } Property Value string Id public string Id { get; set; } Property Value string Identity public string Identity { get; set; } Property Value string IsActivated [JsonPropertyName(\"activated\")] public bool IsActivated { get; set; } Property Value bool IsEmailVerified [JsonPropertyName(\"verifiedEmail\")] public bool IsEmailVerified { get; set; } Property Value bool IsManagedAccount [JsonPropertyName(\"managedAccount\")] public bool IsManagedAccount { get; set; } Property Value bool IsPhoneVerified [JsonPropertyName(\"verifiedPhone\")] public bool IsPhoneVerified { get; set; } Property Value bool Language public string Language { get; set; } Property Value string LastName public string LastName { get; set; } Property Value string Name public string Name { get; set; } Property Value string NumberOfCompanies [JsonPropertyName(\"#companies\")] public uint NumberOfCompanies { get; set; } Property Value uint Phone public string Phone { get; set; } Property Value string ServicesUrl public string ServicesUrl { get; set; } Property Value string"
  },
  "api/DNV.Veracity.Services.Api.Models.UserReference.html": {
    "href": "api/DNV.Veracity.Services.Api.Models.UserReference.html",
    "title": "Class UserReference",
    "keywords": "Class UserReference Namespace DNV.Veracity.Services.Api.Models Assembly DNV.Veracity.Services.Api.dll public class UserReference : Reference Inheritance object Reference UserReference Derived AdministratorReference CreateUserReference Inherited Members Reference.Identity Reference.Name Reference.Id Reference.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties IsActivated [JsonPropertyName(\"activated\")] public bool IsActivated { get; set; } Property Value bool"
  },
  "api/DNV.Veracity.Services.Api.Models.Widget.html": {
    "href": "api/DNV.Veracity.Services.Api.Models.Widget.html",
    "title": "Class Widget",
    "keywords": "Class Widget Namespace DNV.Veracity.Services.Api.Models Assembly DNV.Veracity.Services.Api.dll public class Widget Inheritance object Widget Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties Color public string Color { get; set; } Property Value string Description public string Description { get; set; } Property Value string Id public Guid Id { get; set; } Property Value Guid LogoUrl public string LogoUrl { get; set; } Property Value string Name public string Name { get; set; } Property Value string PictogramUrl public string PictogramUrl { get; set; } Property Value string SequenceNo public int SequenceNo { get; set; } Property Value int ServiceId public Guid ServiceId { get; set; } Property Value Guid ShowTitle public bool ShowTitle { get; set; } Property Value bool SupportsMobile public bool SupportsMobile { get; set; } Property Value bool Type public string Type { get; set; } Property Value string Url public string Url { get; set; } Property Value string"
  },
  "api/DNV.Veracity.Services.Api.Models.html": {
    "href": "api/DNV.Veracity.Services.Api.Models.html",
    "title": "Namespace DNV.Veracity.Services.Api.Models",
    "keywords": "Namespace DNV.Veracity.Services.Api.Models Classes Administrator AdministratorReference Company CompanyReference CreateUserReference Message MyServiceReference PolicyValidationResult Profile ProfilePicture Reference RoleReference Service ServiceReference Subscription SubscriptionState User UserReference Widget Enums SubscriptionStates"
  },
  "api/DNV.Veracity.Services.Api.My.Abstractions.IMyCompanies.html": {
    "href": "api/DNV.Veracity.Services.Api.My.Abstractions.IMyCompanies.html",
    "title": "Interface IMyCompanies",
    "keywords": "Interface IMyCompanies Namespace DNV.Veracity.Services.Api.My.Abstractions Assembly DNV.Veracity.Services.Api.My.Abstractions.dll Exposes methods available for 'Companies' resource within 'My' view point. public interface IMyCompanies Extension Methods Throws.IfNull<T>(T, string?) Methods List() Retrieves a collection of company references for the authenticated user. Task<IEnumerable<CompanyReference>> List() Returns Task<IEnumerable<CompanyReference>>"
  },
  "api/DNV.Veracity.Services.Api.My.Abstractions.IMyMessages.html": {
    "href": "api/DNV.Veracity.Services.Api.My.Abstractions.IMyMessages.html",
    "title": "Interface IMyMessages",
    "keywords": "Interface IMyMessages Namespace DNV.Veracity.Services.Api.My.Abstractions Assembly DNV.Veracity.Services.Api.My.Abstractions.dll Exposes methods available for 'Messages' resource within 'My' view point. public interface IMyMessages Extension Methods Throws.IfNull<T>(T, string?) Methods Get(string) Retrieves an individual message addressed to the authenticated user. [Obsolete(\"This endpoint is hidden\")] Task<Message> Get(string messageId) Parameters messageId string The unique identifier for the message to be retrieved. Returns Task<Message> GetUnreadCount() Retrieves the numeric value indicating how many messages have not been marked as read by the authenticated user. Task<int> GetUnreadCount() Returns Task<int> List(bool) Retrieves a collection of messages addressed to the authenticated user. Task<IEnumerable<Message>> List(bool includeRead = false) Parameters includeRead bool Set this to true to include messages marked as read. Returns Task<IEnumerable<Message>> MarkAllMessagesAsRead() Marks all the messages as read for the authenticated user. Task MarkAllMessagesAsRead() Returns Task"
  },
  "api/DNV.Veracity.Services.Api.My.Abstractions.IMyPolicies.html": {
    "href": "api/DNV.Veracity.Services.Api.My.Abstractions.IMyPolicies.html",
    "title": "Interface IMyPolicies",
    "keywords": "Interface IMyPolicies Namespace DNV.Veracity.Services.Api.My.Abstractions Assembly DNV.Veracity.Services.Api.My.Abstractions.dll Exposes methods available for 'Policies' resource within 'My' view point. public interface IMyPolicies Extension Methods Throws.IfNull<T>(T, string?) Methods ValidatePolicies(string) Validates all policies for the authenticated user. Task<PolicyValidationResult> ValidatePolicies(string returnUrl = null) Parameters returnUrl string Returns Task<PolicyValidationResult> ValidatePolicy(string, string, string) Validates an individual policy for the authenticated user. Task<PolicyValidationResult> ValidatePolicy(string serviceId, string returnUrl = null, string skipSubscriptionCheck = null) Parameters serviceId string returnUrl string skipSubscriptionCheck string Returns Task<PolicyValidationResult>"
  },
  "api/DNV.Veracity.Services.Api.My.Abstractions.IMyProfile.html": {
    "href": "api/DNV.Veracity.Services.Api.My.Abstractions.IMyProfile.html",
    "title": "Interface IMyProfile",
    "keywords": "Interface IMyProfile Namespace DNV.Veracity.Services.Api.My.Abstractions Assembly DNV.Veracity.Services.Api.My.Abstractions.dll Exposes methods available for 'Profile' resource within 'My' view point. public interface IMyProfile Extension Methods Throws.IfNull<T>(T, string?) Methods Get() Retrieves profile of authenticated user. Task<Profile> Get() Returns Task<Profile> GetProfilePicture() Retreives the profile picture of the authenticated user if one is set, otherwise a 404 is returned. Task<ProfilePicture> GetProfilePicture() Returns Task<ProfilePicture>"
  },
  "api/DNV.Veracity.Services.Api.My.Abstractions.IMyServices.html": {
    "href": "api/DNV.Veracity.Services.Api.My.Abstractions.IMyServices.html",
    "title": "Interface IMyServices",
    "keywords": "Interface IMyServices Namespace DNV.Veracity.Services.Api.My.Abstractions Assembly DNV.Veracity.Services.Api.My.Abstractions.dll Exposes methods available for 'Services' resource within 'My' view point. public interface IMyServices Extension Methods Throws.IfNull<T>(T, string?) Methods List() Retrieves a collection of service references for services the authenticated user is subscribed to. Task<IEnumerable<MyServiceReference>> List() Returns Task<IEnumerable<MyServiceReference>>"
  },
  "api/DNV.Veracity.Services.Api.My.Abstractions.IMyWidgets.html": {
    "href": "api/DNV.Veracity.Services.Api.My.Abstractions.IMyWidgets.html",
    "title": "Interface IMyWidgets",
    "keywords": "Interface IMyWidgets Namespace DNV.Veracity.Services.Api.My.Abstractions Assembly DNV.Veracity.Services.Api.My.Abstractions.dll Exposes methods available for 'Widgets' resource within 'My' view point. public interface IMyWidgets Extension Methods Throws.IfNull<T>(T, string?) Methods Get() Please use the method List() instead. [Obsolete(\"This method has been deprecated please use List().\")] Task<IEnumerable<Widget>> Get() Returns Task<IEnumerable<Widget>> List() Retrieve a collection of widgets for the services subscribed to by the authenticated user. Task<IEnumerable<Widget>> List() Returns Task<IEnumerable<Widget>>"
  },
  "api/DNV.Veracity.Services.Api.My.Abstractions.html": {
    "href": "api/DNV.Veracity.Services.Api.My.Abstractions.html",
    "title": "Namespace DNV.Veracity.Services.Api.My.Abstractions",
    "keywords": "Namespace DNV.Veracity.Services.Api.My.Abstractions Interfaces IMyCompanies Exposes methods available for 'Companies' resource within 'My' view point. IMyMessages Exposes methods available for 'Messages' resource within 'My' view point. IMyPolicies Exposes methods available for 'Policies' resource within 'My' view point. IMyProfile Exposes methods available for 'Profile' resource within 'My' view point. IMyServices Exposes methods available for 'Services' resource within 'My' view point. IMyWidgets Exposes methods available for 'Widgets' resource within 'My' view point."
  },
  "api/DNV.Veracity.Services.Api.My.Extensions.ConfigurationExtensions.html": {
    "href": "api/DNV.Veracity.Services.Api.My.Extensions.ConfigurationExtensions.html",
    "title": "Class ConfigurationExtensions",
    "keywords": "Class ConfigurationExtensions Namespace DNV.Veracity.Services.Api.My.Extensions Assembly DNV.Veracity.Services.Api.My.dll public static class ConfigurationExtensions Inheritance object ConfigurationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddMyCompanies(IServiceCollection, string) Adds an implementation of IMyCompanies to the IServiceCollection. public static IServiceCollection AddMyCompanies(this IServiceCollection services, string clientConfigurationName = \"companies-my-api\") Parameters services IServiceCollection The IServiceCollection to add the IHttpClientFactory instance to. clientConfigurationName string The name of the configuration section to retrieve OAuthHttpClientOptions from. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. AddMyMessages(IServiceCollection, string) Adds an implementation of IMyMessages to the IServiceCollection. public static IServiceCollection AddMyMessages(this IServiceCollection services, string clientConfigurationName = \"messages-my-api\") Parameters services IServiceCollection The IServiceCollection to add the IHttpClientFactory instance to. clientConfigurationName string The name of the configuration section to retrieve OAuthHttpClientOptions from. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. AddMyPolicies(IServiceCollection, string) Adds an implementation of IMyPolicies to the IServiceCollection. public static IServiceCollection AddMyPolicies(this IServiceCollection services, string clientConfigurationName = \"policies-my-api\") Parameters services IServiceCollection The IServiceCollection to add the IHttpClientFactory instance to. clientConfigurationName string The name of the configuration section to retrieve OAuthHttpClientOptions from. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. AddMyProfile(IServiceCollection, string) Adds an implementation of IMyProfile to the IServiceCollection. public static IServiceCollection AddMyProfile(this IServiceCollection services, string clientConfigurationName = \"profile-my-api\") Parameters services IServiceCollection The IServiceCollection to add the IHttpClientFactory instance to. clientConfigurationName string The name of the configuration section to retrieve OAuthHttpClientOptions from. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. AddMyServices(IServiceCollection, string) Adds an implementation of IMyServices to the IServiceCollection. public static IServiceCollection AddMyServices(this IServiceCollection services, string clientConfigurationName = \"services-my-api\") Parameters services IServiceCollection The IServiceCollection to add the IHttpClientFactory instance to. clientConfigurationName string The name of the configuration section to retrieve OAuthHttpClientOptions from. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. AddMyWidgets(IServiceCollection, string) Adds an implementation of IMyWidgets to the IServiceCollection. public static IServiceCollection AddMyWidgets(this IServiceCollection services, string clientConfigurationName = \"widgets-my-api\") Parameters services IServiceCollection The IServiceCollection to add the IHttpClientFactory instance to. clientConfigurationName string The name of the configuration section to retrieve OAuthHttpClientOptions from. Returns IServiceCollection The IServiceCollection so that additional calls can be chained."
  },
  "api/DNV.Veracity.Services.Api.My.Extensions.html": {
    "href": "api/DNV.Veracity.Services.Api.My.Extensions.html",
    "title": "Namespace DNV.Veracity.Services.Api.My.Extensions",
    "keywords": "Namespace DNV.Veracity.Services.Api.My.Extensions Classes ConfigurationExtensions"
  },
  "api/DNV.Veracity.Services.Api.My.MyCompanies.html": {
    "href": "api/DNV.Veracity.Services.Api.My.MyCompanies.html",
    "title": "Class MyCompanies",
    "keywords": "Class MyCompanies Namespace DNV.Veracity.Services.Api.My Assembly DNV.Veracity.Services.Api.My.dll public class MyCompanies : IMyCompanies Inheritance object MyCompanies Implements IMyCompanies Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors MyCompanies(ApiClientFactory) public MyCompanies(ApiClientFactory apiClientFactory) Parameters apiClientFactory ApiClientFactory Methods List() Retrieves a collection of company references for the authenticated user. public Task<IEnumerable<CompanyReference>> List() Returns Task<IEnumerable<CompanyReference>>"
  },
  "api/DNV.Veracity.Services.Api.My.MyMessages.html": {
    "href": "api/DNV.Veracity.Services.Api.My.MyMessages.html",
    "title": "Class MyMessages",
    "keywords": "Class MyMessages Namespace DNV.Veracity.Services.Api.My Assembly DNV.Veracity.Services.Api.My.dll public class MyMessages : IMyMessages Inheritance object MyMessages Implements IMyMessages Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors MyMessages(ApiClientFactory) public MyMessages(ApiClientFactory apiClientFactory) Parameters apiClientFactory ApiClientFactory Methods Get(string) Retrieves an individual message addressed to the authenticated user. public Task<Message> Get(string messageId) Parameters messageId string The unique identifier for the message to be retrieved. Returns Task<Message> GetUnreadCount() Retrieves the numeric value indicating how many messages have not been marked as read by the authenticated user. public Task<int> GetUnreadCount() Returns Task<int> List(bool) Retrieves a collection of messages addressed to the authenticated user. public Task<IEnumerable<Message>> List(bool includeRead = false) Parameters includeRead bool Set this to true to include messages marked as read. Returns Task<IEnumerable<Message>> MarkAllMessagesAsRead() Marks all the messages as read for the authenticated user. public Task MarkAllMessagesAsRead() Returns Task"
  },
  "api/DNV.Veracity.Services.Api.My.MyPolicies.html": {
    "href": "api/DNV.Veracity.Services.Api.My.MyPolicies.html",
    "title": "Class MyPolicies",
    "keywords": "Class MyPolicies Namespace DNV.Veracity.Services.Api.My Assembly DNV.Veracity.Services.Api.My.dll public class MyPolicies : IMyPolicies Inheritance object MyPolicies Implements IMyPolicies Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors MyPolicies(ApiClientFactory) public MyPolicies(ApiClientFactory apiClientFactory) Parameters apiClientFactory ApiClientFactory Methods BuildResult<T>(HttpResponseMessage) protected Task<T> BuildResult<T>(HttpResponseMessage response) Parameters response HttpResponseMessage Returns Task<T> Type Parameters T CheckResponse(HttpResponseMessage, bool) protected Task CheckResponse(HttpResponseMessage response, bool ignoreNotFound = false) Parameters response HttpResponseMessage ignoreNotFound bool Returns Task ValidatePolicies(string) Validates all policies for the authenticated user. public Task<PolicyValidationResult> ValidatePolicies(string returnUrl = null) Parameters returnUrl string Returns Task<PolicyValidationResult> ValidatePolicy(string, string, string) Validates an individual policy for the authenticated user. public Task<PolicyValidationResult> ValidatePolicy(string serviceId, string returnUrl = null, string skipSubscriptionCheck = null) Parameters serviceId string returnUrl string skipSubscriptionCheck string Returns Task<PolicyValidationResult>"
  },
  "api/DNV.Veracity.Services.Api.My.MyProfile.html": {
    "href": "api/DNV.Veracity.Services.Api.My.MyProfile.html",
    "title": "Class MyProfile",
    "keywords": "Class MyProfile Namespace DNV.Veracity.Services.Api.My Assembly DNV.Veracity.Services.Api.My.dll public class MyProfile : IMyProfile Inheritance object MyProfile Implements IMyProfile Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors MyProfile(ApiClientFactory) public MyProfile(ApiClientFactory apiClientFactory) Parameters apiClientFactory ApiClientFactory Methods Get() Retrieves profile of authenticated user. public Task<Profile> Get() Returns Task<Profile> GetProfilePicture() Retreives the profile picture of the authenticated user if one is set, otherwise a 404 is returned. public Task<ProfilePicture> GetProfilePicture() Returns Task<ProfilePicture>"
  },
  "api/DNV.Veracity.Services.Api.My.MyServices.html": {
    "href": "api/DNV.Veracity.Services.Api.My.MyServices.html",
    "title": "Class MyServices",
    "keywords": "Class MyServices Namespace DNV.Veracity.Services.Api.My Assembly DNV.Veracity.Services.Api.My.dll public class MyServices : IMyServices Inheritance object MyServices Implements IMyServices Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors MyServices(ApiClientFactory) public MyServices(ApiClientFactory apiClientFactory) Parameters apiClientFactory ApiClientFactory Methods List() Retrieves a collection of service references for services the authenticated user is subscribed to. public Task<IEnumerable<MyServiceReference>> List() Returns Task<IEnumerable<MyServiceReference>>"
  },
  "api/DNV.Veracity.Services.Api.My.html": {
    "href": "api/DNV.Veracity.Services.Api.My.html",
    "title": "Namespace DNV.Veracity.Services.Api.My",
    "keywords": "Namespace DNV.Veracity.Services.Api.My Classes MyCompanies MyMessages MyPolicies MyProfile MyServices"
  },
  "api/DNV.Veracity.Services.Api.This.Abstractions.IThisAdministrators.html": {
    "href": "api/DNV.Veracity.Services.Api.This.Abstractions.IThisAdministrators.html",
    "title": "Interface IThisAdministrators",
    "keywords": "Interface IThisAdministrators Namespace DNV.Veracity.Services.Api.This.Abstractions Assembly DNV.Veracity.Services.Api.This.Abstractions.dll Exposes methods available for 'Administrators' resource within 'This' view point. public interface IThisAdministrators Extension Methods Throws.IfNull<T>(T, string?) Methods Get(string) Retrieves an individual administrator for the authenticated service. Task<Administrator> Get(string userId) Parameters userId string Returns Task<Administrator> List(int, int) Retrieves a paginated collection of administrator references for the authenticated service. Task<IEnumerable<AdministratorReference>> List(int page, int pageSize) Parameters page int pageSize int Returns Task<IEnumerable<AdministratorReference>>"
  },
  "api/DNV.Veracity.Services.Api.This.Abstractions.IThisServices.html": {
    "href": "api/DNV.Veracity.Services.Api.This.Abstractions.IThisServices.html",
    "title": "Interface IThisServices",
    "keywords": "Interface IThisServices Namespace DNV.Veracity.Services.Api.This.Abstractions Assembly DNV.Veracity.Services.Api.This.Abstractions.dll Exposes methods available for 'Services' resource within 'This' view point. public interface IThisServices Extension Methods Throws.IfNull<T>(T, string?) Methods AddSubscription(string, string, SubscriptionOptions) Add a subscription to the authenticated service or nested services. Task AddSubscription(string serviceId, string userId, SubscriptionOptions options) Parameters serviceId string userId string options SubscriptionOptions Returns Task GetAdministrator(string, string) Retrieve an individual administrator reference to a administrator of the authenticated service or nested services. Task<Administrator> GetAdministrator(string serviceId, string userId) Parameters serviceId string userId string Returns Task<Administrator> GetProfilePicture(string, string) Retreives the profile picture of a user if one is set, otherwise a 404 is returned. Task<ProfilePicture> GetProfilePicture(string serviceId, string userId) Parameters serviceId string userId string Returns Task<ProfilePicture> GetSubscriber(string, string) Retrieve an individual user reference to a user which has a subscription to a specified service. Task<UserReference> GetSubscriber(string serviceId, string userId) Parameters serviceId string userId string Returns Task<UserReference> List(int, int) Retrieve a paginated collection of services the authenticated service has access to. Task<IEnumerable<ServiceReference>> List(int page, int pageSize) Parameters page int pageSize int Returns Task<IEnumerable<ServiceReference>> ListAdministrators(string, int, int) Retrieve a paginated collection of administrator references of administrators for a specified service. Task<IEnumerable<AdministratorReference>> ListAdministrators(string serviceId, int page, int pageSize) Parameters serviceId string page int pageSize int Returns Task<IEnumerable<AdministratorReference>> ListSubscribers(string, int, int) Retrieve a paginated collection of user references of users subscribed to a specified service. Task<IEnumerable<UserReference>> ListSubscribers(string serviceId, int page, int pageSize) Parameters serviceId string page int pageSize int Returns Task<IEnumerable<UserReference>> NotifySubscribers(string, string, NotificationOptions) Send a notification to users subscribed to the authenticated service or nested service. Task NotifySubscribers(string serviceId, string channelId, NotificationOptions options) Parameters serviceId string channelId string options NotificationOptions Returns Task RemoveSubscription(string, string) Remove a user subscription for a user and the authenticated service or a nested service. Task RemoveSubscription(string serviceId, string userId) Parameters serviceId string userId string Returns Task VerifySubscriberPolicy(string, string, string) Verify a policy between a service and user. Task<PolicyValidationResult> VerifySubscriberPolicy(string serviceId, string userId, string returnUrl = null) Parameters serviceId string userId string returnUrl string Returns Task<PolicyValidationResult>"
  },
  "api/DNV.Veracity.Services.Api.This.Abstractions.IThisSubscribers.html": {
    "href": "api/DNV.Veracity.Services.Api.This.Abstractions.IThisSubscribers.html",
    "title": "Interface IThisSubscribers",
    "keywords": "Interface IThisSubscribers Namespace DNV.Veracity.Services.Api.This.Abstractions Assembly DNV.Veracity.Services.Api.This.Abstractions.dll Exposes methods available for 'Subscribers' resource within 'This' view point. public interface IThisSubscribers Extension Methods Throws.IfNull<T>(T, string?) Methods Add(string, SubscriptionOptions) Add a subscription to the authenticated service for a specified user. Task Add(string userId, SubscriptionOptions options) Parameters userId string options SubscriptionOptions Returns Task Get(string) Retrieve a user reference for a user subscribed to the authenticated service. Task<UserReference> Get(string userId) Parameters userId string Returns Task<UserReference> List(int, int) Retrieve a paginated collection of user references to users subscribed to the authenticated service. Task<IEnumerable<UserReference>> List(int page, int pageSize) Parameters page int pageSize int Returns Task<IEnumerable<UserReference>> Remove(string) Remove a user subscription to the authenticated service by specified user. Task Remove(string userId) Parameters userId string Returns Task"
  },
  "api/DNV.Veracity.Services.Api.This.Abstractions.IThisUsers.html": {
    "href": "api/DNV.Veracity.Services.Api.This.Abstractions.IThisUsers.html",
    "title": "Interface IThisUsers",
    "keywords": "Interface IThisUsers Namespace DNV.Veracity.Services.Api.This.Abstractions Assembly DNV.Veracity.Services.Api.This.Abstractions.dll Exposes methods available for 'Users' resource within 'This' view point. public interface IThisUsers Extension Methods Throws.IfNull<T>(T, string?) Methods Create(CreateUserOptions) Create and affiliate a user with the authenticated company. Task<CreateUserReference> Create(CreateUserOptions options) Parameters options CreateUserOptions Returns Task<CreateUserReference> Create(params CreateUserOptions[]) Create and affiliate a collection of users with the authenticated company. Task<IEnumerable<CreateUserReference>> Create(params CreateUserOptions[] options) Parameters options CreateUserOptions[] Returns Task<IEnumerable<CreateUserReference>> Resolve(string) Retrieves a collection of user references for users with a specified email value. Task<IEnumerable<UserReference>> Resolve(string email) Parameters email string Returns Task<IEnumerable<UserReference>>"
  },
  "api/DNV.Veracity.Services.Api.This.Abstractions.Models.CreateUserOptions.html": {
    "href": "api/DNV.Veracity.Services.Api.This.Abstractions.Models.CreateUserOptions.html",
    "title": "Class CreateUserOptions",
    "keywords": "Class CreateUserOptions Namespace DNV.Veracity.Services.Api.This.Abstractions.Models Assembly DNV.Veracity.Services.Api.This.Abstractions.dll public class CreateUserOptions Inheritance object CreateUserOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties Email public string Email { get; set; } Property Value string FirstName public string FirstName { get; set; } Property Value string LastName public string LastName { get; set; } Property Value string Options Specify additional registration options, this is not mandatory public RegistrationOptions Options { get; set; } Property Value RegistrationOptions"
  },
  "api/DNV.Veracity.Services.Api.This.Abstractions.Models.NotificationOptions.html": {
    "href": "api/DNV.Veracity.Services.Api.This.Abstractions.Models.NotificationOptions.html",
    "title": "Class NotificationOptions",
    "keywords": "Class NotificationOptions Namespace DNV.Veracity.Services.Api.This.Abstractions.Models Assembly DNV.Veracity.Services.Api.This.Abstractions.dll public class NotificationOptions Inheritance object NotificationOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties ChannelId public string ChannelId { get; set; } Property Value string HighPriority public bool HighPriority { get; set; } Property Value bool Message public Message Message { get; set; } Property Value Message Recipients public string[] Recipients { get; set; } Property Value string[]"
  },
  "api/DNV.Veracity.Services.Api.This.Abstractions.Models.RegistrationOptions.html": {
    "href": "api/DNV.Veracity.Services.Api.This.Abstractions.Models.RegistrationOptions.html",
    "title": "Class RegistrationOptions",
    "keywords": "Class RegistrationOptions Namespace DNV.Veracity.Services.Api.This.Abstractions.Models Assembly DNV.Veracity.Services.Api.This.Abstractions.dll public class RegistrationOptions Inheritance object RegistrationOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties ContactEmail The email address of the user or service that creates the new user account public string ContactEmail { get; set; } Property Value string ContactName The Name of the user or service that creates the new user account public string ContactName { get; set; } Property Value string CreateSubscription Make the service create a default subscription for the newly created user public bool? CreateSubscription { get; set; } Property Value bool? ReturnUrl Specify the location to send the newly created user to after the registration process is completed public string ReturnUrl { get; set; } Property Value string Role Specify the accessLevel/role the user should have with the new subscription. Optional public string Role { get; set; } Property Value string SendMail Set this to false to take responsibility of sending the registration email to the user. public bool? SendMail { get; set; } Property Value bool? ServiceId The service id to create subscription for public string ServiceId { get; set; } Property Value string"
  },
  "api/DNV.Veracity.Services.Api.This.Abstractions.Models.SubscriptionOptions.html": {
    "href": "api/DNV.Veracity.Services.Api.This.Abstractions.Models.SubscriptionOptions.html",
    "title": "Class SubscriptionOptions",
    "keywords": "Class SubscriptionOptions Namespace DNV.Veracity.Services.Api.This.Abstractions.Models Assembly DNV.Veracity.Services.Api.This.Abstractions.dll public class SubscriptionOptions Inheritance object SubscriptionOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties Role public string Role { get; set; } Property Value string"
  },
  "api/DNV.Veracity.Services.Api.This.Abstractions.Models.html": {
    "href": "api/DNV.Veracity.Services.Api.This.Abstractions.Models.html",
    "title": "Namespace DNV.Veracity.Services.Api.This.Abstractions.Models",
    "keywords": "Namespace DNV.Veracity.Services.Api.This.Abstractions.Models Classes CreateUserOptions NotificationOptions RegistrationOptions SubscriptionOptions"
  },
  "api/DNV.Veracity.Services.Api.This.Abstractions.html": {
    "href": "api/DNV.Veracity.Services.Api.This.Abstractions.html",
    "title": "Namespace DNV.Veracity.Services.Api.This.Abstractions",
    "keywords": "Namespace DNV.Veracity.Services.Api.This.Abstractions Interfaces IThisAdministrators Exposes methods available for 'Administrators' resource within 'This' view point. IThisServices Exposes methods available for 'Services' resource within 'This' view point. IThisSubscribers Exposes methods available for 'Subscribers' resource within 'This' view point. IThisUsers Exposes methods available for 'Users' resource within 'This' view point."
  },
  "api/DNV.Veracity.Services.Api.This.Extensions.ConfigurationExtensions.html": {
    "href": "api/DNV.Veracity.Services.Api.This.Extensions.ConfigurationExtensions.html",
    "title": "Class ConfigurationExtensions",
    "keywords": "Class ConfigurationExtensions Namespace DNV.Veracity.Services.Api.This.Extensions Assembly DNV.Veracity.Services.Api.This.dll public static class ConfigurationExtensions Inheritance object ConfigurationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddThisAdministrators(IServiceCollection, string) Adds an implementation of IThisAdministrators to the IServiceCollection. public static IServiceCollection AddThisAdministrators(this IServiceCollection services, string clientConfigurationName = \"administrators-this-api\") Parameters services IServiceCollection The IServiceCollection to add the IHttpClientFactory instance to. clientConfigurationName string The name of the configuration section to retrieve OAuthHttpClientOptions from. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. AddThisServices(IServiceCollection, string) Adds an implementation of IThisServices to the IServiceCollection. public static IServiceCollection AddThisServices(this IServiceCollection services, string clientConfigurationName = \"services-this-api\") Parameters services IServiceCollection The IServiceCollection to add the IHttpClientFactory instance to. clientConfigurationName string The name of the configuration section to retrieve OAuthHttpClientOptions from. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. AddThisSubscribers(IServiceCollection, string) Adds an implementation of IThisSubscribers to the IServiceCollection. public static IServiceCollection AddThisSubscribers(this IServiceCollection services, string clientConfigurationName = \"subscribers-this-api\") Parameters services IServiceCollection The IServiceCollection to add the IHttpClientFactory instance to. clientConfigurationName string The name of the configuration section to retrieve OAuthHttpClientOptions from. Returns IServiceCollection The IServiceCollection so that additional calls can be chained. AddThisUsers(IServiceCollection, string) Adds an implementation of IThisUsers to the IServiceCollection. public static IServiceCollection AddThisUsers(this IServiceCollection services, string clientConfigurationName = \"users-this-api\") Parameters services IServiceCollection The IServiceCollection to add the IHttpClientFactory instance to. clientConfigurationName string The name of the configuration section to retrieve OAuthHttpClientOptions from. Returns IServiceCollection The IServiceCollection so that additional calls can be chained."
  },
  "api/DNV.Veracity.Services.Api.This.Extensions.html": {
    "href": "api/DNV.Veracity.Services.Api.This.Extensions.html",
    "title": "Namespace DNV.Veracity.Services.Api.This.Extensions",
    "keywords": "Namespace DNV.Veracity.Services.Api.This.Extensions Classes ConfigurationExtensions"
  },
  "api/DNV.Veracity.Services.Api.This.ThisAdministrators.html": {
    "href": "api/DNV.Veracity.Services.Api.This.ThisAdministrators.html",
    "title": "Class ThisAdministrators",
    "keywords": "Class ThisAdministrators Namespace DNV.Veracity.Services.Api.This Assembly DNV.Veracity.Services.Api.This.dll public class ThisAdministrators : IThisAdministrators Inheritance object ThisAdministrators Implements IThisAdministrators Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors ThisAdministrators(ApiClientFactory) public ThisAdministrators(ApiClientFactory apiClientFactory) Parameters apiClientFactory ApiClientFactory Methods Get(string) Retrieves an individual administrator for the authenticated service. public Task<Administrator> Get(string userId) Parameters userId string Returns Task<Administrator> List(int, int) Retrieves a paginated collection of administrator references for the authenticated service. public Task<IEnumerable<AdministratorReference>> List(int page, int pageSize) Parameters page int pageSize int Returns Task<IEnumerable<AdministratorReference>>"
  },
  "api/DNV.Veracity.Services.Api.This.ThisServices.html": {
    "href": "api/DNV.Veracity.Services.Api.This.ThisServices.html",
    "title": "Class ThisServices",
    "keywords": "Class ThisServices Namespace DNV.Veracity.Services.Api.This Assembly DNV.Veracity.Services.Api.This.dll public class ThisServices : IThisServices Inheritance object ThisServices Implements IThisServices Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors ThisServices(ApiClientFactory) public ThisServices(ApiClientFactory apiClientFactory) Parameters apiClientFactory ApiClientFactory Methods AddSubscription(string, string, SubscriptionOptions) Add a subscription to the authenticated service or nested services. public Task AddSubscription(string serviceId, string userId, SubscriptionOptions options) Parameters serviceId string userId string options SubscriptionOptions Returns Task GetAdministrator(string, string) Retrieve an individual administrator reference to a administrator of the authenticated service or nested services. public Task<Administrator> GetAdministrator(string serviceId, string userId) Parameters serviceId string userId string Returns Task<Administrator> GetProfilePicture(string, string) Retreives the profile picture of a user if one is set, otherwise a 404 is returned. public Task<ProfilePicture> GetProfilePicture(string serviceId, string userId) Parameters serviceId string userId string Returns Task<ProfilePicture> GetSubscriber(string, string) Retrieve an individual user reference to a user which has a subscription to a specified service. public Task<UserReference> GetSubscriber(string serviceId, string userId) Parameters serviceId string userId string Returns Task<UserReference> List(int, int) Retrieve a paginated collection of services the authenticated service has access to. public Task<IEnumerable<ServiceReference>> List(int page, int pageSize) Parameters page int pageSize int Returns Task<IEnumerable<ServiceReference>> ListAdministrators(string, int, int) Retrieve a paginated collection of administrator references of administrators for a specified service. public Task<IEnumerable<AdministratorReference>> ListAdministrators(string serviceId, int page, int pageSize) Parameters serviceId string page int pageSize int Returns Task<IEnumerable<AdministratorReference>> ListSubscribers(string, int, int) Retrieve a paginated collection of user references of users subscribed to a specified service. public Task<IEnumerable<UserReference>> ListSubscribers(string serviceId, int page, int pageSize) Parameters serviceId string page int pageSize int Returns Task<IEnumerable<UserReference>> NotifySubscribers(string, string, NotificationOptions) Send a notification to users subscribed to the authenticated service or nested service. public Task NotifySubscribers(string serviceId, string channelId, NotificationOptions options) Parameters serviceId string channelId string options NotificationOptions Returns Task RemoveSubscription(string, string) Remove a user subscription for a user and the authenticated service or a nested service. public Task RemoveSubscription(string serviceId, string userId) Parameters serviceId string userId string Returns Task VerifySubscriberPolicy(string, string, string) Verify a policy between a service and user. public Task<PolicyValidationResult> VerifySubscriberPolicy(string serviceId, string userId, string returnUrl = null) Parameters serviceId string userId string returnUrl string Returns Task<PolicyValidationResult>"
  },
  "api/DNV.Veracity.Services.Api.This.ThisSubscribers.html": {
    "href": "api/DNV.Veracity.Services.Api.This.ThisSubscribers.html",
    "title": "Class ThisSubscribers",
    "keywords": "Class ThisSubscribers Namespace DNV.Veracity.Services.Api.This Assembly DNV.Veracity.Services.Api.This.dll public class ThisSubscribers : IThisSubscribers Inheritance object ThisSubscribers Implements IThisSubscribers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors ThisSubscribers(ApiClientFactory) public ThisSubscribers(ApiClientFactory apiClientFactory) Parameters apiClientFactory ApiClientFactory Methods Add(string, SubscriptionOptions) Add a subscription to the authenticated service for a specified user. public Task Add(string userId, SubscriptionOptions options) Parameters userId string options SubscriptionOptions Returns Task Get(string) Retrieve a user reference for a user subscribed to the authenticated service. public Task<UserReference> Get(string userId) Parameters userId string Returns Task<UserReference> List(int, int) Retrieve a paginated collection of user references to users subscribed to the authenticated service. public Task<IEnumerable<UserReference>> List(int page, int pageSize) Parameters page int pageSize int Returns Task<IEnumerable<UserReference>> Remove(string) Remove a user subscription to the authenticated service by specified user. public Task Remove(string userId) Parameters userId string Returns Task"
  },
  "api/DNV.Veracity.Services.Api.This.ThisUsers.html": {
    "href": "api/DNV.Veracity.Services.Api.This.ThisUsers.html",
    "title": "Class ThisUsers",
    "keywords": "Class ThisUsers Namespace DNV.Veracity.Services.Api.This Assembly DNV.Veracity.Services.Api.This.dll public class ThisUsers : IThisUsers Inheritance object ThisUsers Implements IThisUsers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors ThisUsers(ApiClientFactory) public ThisUsers(ApiClientFactory apiClientFactory) Parameters apiClientFactory ApiClientFactory Methods Create(CreateUserOptions) Create and affiliate a user with the authenticated company. public Task<CreateUserReference> Create(CreateUserOptions options) Parameters options CreateUserOptions Returns Task<CreateUserReference> Create(params CreateUserOptions[]) Create and affiliate a collection of users with the authenticated company. public Task<IEnumerable<CreateUserReference>> Create(params CreateUserOptions[] options) Parameters options CreateUserOptions[] Returns Task<IEnumerable<CreateUserReference>> Resolve(string) Retrieves a collection of user references for users with a specified email value. public Task<IEnumerable<UserReference>> Resolve(string email) Parameters email string Returns Task<IEnumerable<UserReference>>"
  },
  "api/DNV.Veracity.Services.Api.This.html": {
    "href": "api/DNV.Veracity.Services.Api.This.html",
    "title": "Namespace DNV.Veracity.Services.Api.This",
    "keywords": "Namespace DNV.Veracity.Services.Api.This Classes ThisAdministrators ThisServices ThisSubscribers ThisUsers"
  },
  "api/DNV.Veracity.Services.Api.html": {
    "href": "api/DNV.Veracity.Services.Api.html",
    "title": "Namespace DNV.Veracity.Services.Api",
    "keywords": "Namespace DNV.Veracity.Services.Api Classes ApiClientFactory ApiResourceClientBuilder JsonSerializer Interfaces IApiClient ISerializer Enums DataFormat"
  },
  "api/DNV.Web.Security.CSP.ContentSecurityPolicy.html": {
    "href": "api/DNV.Web.Security.CSP.ContentSecurityPolicy.html",
    "title": "Class ContentSecurityPolicy",
    "keywords": "Class ContentSecurityPolicy Namespace DNV.Web.Security.CSP Assembly DNV.Web.Security.dll public class ContentSecurityPolicy Inheritance object ContentSecurityPolicy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Fields Name public static readonly string Name Field Value string Methods CreateDefault(string?) public static ContentSecurityPolicy CreateDefault(string? nonce = null) Parameters nonce string Returns ContentSecurityPolicy GetDirective(string) public Directive GetDirective(string directive) Parameters directive string Returns Directive GetValue() public string GetValue() Returns string SetDirective(string, Directive) public void SetDirective(string directive, Directive values) Parameters directive string values Directive SetDirective(string, string) public void SetDirective(string directive, string value) Parameters directive string value string"
  },
  "api/DNV.Web.Security.CSP.Directive.html": {
    "href": "api/DNV.Web.Security.CSP.Directive.html",
    "title": "Class Directive",
    "keywords": "Class Directive Namespace DNV.Web.Security.CSP Assembly DNV.Web.Security.dll public class Directive : HashSet<string>, IReadOnlyCollection<string>, ISet<string>, ICollection<string>, IEnumerable<string>, IEnumerable, IDeserializationCallback, ISerializable Inheritance object HashSet<string> Directive Implements IReadOnlyCollection<string> ISet<string> ICollection<string> IEnumerable<string> IEnumerable IDeserializationCallback ISerializable Inherited Members HashSet<string>.Add(string) HashSet<string>.Clear() HashSet<string>.Contains(string) HashSet<string>.CopyTo(string[]) HashSet<string>.CopyTo(string[], int) HashSet<string>.CopyTo(string[], int, int) HashSet<string>.CreateSetComparer() HashSet<string>.EnsureCapacity(int) HashSet<string>.ExceptWith(IEnumerable<string>) HashSet<string>.GetEnumerator() HashSet<string>.GetObjectData(SerializationInfo, StreamingContext) HashSet<string>.IntersectWith(IEnumerable<string>) HashSet<string>.IsProperSubsetOf(IEnumerable<string>) HashSet<string>.IsProperSupersetOf(IEnumerable<string>) HashSet<string>.IsSubsetOf(IEnumerable<string>) HashSet<string>.IsSupersetOf(IEnumerable<string>) HashSet<string>.OnDeserialization(object) HashSet<string>.Overlaps(IEnumerable<string>) HashSet<string>.Remove(string) HashSet<string>.RemoveWhere(Predicate<string>) HashSet<string>.SetEquals(IEnumerable<string>) HashSet<string>.SymmetricExceptWith(IEnumerable<string>) HashSet<string>.TrimExcess() HashSet<string>.TryGetValue(string, out string) HashSet<string>.UnionWith(IEnumerable<string>) HashSet<string>.Comparer HashSet<string>.Count object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Constructors Directive() public Directive() Directive(string) public Directive(string value) Parameters value string"
  },
  "api/DNV.Web.Security.CSP.DirectiveNames.html": {
    "href": "api/DNV.Web.Security.CSP.DirectiveNames.html",
    "title": "Class DirectiveNames",
    "keywords": "Class DirectiveNames Namespace DNV.Web.Security.CSP Assembly DNV.Web.Security.dll public class DirectiveNames Inheritance object DirectiveNames Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Fields ConnectSrc public static readonly string ConnectSrc Field Value string DefaultSrc public static readonly string DefaultSrc Field Value string FontSrc public static readonly string FontSrc Field Value string FrameSrc public static readonly string FrameSrc Field Value string ImgSrc public static readonly string ImgSrc Field Value string MediaSrc public static readonly string MediaSrc Field Value string ObjectSrc public static readonly string ObjectSrc Field Value string ScriptSrc public static readonly string ScriptSrc Field Value string StyleSrc public static readonly string StyleSrc Field Value string WorkerSrc public static readonly string WorkerSrc Field Value string"
  },
  "api/DNV.Web.Security.CSP.html": {
    "href": "api/DNV.Web.Security.CSP.html",
    "title": "Namespace DNV.Web.Security.CSP",
    "keywords": "Namespace DNV.Web.Security.CSP Classes ContentSecurityPolicy Directive DirectiveNames"
  },
  "api/DNV.Web.Security.HttpContextExtensions.html": {
    "href": "api/DNV.Web.Security.HttpContextExtensions.html",
    "title": "Class HttpContextExtensions",
    "keywords": "Class HttpContextExtensions Namespace DNV.Web.Security Assembly DNV.Web.Security.dll public static class HttpContextExtensions Inheritance object HttpContextExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateNonce() public static string CreateNonce() Returns string Set(IHeaderDictionary, Dictionary<string, string>) public static void Set(this IHeaderDictionary source, Dictionary<string, string> newHeaders) Parameters source IHeaderDictionary newHeaders Dictionary<string, string> Set(IHeaderDictionary, string, string) public static void Set(this IHeaderDictionary source, string name, string value) Parameters source IHeaderDictionary name string value string SetDefault(IHeaderDictionary, string) public static void SetDefault(this IHeaderDictionary source, string csp) Parameters source IHeaderDictionary csp string SetDefaultForApi(IHeaderDictionary) public static void SetDefaultForApi(this IHeaderDictionary source) Parameters source IHeaderDictionary SetDefaultSecurityHeaders(HttpResponse, Func<HttpRequest, bool>?, Func<HttpRequest, bool>?) public static HttpResponse SetDefaultSecurityHeaders(this HttpResponse source, Func<HttpRequest, bool>? apiPredicate = null, Func<HttpRequest, bool>? exceptionPredicate = null) Parameters source HttpResponse apiPredicate Func<HttpRequest, bool> exceptionPredicate Func<HttpRequest, bool> Returns HttpResponse SetSecurityHeaders(HttpResponse, Func<HttpContext, string>, Func<HttpRequest, bool>?, Func<HttpRequest, bool>?) public static HttpResponse SetSecurityHeaders(this HttpResponse source, Func<HttpContext, string> setupCSP, Func<HttpRequest, bool>? apiPredicate = null, Func<HttpRequest, bool>? exceptionPredicate = null) Parameters source HttpResponse setupCSP Func<HttpContext, string> apiPredicate Func<HttpRequest, bool> exceptionPredicate Func<HttpRequest, bool> Returns HttpResponse"
  },
  "api/DNV.Web.Security.PermissionsPolicies.Feature.html": {
    "href": "api/DNV.Web.Security.PermissionsPolicies.Feature.html",
    "title": "Class Feature",
    "keywords": "Class Feature Namespace DNV.Web.Security.PermissionsPolicies Assembly DNV.Web.Security.dll public class Feature Inheritance object Feature Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Throws.IfNull<T>(T, string?) Properties Enabled public bool Enabled { get; } Property Value bool Name public string Name { get; } Property Value string Methods Disable() public void Disable() Enable() public FeatureBuilder Enable() Returns FeatureBuilder ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/DNV.Web.Security.PermissionsPolicies.FeatureBuilder.html": {
    "href": "api/DNV.Web.Security.PermissionsPolicies.FeatureBuilder.html",
    "title": "Class FeatureBuilder",
    "keywords": "Class FeatureBuilder Namespace DNV.Web.Security.PermissionsPolicies Assembly DNV.Web.Security.dll public class FeatureBuilder Inheritance object FeatureBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Throws.IfNull<T>(T, string?) Methods Custom(string) public FeatureBuilder Custom(string url) Parameters url string Returns FeatureBuilder Self() public FeatureBuilder Self() Returns FeatureBuilder ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/DNV.Web.Security.PermissionsPolicies.FeatureNames.html": {
    "href": "api/DNV.Web.Security.PermissionsPolicies.FeatureNames.html",
    "title": "Class FeatureNames",
    "keywords": "Class FeatureNames Namespace DNV.Web.Security.PermissionsPolicies Assembly DNV.Web.Security.dll public static class FeatureNames Inheritance object FeatureNames Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Accelerometer public const string Accelerometer = \"accelerometer\" Field Value string AmbientLightSensor public const string AmbientLightSensor = \"ambient-light-sensor\" Field Value string Autoplay public const string Autoplay = \"autoplay\" Field Value string Battery public const string Battery = \"battery\" Field Value string Camera public const string Camera = \"camera\" Field Value string ClipboardRead public const string ClipboardRead = \"clipboard-read\" Field Value string ClipboardWrite public const string ClipboardWrite = \"clipboard-write\" Field Value string ConversionMeasurement public const string ConversionMeasurement = \"conversion-measurement\" Field Value string CrossOriginIsolated public const string CrossOriginIsolated = \"cross-origin-isolated\" Field Value string DisplayCapture public const string DisplayCapture = \"display-capture\" Field Value string DocumentDomain public const string DocumentDomain = \"document-domain\" Field Value string EncryptedMedia public const string EncryptedMedia = \"encrypted-media\" Field Value string ExecutionWhileNotRendered public const string ExecutionWhileNotRendered = \"execution-while-not-rendered\" Field Value string ExecutionWhileOutOfViewport public const string ExecutionWhileOutOfViewport = \"execution-while-out-of-viewport\" Field Value string FocusWithoutUserActivation public const string FocusWithoutUserActivation = \"focus-without-user-activation\" Field Value string Fullscreen public const string Fullscreen = \"fullscreen\" Field Value string Gamepad public const string Gamepad = \"gamepad\" Field Value string Geolocation public const string Geolocation = \"geolocation\" Field Value string Gyroscope public const string Gyroscope = \"gyroscope\" Field Value string Hid public const string Hid = \"hid\" Field Value string IdleDetection public const string IdleDetection = \"idle-detection\" Field Value string Magnetometer public const string Magnetometer = \"magnetometer\" Field Value string Microphone public const string Microphone = \"microphone\" Field Value string Midi public const string Midi = \"midi\" Field Value string NavigationOverride public const string NavigationOverride = \"navigation-override\" Field Value string Payment public const string Payment = \"payment\" Field Value string PictureInPicture public const string PictureInPicture = \"picture-in-picture\" Field Value string PublickeyCredentialsGet public const string PublickeyCredentialsGet = \"publickey-credentials-get\" Field Value string ScreenWakeLock public const string ScreenWakeLock = \"screen-wake-lock\" Field Value string Serial public const string Serial = \"serial\" Field Value string SpeakerSelection public const string SpeakerSelection = \"speaker-selection\" Field Value string SyncScript public const string SyncScript = \"sync-script\" Field Value string TrustTokenRedemption public const string TrustTokenRedemption = \"trust-token-redemption\" Field Value string Usb public const string Usb = \"usb\" Field Value string VerticalScroll public const string VerticalScroll = \"vertical-scroll\" Field Value string WebShare public const string WebShare = \"web-share\" Field Value string XrSpatialTracking public const string XrSpatialTracking = \"xr-spatial-tracking\" Field Value string Properties All public static List<string> All { get; } Property Value List<string>"
  },
  "api/DNV.Web.Security.PermissionsPolicies.PermissionsPolicy.html": {
    "href": "api/DNV.Web.Security.PermissionsPolicies.PermissionsPolicy.html",
    "title": "Class PermissionsPolicy",
    "keywords": "Class PermissionsPolicy Namespace DNV.Web.Security.PermissionsPolicies Assembly DNV.Web.Security.dll public class PermissionsPolicy Inheritance object PermissionsPolicy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Throws.IfNull<T>(T, string?) Constructors PermissionsPolicy() public PermissionsPolicy() Properties Key public static string Key { get; } Property Value string Methods Feature(string) public Feature Feature(string name) Parameters name string Returns Feature ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/DNV.Web.Security.PermissionsPolicies.PermissionsPolicyExtensions.html": {
    "href": "api/DNV.Web.Security.PermissionsPolicies.PermissionsPolicyExtensions.html",
    "title": "Class PermissionsPolicyExtensions",
    "keywords": "Class PermissionsPolicyExtensions Namespace DNV.Web.Security.PermissionsPolicies Assembly DNV.Web.Security.dll public static class PermissionsPolicyExtensions Inheritance object PermissionsPolicyExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DisableAllPermissionsPolicy(IHeaderDictionary) public static void DisableAllPermissionsPolicy(this IHeaderDictionary dict) Parameters dict IHeaderDictionary EnableAllPermissionsPolicyForSelf(IHeaderDictionary) public static void EnableAllPermissionsPolicyForSelf(this IHeaderDictionary dict) Parameters dict IHeaderDictionary"
  },
  "api/DNV.Web.Security.PermissionsPolicies.html": {
    "href": "api/DNV.Web.Security.PermissionsPolicies.html",
    "title": "Namespace DNV.Web.Security.PermissionsPolicies",
    "keywords": "Namespace DNV.Web.Security.PermissionsPolicies Classes Feature FeatureBuilder FeatureNames PermissionsPolicy PermissionsPolicyExtensions"
  },
  "api/DNV.Web.Security.WebSecurityMiddlewareExtensions.html": {
    "href": "api/DNV.Web.Security.WebSecurityMiddlewareExtensions.html",
    "title": "Class WebSecurityMiddlewareExtensions",
    "keywords": "Class WebSecurityMiddlewareExtensions Namespace DNV.Web.Security Assembly DNV.Web.Security.dll Default Response Headers extensions to IApplicationBuilder. public static class WebSecurityMiddlewareExtensions Inheritance object WebSecurityMiddlewareExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods UseDefaultSecurityHeaders(IApplicationBuilder, Func<HttpContext, Func<Task>, Action<HttpContext>, Task>, Func<HttpRequest, bool>?, Func<HttpRequest, bool>?, Action<IHeaderDictionary>?) Adds and configures the predefined headers for Http response headers. Content-Security-Policy header is not added to request which url contains 'swagger' To avoid overwrite your own customized response header settings, call this method at last. If the predefined headers is not desired, setup you desired headers before calling this method To remove 'server' header on Kestrel Server, add the folowing code into ConfigureService method: services.PostConfigure<KestrelServerOptions>(t => t.AddServerHeader = false); public static IApplicationBuilder UseDefaultSecurityHeaders(this IApplicationBuilder builder, Func<HttpContext, Func<Task>, Action<HttpContext>, Task> middleware, Func<HttpRequest, bool>? apiPredicate = null, Func<HttpRequest, bool>? exceptionPredicate = null, Action<IHeaderDictionary>? customizeHeaders = null) Parameters builder IApplicationBuilder middleware Func<HttpContext, Func<Task>, Action<HttpContext>, Task> apiPredicate Func<HttpRequest, bool> exceptionPredicate Func<HttpRequest, bool> customizeHeaders Action<IHeaderDictionary> Returns IApplicationBuilder The IApplicationBuilder. Remarks The prefined security headers includes: X-Xss-Protection: 1 X-Frame-Options: SAMEORIGIN Referrer-Policy: no-referrer X-Content-Type-Options: nosniff X-Permitted-Cross-Domain-Policies: none Expect-CT: enforce, max-age=7776000 X-Xss-Protection: 1 Content-Security-Policy: connect-src 'self' https://dc.services.visualstudio.com https://login.microsoftonline.com https://login.veracity.com https://loginstag.veracity.com https://logintest.veracity.com; default-src 'self'; font-src 'self' data: https://onedesign.azureedge.net; frame-src 'self' https://www.google.com https://www.recaptcha.net/; img-src 'self' data: https://onedesign.azureedge.net; media-src 'self'; object-src 'self' {nonce}; script-src 'self' https://www.recaptcha.net https://www.gstatic.com https://www.gstatic.cn {nonce}; style-src 'self' https://onedesign.azureedge.net {nonce}; worker-src 'self' blob: UseDefaultSecurityHeaders(IApplicationBuilder, Func<HttpRequest, bool>?, Func<HttpRequest, bool>?, Action<IHeaderDictionary>?) Adds and configures the predefined headers for Http response headers. Content-Security-Policy header is not added to request which url contains 'swagger' To avoid overwrite your own customized response header settings, call this method at last. If the predefined headers is not desired, setup you desired headers before calling this method To remove 'server' header on Kestrel Server, add the following code into ConfigureService method: services.PostConfigure<KestrelServerOptions>(t => t.AddServerHeader = false); public static IApplicationBuilder UseDefaultSecurityHeaders(this IApplicationBuilder builder, Func<HttpRequest, bool>? apiPredicate = null, Func<HttpRequest, bool>? exceptionPredicate = null, Action<IHeaderDictionary>? customizeHeaders = null) Parameters builder IApplicationBuilder apiPredicate Func<HttpRequest, bool> exceptionPredicate Func<HttpRequest, bool> customizeHeaders Action<IHeaderDictionary> Returns IApplicationBuilder The IApplicationBuilder. Remarks The predefined security headers includes: X-Xss-Protection: 1 X-Frame-Options: SAMEORIGIN Referrer-Policy: no-referrer X-Content-Type-Options: nosniff X-Permitted-Cross-Domain-Policies: none Expect-CT: enforce, max-age=7776000 X-Xss-Protection: 1 Content-Security-Policy: connect-src 'self' https://dc.services.visualstudio.com https://login.microsoftonline.com https://login.veracity.com https://loginstag.veracity.com https://logintest.veracity.com; default-src 'self'; font-src 'self' data: https://onedesign.azureedge.net; frame-src 'self' https://www.google.com https://www.recaptcha.net/; img-src 'self' data: https://onedesign.azureedge.net; media-src 'self'; object-src 'self' {nonce}; script-src 'self' https://www.recaptcha.net https://www.gstatic.com https://www.gstatic.cn {nonce}; style-src 'self' https://onedesign.azureedge.net {nonce}; worker-src 'self' blob: UseSecurityHeaders(IApplicationBuilder, Func<HttpContext, Func<Task>, Action<HttpContext>, Task>, Func<HttpContext, string>, Func<HttpRequest, bool>?, Func<HttpRequest, bool>?) public static IApplicationBuilder UseSecurityHeaders(this IApplicationBuilder builder, Func<HttpContext, Func<Task>, Action<HttpContext>, Task> middleware, Func<HttpContext, string> setupCSP, Func<HttpRequest, bool>? apiPredicate = null, Func<HttpRequest, bool>? exceptionPredicate = null) Parameters builder IApplicationBuilder middleware Func<HttpContext, Func<Task>, Action<HttpContext>, Task> setupCSP Func<HttpContext, string> apiPredicate Func<HttpRequest, bool> exceptionPredicate Func<HttpRequest, bool> Returns IApplicationBuilder UseSecurityHeaders(IApplicationBuilder, Func<HttpContext, string>, Func<HttpRequest, bool>?, Func<HttpRequest, bool>?) public static IApplicationBuilder UseSecurityHeaders(this IApplicationBuilder builder, Func<HttpContext, string> setupCSP, Func<HttpRequest, bool>? apiPredicate = null, Func<HttpRequest, bool>? exceptionPredicate = null) Parameters builder IApplicationBuilder setupCSP Func<HttpContext, string> apiPredicate Func<HttpRequest, bool> exceptionPredicate Func<HttpRequest, bool> Returns IApplicationBuilder"
  },
  "api/DNV.Web.Security.html": {
    "href": "api/DNV.Web.Security.html",
    "title": "Namespace DNV.Web.Security",
    "keywords": "Namespace DNV.Web.Security Classes HttpContextExtensions WebSecurityMiddlewareExtensions Default Response Headers extensions to IApplicationBuilder."
  },
  "api/DNV.Web.Swagger.SwaggerExtensions.html": {
    "href": "api/DNV.Web.Swagger.SwaggerExtensions.html",
    "title": "Class SwaggerExtensions",
    "keywords": "Class SwaggerExtensions Namespace DNV.Web.Swagger Assembly DNV.Web.Swagger.dll Contains extension methods for configuring Swagger. public static class SwaggerExtensions Inheritance object SwaggerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddSwagger(IServiceCollection, Action<SwaggerOptions>) Adds Swagger services to the specified service collection. public static IServiceCollection AddSwagger(this IServiceCollection services, Action<SwaggerOptions> setupAction) Parameters services IServiceCollection The service collection used in the startup of the application. setupAction Action<SwaggerOptions> The action used to configure specified options. Returns IServiceCollection The updated service collection. UseSwaggerWithUI(IApplicationBuilder, Action<SwaggerOptions>?) Extension method that adds Swagger middleware to the specified IApplicationBuilder with Swagger UI served from \"/swagger/index.html\". public static IApplicationBuilder UseSwaggerWithUI(this IApplicationBuilder app, Action<SwaggerOptions>? setupAction = null) Parameters app IApplicationBuilder The IApplicationBuilder instance being extended setupAction Action<SwaggerOptions> Optional Lambda used to configure the SwaggerOptions Returns IApplicationBuilder The same instance of the IApplicationBuilder passed in, to allow for the usage of fluent methods."
  },
  "api/DNV.Web.Swagger.SwaggerOptions.Authentication.html": {
    "href": "api/DNV.Web.Swagger.SwaggerOptions.Authentication.html",
    "title": "Class SwaggerOptions.Authentication",
    "keywords": "Class SwaggerOptions.Authentication Namespace DNV.Web.Swagger Assembly DNV.Web.Swagger.dll public class SwaggerOptions.Authentication Inheritance object SwaggerOptions.Authentication Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties AuthCodeFlow Gets or sets the authorization code flow for OAuth2 authentication. public OpenApiOAuthFlow? AuthCodeFlow { get; set; } Property Value OpenApiOAuthFlow ClientCredsFlow Gets or sets the client credential flow for OAuth2 authentication. public OpenApiOAuthFlow? ClientCredsFlow { get; set; } Property Value OpenApiOAuthFlow ClientId Gets or sets the client ID for Swagger OAuth2 authentication. public string? ClientId { get; set; } Property Value string ClientSecret Gets or sets the client secret for Swagger OAuth2 authentication. public string? ClientSecret { get; set; } Property Value string ImplicitFlow Gets or sets the implicit flow for OAuth2 authentication. public OpenApiOAuthFlow? ImplicitFlow { get; set; } Property Value OpenApiOAuthFlow"
  },
  "api/DNV.Web.Swagger.SwaggerOptions.html": {
    "href": "api/DNV.Web.Swagger.SwaggerOptions.html",
    "title": "Class SwaggerOptions",
    "keywords": "Class SwaggerOptions Namespace DNV.Web.Swagger Assembly DNV.Web.Swagger.dll Represents the options for configuring Swagger. public class SwaggerOptions Inheritance object SwaggerOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Properties DocumentTitle Gets or sets the title of the Swagger document. Defaults to \"Swagger UI\". public string? DocumentTitle { get; set; } Property Value string Enabled Gets or sets a value indicating whether Swagger is enabled. Defaults to false. public bool Enabled { get; set; } Property Value bool OAuth Gets or sets OAuth2 settings public SwaggerOptions.Authentication? OAuth { get; set; } Property Value SwaggerOptions.Authentication PostGenConfigure Gets or sets an action for additional configuration on SwaggerGen. public Action<SwaggerGenOptions>? PostGenConfigure { get; set; } Property Value Action<SwaggerGenOptions> PostUIConfigure Gets or sets an action for additional configuration on SwaggerUI. public Action<SwaggerUIOptions>? PostUIConfigure { get; set; } Property Value Action<SwaggerUIOptions> SyntaxHighlight Gets or sets a value indicating whether syntax highlighting should be used in Swagger. Defaults to false to avoid performance issue of Swagger UI for large json content highlighting. public bool SyntaxHighlight { get; set; } Property Value bool Versions Gets or sets the API versioning information. public IDictionary<string, OpenApiInfo>? Versions { get; set; } Property Value IDictionary<string, OpenApiInfo>"
  },
  "api/DNV.Web.Swagger.Throws.html": {
    "href": "api/DNV.Web.Swagger.Throws.html",
    "title": "Class Throws",
    "keywords": "Class Throws Namespace DNV.Web.Swagger Assembly DNV.Web.Swagger.dll public static class Throws Inheritance object Throws Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IfNull<T>(T, string?) public static T IfNull<T>(this T source, string? message = null) Parameters source T message string Returns T Type Parameters T"
  },
  "api/DNV.Web.Swagger.html": {
    "href": "api/DNV.Web.Swagger.html",
    "title": "Namespace DNV.Web.Swagger",
    "keywords": "Namespace DNV.Web.Swagger Classes SwaggerExtensions Contains extension methods for configuring Swagger. SwaggerOptions Represents the options for configuring Swagger. SwaggerOptions.Authentication Throws"
  },
  "api/Microsoft.AspNetCore.Http.Metadata.ITagsMetadata.html": {
    "href": "api/Microsoft.AspNetCore.Http.Metadata.ITagsMetadata.html",
    "title": "Interface ITagsMetadata",
    "keywords": "Interface ITagsMetadata Namespace Microsoft.AspNetCore.Http.Metadata Assembly DNV.Web.Swagger.dll Defines a contract used to specify a collection of tags in Microsoft.AspNetCore.Http.Endpoint.Metadata. public interface ITagsMetadata Extension Methods Throws.IfNull<T>(T, string?) Remarks ONLY FOR .NET CORE 3.1 COMPATIBILITY Properties Tags Gets the collection of tags associated with the endpoint. IReadOnlyList<string> Tags { get; } Property Value IReadOnlyList<string>"
  },
  "api/Microsoft.AspNetCore.Http.Metadata.html": {
    "href": "api/Microsoft.AspNetCore.Http.Metadata.html",
    "title": "Namespace Microsoft.AspNetCore.Http.Metadata",
    "keywords": "Namespace Microsoft.AspNetCore.Http.Metadata Interfaces ITagsMetadata Defines a contract used to specify a collection of tags in Microsoft.AspNetCore.Http.Endpoint.Metadata."
  },
  "api/Microsoft.AspNetCore.Http.TagsAttribute.html": {
    "href": "api/Microsoft.AspNetCore.Http.TagsAttribute.html",
    "title": "Class TagsAttribute",
    "keywords": "Class TagsAttribute Namespace Microsoft.AspNetCore.Http Assembly DNV.Web.Swagger.dll Specifies a collection of tags in Metadata. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method|AttributeTargets.Delegate, Inherited = false, AllowMultiple = false)] public sealed class TagsAttribute : Attribute, ITagsMetadata Inheritance object Attribute TagsAttribute Implements ITagsMetadata Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods Throws.IfNull<T>(T, string?) Remarks ONLY FOR .NET CORE 3.1 COMPATIBILITY Constructors TagsAttribute(params string[]) Initializes an instance of the TagsAttribute. public TagsAttribute(params string[] tags) Parameters tags string[] The tags associated with the endpoint. Properties Tags Gets the collection of tags associated with the endpoint. public IReadOnlyList<string> Tags { get; } Property Value IReadOnlyList<string>"
  },
  "api/Microsoft.AspNetCore.Http.html": {
    "href": "api/Microsoft.AspNetCore.Http.html",
    "title": "Namespace Microsoft.AspNetCore.Http",
    "keywords": "Namespace Microsoft.AspNetCore.Http Classes TagsAttribute Specifies a collection of tags in Metadata."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Api Reference Page",
    "keywords": "Api Reference Page"
  },
  "articles/A-Typical-Sample-of-Veracity-Identity-Implementation-with-Solution-Packages.html": {
    "href": "articles/A-Typical-Sample-of-Veracity-Identity-Implementation-with-Solution-Packages.html",
    "title": "appsettings.json",
    "keywords": "appsettings.json \"Oidc\": { \"ResponseType\": \"code\", \"ClientId\": \"\", \"ClientSecret\": \"\", \"Scopes\": [ \"https://dnvglb2ctest.onmicrosoft.com/a4a8e726-c1cc-407c-83a0-4ce37f1ce130/user_impersonation\" ], \"Authority\": \"https://logintest.veracity.com/tfp/ed815121-cdfa-4097-b524-e2b23cd36eb6/B2C_1A_SignInWithADFSIdp/v2.0\" }, \"APIs\": [ { \"Name\": \"VeracityAPIsV3\", \"Flow\": 0, //\"user-credentials\", \"BaseUri\": \"https://api-test.veracity.com/Veracity/Services/V3/\", \"SubscriptionKey\": \"\", \"OAuthClientOptions\": { \"Scopes\": [ \"https://dnvglb2ctest.onmicrosoft.com/a4a8e726-c1cc-407c-83a0-4ce37f1ce130/user_impersonation\" ], \"ClientId\": \"\", \"ClientSecret\": \"\", \"Authority\": \"https://logintest.veracity.com/tfp/ed815121-cdfa-4097-b524-e2b23cd36eb6/B2C_1A_SignInWithADFSIdp/v2.0\" } }, { \"Name\": \"VeracityAPIsV3\", \"Flow\": 1, //\"client-credentials\", \"BaseUri\": \"https://api-test.veracity.com\", \"SubscriptionKey\": \"\", \"OAuthClientOptions\": { \"Scopes\": [ \"https://dnvglb2ctest.onmicrosoft.com/efb3e529-2f80-458b-aedf-7f4c8c794b45/.default\" ], \"ClientId\": \"\", \"ClientSecret\": \"\", \"Authority\": \"https://login.microsoftonline.com/ed815121-cdfa-4097-b524-e2b23cd36eb6/v2.0\" } } ] Startup.cs services.AddOAuthHttpClientFactory(o => configuration.Bind(\"APIs\", o)); services.AddOAuthCore(); var VeracityMyAPIs = \"VeracityAPIsV3\"; services.AddMyProfile(VeracityMyAPIs) .AddMyCompanies(VeracityMyAPIs) .AddMyServices(VeracityMyAPIs) .AddMyMessages(VeracityMyAPIs) .AddThisUsers(VeracityMyAPIs); services.AddOidc(o => configuration.Bind(\"Oidc\", o)) .AddPolicyValidation(o => { o.PolicyValidationMode = PolicyValidationMode.PlatformTermsAndCondition; o.VeracityPolicyApiConfigName = VeracityMyAPIs; o.GetReturnUrl = (ctx, retPath) => ctx.TryGetXForwardedHostUrl(out var hostUrl) ? $\"{hostUrl}{retPath}\" : $\"{ctx.Request.Scheme}://{ctx.Request.Host}{retPath}\"; }); Controller public class ApiController : ControllerBase { private readonly IMyServices _myServices; private readonly IThisUsers _thisUsers; public ApiController(IMyServices myServices, IThisUsers thisUsers) { _myServices = myServices; _thisUsers = thisUsers; } [HttpGet(\"me/services\")] public async Task<IActionResult> GetMyServices() { return Ok(await _myServices.List()); } [HttpGet(\"this/resolve\")] public async Task<IActionResult> FindByEmail(string email) { var users = await _thisUsers.Resolve(email); return Ok(users?.FirstOrDefault()); } }"
  },
  "articles/DDD.html": {
    "href": "articles/DDD.html",
    "title": "",
    "keywords": ""
  },
  "articles/DNV.OAuth.Web.html": {
    "href": "articles/DNV.OAuth.Web.html",
    "title": "Get started with DNV.OAuth.Web",
    "keywords": "Get started with DNV.OAuth.Web DNV.OAuth.Web is a .NETCore library for developers to simplify the work of setting up OpenId Connection authentication (OIDC) such as Veracity or Azure AD B2C for ASP.NET Core web project. Below samples will show you how to do authentication through Veracity. Prerequisites Please create an App resource in Veracity developer (https://developer.veracity.com/) and copy out the client id and client secret for the use in further steps below. Please follow the tutorials from here: https://developer.veracity.com/docs/section/developerexperience/introduction. Package Install Ensure you have configured to package NuGet Package Source or find the instructions here. Package Manager Console PM> `Install-Package DNV.OAuth.Web` Basic Authentication Usage To simplify your authentication implementation of Veracity for your .Net 6+ web project, you need to add 3 blocks of codes to Startup.cs. Add namespace reference. using DNV.OAuth.Web; Add AddOidc extension method to ConfigureServices. public void ConfigureServices(IServiceCollection services) { ... var oidcOptions = new OidcOptions { Authority = \"<Authority>\", ClientId = \"<ClientId>\", Scopes = new[] { \"<Scope>\" }, }; services.AddOidc(oidcOptions); ... } Add UseAuthentication and UseAuthorization extension methods to Configure. public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { ... app.UseAuthentication().UseAuthorization(); ... } Then you could launch your project and access an action in a controller that decorated with [Authorize], a challenge request will be sent to IDP(Microsoft or Veracity) to start the authentication process, and the HttpContext will be filled with authentication result. A sample project is ready for you to try out: OidcOAuthSample. Access Token Cache Usage If you web project act as an API gateway, you will want to cache users' access tokens to prevent unnecessary token requests. The library uses MSAL (Microsoft Authentication Library) to manipulate tokens. Authorization code flow needs to be set to acquire access token, and refresh token is required for MSAL to re-acquire token from IDP if the token exceed its expiration. public void ConfigureServices(IServiceCollection services) { ... var oidcOptions = new OidcOptions { Authority = \"<Authority>\", ClientId = \"<ClientId>\", ClientSecret = \"<ClientSecret>\", Resource = \"<Resource>\", Scopes = new[] { \"<Scope>\", \"offline_access\" }, // offline_access is required to retrieve refresh_token. ResponseType = OpenIdConnectResponseType.Code }; ... } To cache the tokens, an implementaion of IDistributedCache such as MemoryDistributedCache needs to be added. public void ConfigureServices(IServiceCollection services) { ... services.AddDistributedMemoryCache(); ... } You can also add RedisCache instead. public void ConfigureServices(IServiceCollection services) { ... services.AddDistributedRedisCache(o => { o.InstanceName = \"<InstanceName>\"; o.Configuration = \"<Configuration>\"; }); ... } Don't forget to add AddOidc after what you did previously. public void ConfigureServices(IServiceCollection services) { ... services.AddOidc(oidcOptions); ... } Add UseAuthentication and UseAuthorization extension methods to Configure. public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { ... app.UseAuthentication().UseAuthorization(); ... } A sample project is ready for you to try out: TokenCacheSample. Authorize Api with a specific JWT scheme Create two Api resources (tick the checkbox \"This is an API\") in Veracity developer and copy out the client ids. Then for both Apis, add client application using the client id you created in the beginning. Add the JWT options with two authentication themes in appsettings.json \"JwtOptions\": { \"App1\": { \"AuthorizationPolicyName\": \"Policy1\", \"Authority\": \"<Authority>\", \"ClientId\": \"<client id of Api 1>\" }, \"App2\": { \"AuthorizationPolicyName\": \"Policy2\", \"Authority\": \"<Authority>\", \"ClientId\": \"<client id of Api 2>\" } } Configure services to use JWT options services.AddJwt(this.Configuration.GetSection(\"JwtOptions\").GetChildren()); Create controller authorized by JWT authentication theme [ApiController] [Route(\"api/[controller]\")] public class TestController : ControllerBase { /// <summary> /// requires token from App1 /// </summary> /// <returns></returns> [HttpGet(\"mobile\")] [Authorize(AuthenticationSchemes = \"App1\")] public IEnumerable<KeyValuePair<string, string>> GetMobileClaims() { return this.User.Claims.Select(c => new KeyValuePair<string, string>(c.Type, c.Value)); } /// <summary> /// requires token from App2 /// </summary> /// <returns></returns> [HttpGet(\"janus\")] [Authorize(AuthenticationSchemes = \"App2\")] public IEnumerable<KeyValuePair<string, string>> GetJanusClaims() { return this.User.Claims.Select(c => new KeyValuePair<string, string>(c.Type, c.Value)); } } Configure swagger a. Add swagger options in appsettings.json \"SwaggerOptions\": { \"Enabled\": true, \"Version\": \"v1\", \"DocumentTitle\": \"Demo API\", \"ClientId\": \"<put your client id here>\", \"ClientSecret\": \"<put your client secret here>\", \"AuthCodeFlow\": { \"AuthorizationUrl\": \"<Authorization url>\", \"TokenUrl\": \"<Token url>\", \"Scopes\": { \"App1\": \"<scope for App 1>\", \"App2\": \"<scope for App 2>\" } }, \"ClientCredsFlow\": { \"AuthorizationUrl\": \"<Authorization url>\", \"TokenUrl\": \"<Token url>\", \"Scopes\": { \"App1\": \"<scope for App 1>\", \"App2\": \"<scope for App 2>\" } } } Add the code snippet below to your Start.cs file // ConfigureServices services.AddSwagger(o => this.Configuration.Bind(\"SwaggerOptions\", o)); //Configure app.UseSwaggerWithUI(o => this.Configuration.Bind(\"SwaggerOptions\", o)); Verify the authentication Run the program and go to the swagger page, obtain the token through the authorization button by providing the client id/secrets of the app created in the beginning. Then you can execute the Api request in TestController and (hopefully) get a 200 Ok response, which means that the authorization worked as intended. Please select the correct scope aligned with the authentication theme when test the api. A sample project is ready for you to try out: DemoSample."
  },
  "articles/DNV.SecretsManager.html": {
    "href": "articles/DNV.SecretsManager.html",
    "title": "Secrets Manager",
    "keywords": "Secrets Manager The DNV.SecretsManager package is a command line tool for managing secrets from the Azure KeyVault or Azure DevOps Variable Groups. This tool allows secrets to be downloaded and uploaded as structured JSON files, meaning secrets may be uploaded in structured collections where previously they might have been maintained individually. What it does Given a large collection of key vault secrets in an Azure Key vault such as those shown below: The secrets manager tool could be executed with a command: secretsmanager keyvault -d -s <keyvault-url> -f output-file.json The resulting output-file.json would look like: { \"Account\": { \"BaseUrl\": <secret value> }, \"Company\": { \"ApiKey\": <secret value>, \"Authority\": <secret value>, \"BaseUrl\": <secret value>, \"ClientId\": <secret value>, \"ClientSecret\": <secret value>, \"Resource\": <secret value> }, \"Customer\": { \"ApiKey\": <secret value>, \"Authority\": <secret value>, \"BaseUrl\": <secret value>, \"ClientId\": <secret value>, \"ClientSecret\": <secret value>, \"IsApiKeyOnly\": <secret value>, \"Resource\": <secret value> }, \"Emailer\": { \"BaseUri\": <secret value>, \"FunctionKey\": <secret value> ... Conversely, an input json file (input-file.json) could be uploaded to an Azure Key vault by executing a command: secretsmanager keyvault -u -s <keyvault-url> -f input-file.json Hierachy The secrets manager assumes a convention where the parent-child relationship between entities in a hierarchy are expressed with a -- delimeter. In practice this means: to express that Company is the parent of ApiKey a key would be named Company--ApiKey, if there exists multiple children to a parent they would be aggregated in to a single parent as may be seen in the result above with keys: Company--ApiKey, Company--Authority and Company--BaseUrl etc. Parent-child relationships may extend to far greater depth than the example given. Arrays It is also possible to include arrays of data in your configuration. To express a collection of values in an array the indexes should be included explicity declared in place of the child name. For example, an array may be expressed with a collection of the following keys: Names--0, Names--1, Names--2 which would result in the following JSON: { \"Names\": [ <secret value>, <secret-value>, <secret-value> ] } Useage secretsmanager <command> [<args>] Commands: keyvault Download or upload secrets from/to Azure Keyvault variablegroup Download or upload secrets from/to Azure Keyvault Key vault command secretsmanager keyvault [-h | --help] -d | --download -u | --upload | -c | --clear -s | --url <url> -f | --filename <filename> Options -h | --help Prints the synopsis of commands and options available. -d | --download Requests the secrets to be downloaded from the specified source to a JSON file. -u | --upload Requests that a provided JSON file be uploaded to a specified source. -c | --clear Deletes all secrets from the specified source. -s | --url <url> Provide the URL to the keyvault. -f | --filename <filename> Specify the file to which you would like to download to or upload from. Variable group command secretsmanager variablegroup [-h | --help] -d | --download -u | --upload | -c | --clear -s | --base-url <base-url> -o | --organization <organization> -p | --pat <pat> -g | --group-id <group-id> -f | --filename <filename> Options -h | --help Prints the synopsis of commands and options available. -d | --download Requests the secrets to be downloaded from the specified source to a JSON file. -u | --upload Requests that a provided JSON file be uploaded to a specified source. -c | --clear Deletes all secrets from the specified source. -s | --base-url <base-url> Provide the base URL to the Azure DevOps. -o | --organization <organization> Provide the organization under Azure DevOps to which a variable group belongs. -p | --pat <pat> Specify the Person Access Token for authentication. -g | --group-id <group-id> Specify the id of the variable group you would like to download from or upload to. -f | --filename <filename> Specify the file to which you would like to download to or upload from."
  },
  "articles/DNVGL.OAuth.Api.HttpClient.html": {
    "href": "articles/DNVGL.OAuth.Api.HttpClient.html",
    "title": "OAuth HTTP Client Factory",
    "keywords": "OAuth HTTP Client Factory The DNVGL.OAuth.Api.HttpClient package is a .NET library which provides a factory for producing authenticated HttpClients for API integration via OAuth. Developers can use this library to create HttpClient instances which will be pre-authenticated for API requests based on provided configuration. This package supports two type of credential authentication: User credentials - A user may authenticate by providing a username and password via a UI. Client credentials - A service or application may provide a client id and secret to silently authenticate. Package Install Ensure you have configured to package NuGet Package Source or find the instructions here. Package Manager Console PM> `Install-Package DNVGL.OAuth.Api.HttpClient` Basic example 1. Configuration Setup API http client configuration in appsettings.json file: { \"ApiHttpClientOptions\": [ { \"Name\": \"userCredentialsClient\", \"Flow\": \"user-credentials\", \"BaseUri\": \"<BaseUri>\", \"SubscriptionKey\": \"<SubscriptionKey>\" }, { \"Name\": \"clientCredentialsClient\", \"Flow\":\"client-credentials\", \"BaseUri\": \"<BaseUri>\", \"SubscriptionKey\": \"<SubscriptionKey>\" \"OAuthClientOptions\": { \"Authority\": \"<Authority>\", \"ClientId\": \"<ClientId>\", \"ClientSecret\": \"<ClientSecret>\", \"Resource\": \"<Resource>\", \"Scopes\": [ \"<Scope>\", \"offline_access\" ], \"CallbackPath\": \"<CallbackPath>\" } } ] } The package injects an IHttpClientFactory which is able to provide multiple HttpClients for different purposes. The HttpClients may all be configured through a configuration section in which the individual client configurations are listed with a unique Name which is used to request HttpClients with the corresponding configurations. The configuration shown above lists 2 HttpClients. The first with name \"userCredentialsClient\" is an example of a configuration which would honour the signed in user's credentials for the API for which it makes requests. The second with name \"clientCredentialsClient\" provides configuration for a client which would be authenticated via the client credential flow with a client id and secret to make requests in an API. This configuration would allow us to request either type of HttpClient by requesting it from from the HttpClientFactory by providing one of the two names: \"userCredentialsClient\" or \"clientCredentialsClient\" in the method call to the HttpClientFactory. 2. Registration Call the ServiceCollection extension method AddOAuthHttpClientFactory to register an instance of the IHttpClientFactory in to your project in your Startup.cs file. The below code is retrieving the configuration from the \"OAuthHttpClientOptions\" section defined in apsettings.json above. public void ConfigureService(IServiceCollection services) { ... services.AddOAuthHttpClientFactory(Congiuration.GetSection(\"ApiHttpClientOptions\").Get<IEnumerable<OAuthHttpClientOptions>>()); ... } If you require a HttpClient applying the user credential flow you should also include the web authentication (AddOidc) and token cache handling (AddDistributedMemoryCache) from the DNVGL.OAuth.Web package. Include the NuGet package in your project and call the required methods as below: public void ConfigureService(IServiceCollection services) { ... services.AddDistributedMemoryCache(); ... var oidcOptions = new OidcOptions { Authority = \"<Authority>\", ClientId = \"<ClientId>\", ClientSecret = \"<ClientSecret>\", Resource = \"<Resource>\", Scopes = new[] { \"<Scope>\", \"offline_access\" }, ResponseType = OpenIdConnectResponseType.Code }; services.AddOidc(oidcOptions); ... services.AddOAuthHttpClientFactory(Congiuration.GetSection(\"ApiHttpClientOptions\").Get<IEnumerable<OAuthHttpClientOptions>>()); ... } If you only require HttpClients applying the client credential flow the DNVGL.OAuth.Web package is not required. 3. Request a client Resolve IHttpClientFactory to create user-credential or client-credential HttpClient to access web API. public class TestController { private readonly IHttpClientFactory _httpClientFactory; public TestController(IHttpClientFactory httpClientFactory) { _httpClientFactory = httpClientFactory; } public User DoSomethingWithSignInUser(string id) { var client = _httpClientFactory.Create(\"userCredentialsClient\"); ... } public Company DoSomethingWithService(string id) { var client = _httpClientFactory.Create(\"clientCredentialsClient\"); ... } }"
  },
  "articles/DNVGL.Veracity.Services.Api.html": {
    "href": "articles/DNVGL.Veracity.Services.Api.html",
    "title": "Veracity - My Services API v3 Clients",
    "keywords": "Veracity - My Services API v3 Clients Packages from the DNVGL.Veracity.Services.Api namespace provide lightweight .NET clients for Veracity My Services API v3 built on top of packages from the Solution Package. These packages allow developers to query and manipulate data from My services including user profiles, service profiles, notification messages, company profiles, admin roles and subscriptions. View Points As a client to API v3, the package is divided in to the following view points: | Name | Description | Supported authentication | |--|--|--| | Directory | Allows fetching and updating resources without a focus on a specifc user or service resource. Recommended for core platform applications. | Client credentials | | My | Allows fetching information and making requests for a user authenticated by user credential flow. | User credentials | | This | Allows manipulation and retrieval of information related to a service where an application is authenticated as a service owner. | Client credentials |"
  },
  "articles/DNVGL.Veracity.Services.Api/DNVGL.Veracity.Services.Api.Directory.html": {
    "href": "articles/DNVGL.Veracity.Services.Api/DNVGL.Veracity.Services.Api.Directory.html",
    "title": "Veracity - My Services API v3 - Directory Client",
    "keywords": "Veracity - My Services API v3 - Directory Client The DNVGL.Veracity.Services.Api.Directory package provides a client to resources available under the 'Directory' view point of API v3. This view point is appropriate for core Veracity applications where resources are not restricted to any context. Only Client credentials authentication is supported by this package. Package Install Ensure you have configured to package NuGet Package Source or find the instructions here. Package Manager Console PM> `Install-Package DNVGL.Veracity.Services.Api.Directory` Example With the nuget package installed, services for each resource may be individually configured, injected and requested inside your solution. 1. Configuration To configure a resource service, introduce configuration in the form of OAuthHttpClientOptions: appsettings.json The Directory view point only supports Client Credential Flow. { \"OAuthHttpClients\": [ ... { \"Name\": \"company-directory\", \"Flow\": \"ClientCredentials\", \"BaseUri\": <BaseUri>, \"SubscriptionKey\": <SubscriptionKey>, \"OAuthClientOptions\": { \"Authority\": <Authority>, \"ClientId\": <ClientId>, \"ClientSecret\": <ClientSecret>, \"Resource\": <Resource>, \"Scopes\": [ <Scope> ], } } ... ] } 2. Registration Register the service or services using extensions methods available from the DNVGL.Veracity.Services.Api.Directory.Extensions namespace. startup.cs Packages from DNVGL.Veracity.Service.Api are dependent on the DNVGL.OAuth.Api.HttpClient package, therefore the HttpClientFactory should also be injected. public void ConfigureServices(IServiceCollection services) { ... services.AddOAuthHttpClientFactory(Congiuration.GetSection(\"OAuthHttpClients\").Get<IEnumerable<OAuthHttpClientOptions>>()); ... services.AddCompanyDirectory(\"company-directory\") ... } 3. Request service Request the service from the constructor by its interface: TestController.cs public class TestController : Controller { ... private readonly ICompanyDirectory _companyDirectory; ... public TestController(ICompanyDirectory companyDirectory) { ... _companyDirectory = companyDirectory ?? throw new ArgumentNullException(nameof(companyDirectory)); ... } ... public async Task<IActionResult> FetchCompany(string companyId) { return Json(await _companyDirectory.Get(companyId)); } ... } Resources Companies Services Users Companies Registration method Service interface AddCompanyDirectory(string clientConfigurationName) ICompanyDirectory Name Description Get(string companyId) Retrieves an individual company. ListUsers(string companyId, int page, int pageSize) Retrieves a paginated collection of user references of users affiliated with a company. Services Registration method Service interface AddServiceDirectory(string clientConfigurationName) IServiceDirectory Name Description Get(string serviceId) Retrieves an individual service. ListUsers(string serviceId, int page, int pageSize) Retrieves a paginated collection of user references of users subscribed to a service. Users Registration method Service interface AddUserDirectory(string clientConfigurationName) IUserDirectory Name Description Get(string userId) Retrieves an individual user. ListByUserId(params string[] userIds) Retrieves a collection of users where the id is included in the parameters. ListByEmail(string email) Retrieves a collection of user references by a specified email value. ListCompanies(string userId) Retrieves a collection of company references of companies with which a user is affiliated. ListServices(string userId, int page, int pageSize) Retrieves a collection of service references of services to which a user is subscribed. GetSubscription(string userId, string serviceId) Retrieve an individual subscription for a specified user and service."
  },
  "articles/DNVGL.Veracity.Services.Api/DNVGL.Veracity.Services.Api.My.html": {
    "href": "articles/DNVGL.Veracity.Services.Api/DNVGL.Veracity.Services.Api.My.html",
    "title": "Veracity - My Services API v3 - My Client",
    "keywords": "Veracity - My Services API v3 - My Client The DNVGL.Veracity.Services.Api.My package provides a client to resources available under the 'My' view point of API v3. This view point is appropriate if you intend to use Veracity as an identity provider for your application. Resources retrieved from this view point are from the perspective of the authenticated user, Only User credentials authentication is supported by this package. Package Install Ensure you have configured to package NuGet Package Source or find the instructions here. Package Manager Console PM> `Install-Package DNVGL.Veracity.Services.Api.My` Example With the nuget package installed, services for each resource may be individually configured, injected and requested inside your solution. 1. Configuration To configure a resource service, introduce configuration in the form of OAuthHttpClientOptions: appsettings.json The My view point only supports User Credential Flow. { \"OAuthHttpClients\": [ ... { \"Name\": \"my-profile\", \"Flow\": \"UserCredentials\", \"BaseUri\": <BaseUri>, \"SubscriptionKey\": <SubscriptionKey>, \"OAuthClientOptions\": { \"Authority\": <Authority>, \"Scopes\": [ <Scope> ] } } ... ] } 2. Registration Register the service or services using extensions methods available from the DNVGL.Veracity.Services.Api.My.Extensions namespace. startup.cs Packages from DNVGL.Veracity.Service.Api are dependent on the DNVGL.OAuth.Api.HttpClient package, therefore the HttpClientFactory should also be injected. public void ConfigureServices(IServiceCollection services) { ... services.AddOAuthHttpClientFactory(Congiuration.GetSection(\"OAuthHttpClients\").Get<IEnumerable<OAuthHttpClientOptions>>()); ... services.AddMyProfile(\"my-profile\") ... } 3. Request service Request the service from the constructor by its interface: TestController.cs public class TestController : Controller { ... private readonly IMyProfile _myPofile; ... public TestController(IMyProfile myProfile) { ... _myPofile = myProfile ?? throw new ArgumentNullException(nameof(myProfile)); ... } ... public async Task<IActionResult> FetchProfile() { return Json(await _myPofile.Get()); } ... } Resources Companies Messages Policies Profile Services Companies Registration method Service interface AddMyCompanies(string clientConfigurationName) IMyCompanies Name Description List() Retrieves a collection of company references for the authenticated user. Messages Registration method Service interface AddMyMessages(string clientConfigurationName) IMyMessages Name Description List(bool includeRead) Retrieves a collection of messages addressed to the authenticated user. Get(string messageId) Retrieves an individual message addressed to the authenticated user. GetUnreadCount() Retrieves the numeric value indicating how many messages have not been marked as read by the authenticated user. Policies Registration method Service interface AddMyPolicies(string clientConfigurationName) IMyPolicies Name Description ValidatePolicies(string returnUrl) Validates all policies for the authenticated user. ValidatePolicy(string serviceId, string returnUrl, string skipSubscriptionCheck) Validates an individual policy for the authenticated user. Profile Registration method Service interface AddMyProfile(string clientConfigurationName) IMyProfile Name Description Get() Retrieves the user profile for the authenticated user. Services Registration method Service interface AddMyServices(string clientConfigurationName) IMyServices Name Description List() Retrieves a collection of service references for services the authenticated user is subscribed to."
  },
  "articles/DNVGL.Veracity.Services.Api/DNVGL.Veracity.Services.Api.This.html": {
    "href": "articles/DNVGL.Veracity.Services.Api/DNVGL.Veracity.Services.Api.This.html",
    "title": "Veracity - My Services API v3 - This Client",
    "keywords": "Veracity - My Services API v3 - This Client The DNVGL.Veracity.Services.Api.This package provides a client to resources available under the 'This' view point of API v3. This view point is appropriate for service owners integrating with Veracity enabling management of their service and sub-service subscriptions. Resources retrieved from this view point are from the perspective of a service, Only Client credentials authentication is supported by this package. Package Install Ensure you have configured to package NuGet Package Source or find the instructions here. Package Manager Console PM> `Install-Package DNVGL.Veracity.Services.Api.This` Example With the nuget package installed, services for each resource may be individually configured, injected and requested inside your solution. 1. Configuration To configure a resource service, introduce configuration in the form of OAuthHttpClientOptions: appsettings.json The This view point only supports Client Credential Flow. { \"OAuthHttpClients\": [ ... { \"Name\": \"this-subscribers\", \"Flow\": \"ClientCredentials\", \"BaseUri\": <BaseUri>, \"SubscriptionKey\": <SubscriptionKey>, \"OAuthClientOptions\": { \"Authority\": <Authority>, \"ClientId\": <ClientId>, \"ClientSecret\": <ClientSecret>, \"Resource\": <Resource>, \"Scopes\": [ <Scope> ], } } ... ] } 2. Registration Register the service or services using extensions methods available from the DNVGL.Veracity.Services.Api.This.Extensions namespace. startup.cs Packages from DNVGL.Veracity.Service.Api are dependent on the DNVGL.OAuth.Api.HttpClient package, therefore the HttpClientFactory should also be injected. public void ConfigureServices(IServiceCollection services) { ... services.AddOAuthHttpClientFactory(Congiuration.GetSection(\"OAuthHttpClients\").Get<IEnumerable<OAuthHttpClientOptions>>()); ... services.AddThisSubscribers(\"this-subscribers\") ... } 3. Request service Request the service from the constructor by its interface: TestController.cs public class TestController : Controller { ... private readonly IThisSubscribers _thisSubscribers; ... public TestController(IThisSubscribers thisSubscribers) { ... _thisSubscribers = thisSubscribers ?? throw new ArgumentNullException(nameof(thisSubscribers)); ... } ... public async Task<IActionResult> FetchSubscribers(int page, int pageSize) { return Json(await _thisSubscribers.List(page, pageSize)); } ... } Resources Administrators Services Subscribers Users Administrators Registration method Service interface AddThisAdministrators(string clientConfigurationName) IThisAdministrators Name Description Get(string userId) Retrieves an individual administrator for the authenticated service. List(int page, int pageSize) Retrieves a collection of administrator references for the authenticated service. Services Registration method Service interface AddThisServices(string clientConfigurationName) IThisServices Name Description AddSubscription(string serviceId, string userId, SubscriptionOptions options) Add a subscription to the authenticated service or nested services. GetAdministrator(string serviceId, string userId) Retrieve an individual administrator reference to a administrator of the authenticated service or nested services. GetSubscriber(serviceId, tring userId) Retrieve an individual user reference to a user which has a subscription to a specified service. List(int page, int pageSize) Retrieve a collection of services the authenticated service has access to. ListAdministrators(string serviceId, int page int pageSize) Retrieve a collection of administrator references of administrators for a specified service. ListSubscribers(string serviceId, int page, int pageSize) Retrieve a collection of user references of users subscribed to a specified service. NotifySubscribers(string serviceId, NotificationOptions options) Send a notification to users subscribed to the authenticated service or nested service. RemoveSubscription(string servieId, string userId) Remove a user subscription for a user and the authenticated service or a nested service. Subscribers Registration method Service interface AddThisSubscribers(string clientConfigurationName) IThisSubscribers Name Description Add(string userId, SubscriptionOptions options) Add a subscription to the authenticated service for a specified user. Get(string userId) Retrieve a user reference for a user subscribed to the authenticated service. List(int page, int pageSize) Retrieve a collection of user references to users subscribed to the authenticated service. Remove(string userId) Remove a user subscription to the authenticated service by specified user. Users Registration method Service interface AddThisUsers(string clientConfigurationName) IThisUsers Name Description Create(CreateUserOptions options) Create a new user. Create(params CreateUserOptions[] options) Create a collection of new users. Resolve(string email) Retrieves a collection of user references for users with a specified email value."
  },
  "articles/DependencyInjection/README.html": {
    "href": "articles/DependencyInjection/README.html",
    "title": "DNV Dependency Injection framework",
    "keywords": "DNV Dependency Injection framework"
  },
  "articles/Home.html": {
    "href": "articles/Home.html",
    "title": "Solution Package",
    "keywords": "Solution Package A collection of packages and tools for developers to support rapid, robust and extensible development of applications and services within DNV. Some of the supported features include: Authentication OpenId connection authentication OAuth HTTP client factory Security Security headers User management Secrets manager Integration Veracity - My Services API v3 clients Context Context.ServiceBus Context.AspNet Context.HttpClient Getting started Installing packages"
  },
  "articles/OAuth/Api.HttpClient/README.html": {
    "href": "articles/OAuth/Api.HttpClient/README.html",
    "title": "OAuth HTTP Client Factory",
    "keywords": "OAuth HTTP Client Factory Provides a factory for producing authenticated HttpClients for API integration via OAuth in .NET. Developers can use this library to create HttpClient instances which will be pre-authenticated for API requests based on provided configuration. This package supports two type of credential authentication: User credentials - A user may authenticate by providing a username and password via a UI. Client credentials - A service or application may provide a client id and secret to silently authenticate. Basic example 1. Configuration Setup API http client configuration in appsettings.json file: { \"ApiHttpClientOptions\": [ { \"Name\": \"userCredentialsClient\", \"Flow\": \"user-credentials\", \"BaseUri\": \"<BaseUri>\", \"SubscriptionKey\": \"<SubscriptionKey>\" }, { \"Name\": \"clientCredentialsClient\", \"Flow\":\"client-credentials\", \"BaseUri\": \"<BaseUri>\", \"SubscriptionKey\": \"<SubscriptionKey>\" \"OAuthClientOptions\": { \"Authority\": \"<Authority>\", \"ClientId\": \"<ClientId>\", \"ClientSecret\": \"<ClientSecret>\", \"Scopes\": [ \"<Scope>\", \"offline_access\" ], \"CallbackPath\": \"<CallbackPath>\" } } ] } The package injects a OAuthHttpClientFactory which is able to provide multiple HttpClients for different purposes. The HttpClients may all be configured through a configuration section in which the individual client configurations are listed with a unique Name which is used to request HttpClients with the corresponding configurations. The configuration shown above lists 2 HttpClients. The first with name \"userCredentialsClient\" is an example of a configuration which would honour the signed in user's credentials for the API for which it makes requests. The second with name \"clientCredentialsClient\" provides configuration for a client which would be authenticated via the client credential flow with a client id and secret to make requests in an API. This configuration would allow us to request either type of HttpClient by requesting it from from the HttpClientFactory by providing one of the two names: \"userCredentialsClient\" or \"clientCredentialsClient\" in the method call to the HttpClientFactory. 2. Registration Call the ServiceCollection extension method AddOAuthHttpClientFactory to register an instance of the OAuthHttpClientFactory in to your project in your Startup.cs file. The below code is retrieving the configuration from the \"ApiHttpClientOptions\" section defined in apsettings.json above. public void ConfigureService(IServiceCollection services) { ... services.AddOAuthHttpClientFactory(Congiuration.GetSection(\"ApiHttpClientOptions\").Get<IEnumerable<OAuthHttpClientOptions>>()); ... } If you require a HttpClient applying the user credential flow you should also include the web authentication (AddOidc) and token cache handling (AddDistributedMemoryCache) from the DNV.OAuth.Web package. Include the NuGet package in your project and call the required methods as below: public void ConfigureService(IServiceCollection services) { ... services.AddDistributedMemoryCache(); ... var oidcOptions = new OidcOptions { Authority = \"<Authority>\", ClientId = \"<ClientId>\", ClientSecret = \"<ClientSecret>\", Scopes = new[] { \"<Scope>\", \"offline_access\" }, ResponseType = OpenIdConnectResponseType.Code }; services.AddOidc(oidcOptions); ... services.AddOAuthHttpClientFactory(Congiuration.GetSection(\"ApiHttpClientOptions\").Get<IEnumerable<OAuthHttpClientOptions>>()); ... } If you only require HttpClients applying the client credential flow the DNV.OAuth.Web package is not required. 3. Request a client Resolve IHttpClientFactory to create user-credential or client-credential HttpClient to access web API. public class ExampleController { private readonly IHttpClientFactory _httpClientFactory; public ExampleController(IHttpClientFactory httpClientFactory) { _httpClientFactory = httpClientFactory; } public User DoSomethingWithSignInUser(string id) { var client = _httpClientFactory.CreateWithUserCredentialFlow(\"userCredentialsClient\"); ... } public Company DoSomethingWithService(string id) { var client = _httpClientFactory.CreateWithClientCredentialFlow(\"clientCredentialsClient\"); ... } }"
  },
  "articles/OAuth/Web/README.html": {
    "href": "articles/OAuth/Web/README.html",
    "title": "OAuth for Web Projects",
    "keywords": "OAuth for Web Projects Provides a .NETCore library for developers to simplify the work of setting up OpenId Connection authentication (OIDC) such as Veracity or Azure AD B2C for ASP.NET Core web project. Basic Authentication Introduce simple user credential authentication with OIDC. 1. Registration Add AddOidc extension method to ConfigureServices. public void ConfigureServices(IServiceCollection services) { ... services.AddOidc(o => { o.Authority = \"<Authority>\"; o.ClientId = \"<ClientId>\"; o.ClientSecret = \"<ClientSecret>\"; o.Resource = \"<Resource>\"; o.Scopes = new[] { \"<Scope>\" }; }); ... } 2. Configuration Add UseAuthentication and UseAuthorization extension methods to Configure. public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { ... app.UseAuthentication().UseAuthorization(); ... } 3. Authorize Decorate a controller or action with [Authorize] and launch your project. A challenge request will be sent to IDP(Microsoft or Veracity) to start the authentication process, and the HttpContext will be filled with authentication result. public class ExampleController { [Authorize] public IActionResult Index() { ... } } Access Token Cache If you web project act as an API gateway, you will want to cache users' access tokens to prevent unnecessary token requests. The library uses MSAL (Microsoft Authentication Library) to manipulate tokens. 1. Confguration Authorization code flow needs to be set to acquire access token, and refresh token is required for MSAL to re-acquire token from IDP if the token exceed its expiration. public void ConfigureServices(IServiceCollection services) { ... var oidcOptions = new OidcOptions { Authority = \"<Authority>\", ClientId = \"<ClientId>\", ClientSecret = \"<ClientSecret>\", Resource = \"<Resource>\", Scopes = new[] { \"<Scope>\", \"offline_access\" }, // offline_access is required to retrieve refresh_token. ResponseType = OpenIdConnectResponseType.Code }; ... } 2. Distributed Cache Registration To cache the tokens, an implementaion of IDistributedCache such as MemoryDistributedCache needs to be added. public void ConfigureServices(IServiceCollection services) { ... services.AddDistributedMemoryCache(); ... } Alternatively you could use RedisCache. public void ConfigureServices(IServiceCollection services) { ... services.AddDistributedRedisCache(o => { o.InstanceName = \"<InstanceName>\"; o.Configuration = \"<Configuration>\"; }); ... } 3. Token Cache Registration Calling AddDistributedTokenCache will have IDistributedCache attached to MSAL client app behind the scene, and the token acquiring process will be replaced by MSAL client app. public void ConfigureServices(IServiceCollection services) { ... services.AddDistributedTokenCache(oidcOptions); ... } 4. OIDC Registration Don't forget to add AddOidc after what you did previously. public void ConfigureServices(IServiceCollection services) { ... services.AddOidc(oidcOptions); ... } Add UseAuthentication and UseAuthorization extension methods to Configure. public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { ... app.UseAuthentication().UseAuthorization(); ... }"
  },
  "articles/PackageInstall.html": {
    "href": "articles/PackageInstall.html",
    "title": "Package Install",
    "keywords": "Package Install To install any package from the Solution Package collection, the package feed should be included in your nuget package sources: This may be added in Visual Studio by navigating to Tools > NuGet Package Manager > Package Manager Settings An Options window will appear, select the Package Sources node on the left hand pane the click the button, provide a Name and enter the Source below: https://dnvgl-one.pkgs.visualstudio.com/_packaging/DNVGL.SolutionPackage/nuget/v3/index.json Click OK to complete. One done it will be possible to add any of the NuGet packages outlined in this documentation to your projects via the Package Manager in visual studio or via the Package Manager Console."
  },
  "articles/SecretsManager/ConsoleApp/README.html": {
    "href": "articles/SecretsManager/ConsoleApp/README.html",
    "title": "Secrets Manager",
    "keywords": "Secrets Manager The DNV.SecretsManager package is a command line tool for managing secrets in Azure KeyVault or Azure DevOps Variable Groups. This tool allows secrets to be downloaded and uploaded as structured JSON files, meaning secrets may be uploaded in structured collections where previously they might have been maintained individually. What it does Given a collection of key vault secrets in an Azure Key vault for e.g: Name Type Status Expiration date Account--BaseUrl text/plain Enabled Company--ApiKey text/plain Enabled Company--Authority text/plain Enabled Company--ClientId text/plain Enabled Company--ClientSecret text/plain Enabled Emailer--BaseUri text/plain Enabled Emailer--FunctionKey text/plain Enabled The secrets manager tool could be executed with a command: secretsmanager keyvault -d -s <keyvault-url> -f output-file.json The resulting output-file.json would look like: { \"Account\": { \"BaseUrl\": <secret value> }, \"Company\": { \"ApiKey\": <secret value>, \"Authority\": <secret value>, \"BaseUrl\": <secret value>, \"ClientId\": <secret value>, \"ClientSecret\": <secret value> }, \"Emailer\": { \"BaseUri\": <secret value>, \"FunctionKey\": <secret value> } } Conversely, an input json file (input-file.json) could be uploaded to an Azure Key vault by executing a command: secretsmanager keyvault -u -s <keyvault-url> -f input-file.json Hierachy The secrets manager assumes a convention where the parent-child relationship between entities in a hierarchy are expressed with a -- delimeter. In practice this means: to express that Company is the parent of ApiKey a key would be named Company--ApiKey, if there exists multiple children to a parent they would be aggregated in to a single parent as may be seen in the result above with keys: Company--ApiKey, Company--Authority and Company--BaseUrl etc. Parent-child relationships may extend to far greater depth than the example given. Arrays It is also possible to include arrays of data in your configuration. { \"Names\": [ <secret value>, <secret-value>, <secret-value> ] } Uploading this would result in a set of secrets with indexes included in their keys: Name Type Status Expiration date Names--0 text/plain Enabled Names--1 text/plain Enabled Names--2 text/plain Enabled Useage secretsmanager <command> [<args>] Commands: keyvault Download or upload secrets from/to Azure Keyvault variablegroup Download or upload secrets from/to Azure DevOps Variable Group Key vault command secretsmanager keyvault [-h | --help] -d | --download -u | --upload | -c | --clear -s | --url <url> -f | --filename <filename> Options -h | --help Prints the synopsis of commands and options available. -d | --download Requests the secrets to be downloaded from the specified source to a JSON file. -u | --upload Requests that a provided JSON file be uploaded to a specified source. -c | --clear Deletes all secrets from the specified source. -s | --url <url> Provide the URL to the keyvault. -f | --filename <filename> Specify the file to which you would like to download to or upload from. Variable group command secretsmanager variablegroup [-h | --help] -d | --download -u | --upload | -c | --clear -s | --base-url <base-url> -o | --organization <organization> -p | --pat <pat> -g | --group-id <group-id> -f | --filename <filename> Options -h | --help Prints the synopsis of commands and options available. -d | --download Requests the secrets to be downloaded from the specified source to a JSON file. -u | --upload Requests that a provided JSON file be uploaded to a specified source. -c | --clear Deletes all secrets from the specified source. -s | --base-url <base-url> Provide the base URL to the Azure DevOps. -o | --organization <organization> Provide the organization under Azure DevOps to which a variable group belongs. -p | --pat <pat> Specify the Person Access Token for authentication. -g | --group-id <group-id> Specify the id of the variable group you would like to download from or upload to. -f | --filename <filename> Specify the file to which you would like to download to or upload from."
  },
  "articles/Specifications/README.html": {
    "href": "articles/Specifications/README.html",
    "title": "DNV Specifications framework",
    "keywords": "DNV Specifications framework This project represents a way to do Specification by Example - BDD style inspired by the conciseness of Machine.Specifications. What does it do? In BDD one talks about the given, when, then. Much like arrange, act and assert in a way that is more common in TDD. The biggest difference is on a mindset level of thinking in specifications of behaviors in your system. What this particular library delivers is a way to do these and also keep in line with what is common in the BDD world of having isolated specifications and not have typically a FooTests and dump all your tests for the unit Foo in it. The library supports convention lifecycle methods Establish(), Because() and Destroy(). There is no virtual method to override, just match the expected signatures: Signature Purpose void Establish() Establishes the current context - given / arrange void Because() Triggers the behavior being specified - when / act void Destroy() Tears down the context If your specification requires to run in an async context, it also supports the following: Signature Purpose Task Establish() Establishes the current context - given / arrange Task Because() Triggers the behavior being specified - when / act Task Destroy() Tears down the context All lifecycle methods are optional and will be ignored if not there. Multiple levels of inheritance recursively is supported, meaning that specifications will run all the lifecycle methods from the proper level in the hierarchy chain and up or down the hierarchy depending on whether it is arrange/act or teardown. To get all this to work, all you need to do is inherit from the Specification type found in DNV.Specifications.<Testframework>. Structure and naming The general purpose of BDD and specification by example is to make it all very human readable and possible to navigate quite easily. New developers can come into the solution and pretty much read up on the specifications and get a glimpse of how the system works. So rather than having a FooTests class with all the tests, it is recommended to have folders describing the scenario being specified. For a unit this could be named for_<name of unit> e.g. : for_SecurityService. If you're testing a more domain centric scenario in your system that involves multiple units, the folder name would reflect the name of the scenario e.g.: for_logging_in_users. Within these folders you'd keep your when statements. E.g. When_authenticating_an_admin_user. If you want to group things, for instance lets say you have multiple behaviors within the concept of authenticating, you could then have a folder grouping these called When_authenticating and then drop in the behavior specifications within this folder an_admin_user and a_null_user. In addition to this you might want to reuse a context. This can quite easily be achieved through inheritance. Structure-wise you'd then have a given folder and namespace where you'd put the common reusable context - again reflecting what it represents, for instance for our authentication scenario: no_user_authenticated. For a sample of how this looks like, look within the test folders here folder. Compiler Warnings Since the naming of classes, methods and structure deviates from what is expected by default from the C# compiler, you typically end up getting a lot of warnings. These can be turned off by adding a NoWarn element within a PropertyGroup to your .csproj file: <PropertyGroup> <NoWarn>CA1707;CS1591;RCS1213;IDE0051;IDE1006;CA1051</NoWarn> </PropertyGroup> Warning Description CA1707 Identifiers should not contain underscores CA1051 Do not declare visible instance fields CS1591 Missing XML comment for publicly visible type or member 'Type_or_Member' IDE0051 Remove unused private member IDE1006 Naming rule violation RCS1213 Remove unused member declaration If you're using static code analysis and stylecop and have turned on all rules by default, you might also encounter the following that you want to turn off: Warning Description SA1633 File header copyright text must match SA1649 File name must match type name SA1600 Elements must be documented SA1310 Field names must not contain underscore SA1502 Element must not be on a single line SA1134 Depending on your solution, you might want to consider suppressnig the following. Warning Description RCS1090 Add call to 'ConfigureAwait'. Example class When_authenticating_an_admin_user : Specification { SecurityService subject; UserToken user_token; void Establish() => subject = new SecurityService(); void Because() => user_token = subject.Authenticate(\"username\", \"password\"); [Fact] void should_indicate_the_users_role() => user_token.Role.ShouldEqual(Roles.Admin); [Fact] void should_have_a_unique_session_id() => user_token.SessionId.ShouldNotBeNull(); } Catching an exception and testing for the correct exception: class When_authenticating_a_null_user : Specification { SecurityService subject; Exception result; void Establish() => subject = new SecurityService(); void Because() => result = Catch.Exception(() => subject.Authenticate(null, null)); [Fact] void should_throw_user_must_be_specified_exception() => result.ShouldBeOfExactType<UserMustBeSpecified>(); } Building reusable contexts (in a sub-namespace with given): class no_user_authenticated { protected SecurityService subject; void Establish() => subject = new SecurityService(); } Refactor one of the specifications: class When_authenticating_a_null_user : given.no_user_authenticated { Exception result; void Because() => result = Catch.Exception(() => subject.Authenticate(null, null)); [Fact] void should_throw_user_must_be_specified_exception() => result.ShouldBeOfExactType<UserMustBeSpecified>(); } Supports teardown through destroy: class no_user_authenticated { protected SecurityService subject; void Establish() => subject = new SecurityService(); void Destroy() => subject.Dispose(); }"
  },
  "articles/Veracity/Services/ApiV3/Api.Directory/readme.html": {
    "href": "articles/Veracity/Services/ApiV3/Api.Directory/readme.html",
    "title": "Veracity - My Services API v3 - Directory Client",
    "keywords": "Veracity - My Services API v3 - Directory Client Provides an async .NET client for the Directory view point in Veracity My Services API v3. Allows fetching and updating resources without a focus on a specifc user or service resource. Resources Companies Services Users Example With the nuget package installed, services for each resource may be individually configured, injected and requested inside your solution. 1. Configuration To configure a resource service, introduce configuration in the form of OAuthHttpClientOptions: appsettings.json The Directory view point only supports Client Credential Flow. { \"OAuthHttpClients\": [ ... { \"Name\": \"company-directory\", \"Flow\": \"ClientCredentials\", \"BaseUri\": <BaseUri>, \"SubscriptionKey\": <SubscriptionKey>, \"OAuthClientOptions\": { \"Authority\": <Authority>, \"ClientId\": <ClientId>, \"ClientSecret\": <ClientSecret>, \"Scopes\": [ <Scope> ], } } ... ] } 2. Registration Register the service or services using extensions methods available from the DNV.Veracity.Services.Api.Directory.Extensions namespace. startup.cs Packages from DNV.Veracity.Service.Api are dependent on the DNV.OAuth.Api.HttpClient package, therefore the HttpClientFactory should also be injected. public void ConfigureServices(IServiceCollection services) { ... services.AddOAuthHttpClientFactory(Congiuration.GetSection(\"OAuthHttpClients\").Get<IEnumerable<OAuthHttpClientOptions>>()); ... services.AddCompanyDirectory(\"company-directory\") ... } 3. Request service Request the service from the constructor by its interface: ExampleController.cs public class ExampleController : Controller { ... private readonly ICompanyDirectory _companyDirectory; ... public ExampleController(ICompanyDirectory companyDirectory) { ... _companyDirectory = companyDirectory ?? throw new ArgumentNullException(nameof(companyDirectory)); ... } ... public async Task<IActionResult> FetchCompany(string companyId) { return Json(await _companyDirectory.Get(companyId)); } ... }"
  },
  "articles/Veracity/Services/ApiV3/Api.My/readme.html": {
    "href": "articles/Veracity/Services/ApiV3/Api.My/readme.html",
    "title": "Veracity - My Services API v3 - My Client",
    "keywords": "Veracity - My Services API v3 - My Client Provides an async .NET client for the My view point in Veracity My Services API v3. Allows fetching information and making requests for the authenticated user. Resources Companies Messages Policies Profile Services Example With the nuget package installed, services for each resource may be individually configured, injected and requested inside your solution. 1. Configuration To configure a resource service, introduce configuration in the form of OAuthHttpClientOptions: appsettings.json The My view point only supports User Credential Flow. { \"OAuthHttpClients\": [ ... { \"Name\": \"my-profile\", \"Flow\": \"UserCredentials\", \"BaseUri\": <BaseUri>, \"SubscriptionKey\": <SubscriptionKey>, \"OAuthClientOptions\": { \"Authority\": <Authority>, \"Scopes\": [ <Scope> ] } } ... ] } 2. Registration Register the service or services using extensions methods available from the DNV.Veracity.Services.Api.My.Extensions namespace. startup.cs Packages from DNV.Veracity.Service.Api are dependent on the DNV.OAuth.Api.HttpClient package, therefore the HttpClientFactory should also be injected. public void ConfigureServices(IServiceCollection services) { ... services.AddOAuthHttpClientFactory(Congiuration.GetSection(\"OAuthHttpClients\").Get<IEnumerable<OAuthHttpClientOptions>>()); ... services.AddMyProfile(\"my-profile\") ... } 3. Request service Request the service from the constructor by its interface: ExampleController.cs public class ExampleController : Controller { ... private readonly IMyProfile _myPofile; ... public ExampleController(IMyProfile myProfile) { ... _myPofile = myProfile ?? throw new ArgumentNullException(nameof(myProfile)); ... } ... public async Task<IActionResult> FetchProfile() { return Json(await _myPofile.Get()); } ... }"
  },
  "articles/Veracity/Services/ApiV3/Api.This/readme.html": {
    "href": "articles/Veracity/Services/ApiV3/Api.This/readme.html",
    "title": "Veracity - My Services API v3 - This Client",
    "keywords": "Veracity - My Services API v3 - This Client Provides an async .NET client for the This view point in Veracity My Services API v3. Allows manipulation and retrival of information related to a service. Resources Administrators Services Subscribers Users Example With the nuget package installed, services for each resource may be individually configured, injected and requested inside your solution. 1. Configuration To configure a resource service, introduce configuration in the form of OAuthHttpClientOptions: appsettings.json The This view point only supports Client Credential Flow. { \"OAuthHttpClients\": [ ... { \"Name\": \"this-subscribers\", \"Flow\": \"ClientCredentials\", \"BaseUri\": <BaseUri>, \"SubscriptionKey\": <SubscriptionKey>, \"OAuthClientOptions\": { \"Authority\": <Authority>, \"ClientId\": <ClientId>, \"ClientSecret\": <ClientSecret>, \"Scopes\": [ <Scope> ], } } ... ] } 2. Registration Register the service or services using extensions methods available from the DNV.Veracity.Services.Api.This.Extensions namespace. startup.cs Packages from DNV.Veracity.Service.Api are dependent on the DNV.OAuth.Api.HttpClient package, therefore the HttpClientFactory should also be injected. public void ConfigureServices(IServiceCollection services) { ... services.AddOAuthHttpClientFactory(Congiuration.GetSection(\"OAuthHttpClients\").Get<IEnumerable<OAuthHttpClientOptions>>()); ... services.AddThisSubscribers(\"this-subscribers\") ... } 3. Request service Request the service from the constructor by its interface: ExampleController.cs public class ExampleController : Controller { ... private readonly IThisSubscribers _thisSubscribers; ... public ExampleController(IThisSubscribers thisSubscribers) { ... _thisSubscribers = thisSubscribers ?? throw new ArgumentNullException(nameof(thisSubscribers)); ... } ... public async Task<IActionResult> FetchSubscribers(int page, int pageSize) { return Json(await _thisSubscribers.List(page, pageSize)); } ... }"
  },
  "articles/WebProjectTemplates.html": {
    "href": "articles/WebProjectTemplates.html",
    "title": "Introduction to Solution Web Project Templates",
    "keywords": "Introduction to Solution Web Project Templates Project templates produce ready-to-run projects that make it easy for users to start with a working set of code. .NET includes a few project templates such as a console application or a class library. So we provide a project template to help you initialize web project. We don't plan to introduce how to setup a project template via dotnet core cli. If you are interested, please refer Tutorial: Create a template package . Introduce templates into dotnet CLI Tools Overview The DNV.SolutionPackage.ProjectTemplates helps developer to quickly initialize a work around web application project. We don't need to take more time on setting up. The developer can focus on business domain development tasks. This template contains authentication with Veracity. If the application need user management, it is also provided. Install the template package There are two methods to install SolutionPackage project templates. One is to install it directly from Nuget package source. Other is to install from local file. dotnet new -i DNV.SolutionPackage.ProjectTemplates::1.0.0 --nuget-source \"https://dnvgl-one.pkgs.visualstudio.com/_packaging/DNVGL.SolutionPackage/nuget/v3/index.json\" dotnet new -i C:\\Temp\\DNV.SolutionPackage.ProjectTemplates.1.0.0.nupkg The following template packages will be installed: C:\\Temp\\DNV.SolutionPackage.ProjectTemplates.1.0.0.nupkg Success: DNV.SolutionPackage.ProjectTemplates::1.0.0 installed the following templates: Template Name Short Name Language Tags ------------------------------- -------------- -------- ---- DNV.SolutionPacakge.WebTemplate DNVWebTemplate DNV List the templates dotnet new --list After the template package installation, DNV.SolutionPackages.WebTemplate is in the templates list. You also can use dotnet new --list command to list the detail which templates have installed. dotnet new -l These templates matched your input: Template Name Short Name Language Tags -------------------------------------------- ------------------- ---------- ------------------------------------- ASP.NET Core Empty web [C#],F# Web/Empty ASP.NET Core gRPC Service grpc [C#] Web/gRPC ASP.NET Core Web API webapi [C#],F# Web/WebAPI ASP.NET Core Web App webapp,razor [C#] Web/MVC/Razor Pages ASP.NET Core Web App (Model-View-Controller) mvc [C#],F# Web/MVC ASP.NET Core with Angular angular [C#] Web/MVC/SPA ASP.NET Core with React.js react [C#] Web/MVC/SPA ASP.NET Core with React.js and Redux reactredux [C#] Web/MVC/SPA Blazor Server App blazorserver [C#] Web/Blazor Blazor WebAssembly App blazorwasm [C#] Web/Blazor/WebAssembly/PWA Class Library classlib [C#],F#,VB Common/Library Console App console [C#],F#,VB Common/Console DNV.SolutionPacakge.WebTemplate DNVWebTemplate DNV dotnet gitignore file gitignore Config ... There are some built-in template packages, also you see our DNV.SolutionPackage.WebTemplate in the list. Uninstall the template package The dotnet new --uninstall command can remove the template. dotnet new --uninstall DNV.SolutionPackage.ProjectTemplates dotnet new -u DNV.SolutionPackage.ProjectTemplates Success: DNV.SolutionPackage.ProjectTemplates::1.0.0 was uninstalled. Create project via Solution Package project templates Let's take a look the functions of DNV.SolutionPackage.WebTemplate. The dotnet new DNVWebTemplate --help command list all the parameters. dotnet new DNVWebTemplate --help DNV.SolutionPacakge.WebTemplate Author: Tim Tu Options: -t|--template The type of webtemplate to use basic - basic management - management Default: basic -s|--skipRestore If specified, skips the automatic restore of the project on create. bool - Optional Default: false -sk|--skipDBSetup If specified, skips the DB creation process on create. bool - Optional Default: false The -t|--template option chooses main functions will be installed in created project. The basic is default value, the created project will integrate authentication library DNVGL.OAuth.Web which also is from DNV.SolutionPackage. The management option not only has all basic functions, but also integrates user management The -s|--skipRestore option restores the dependencies of the created project. The default value is false. Doesn't restore the dependencies after created project. The -sk|--skipDBSetup option must works with -t|--template management option. It will create tables related with user management in local SQL Server database. If there is no SQL Server in your local machine, A folder Scripts will be created in solution folder. The Scripts folder contains db.bat and dbcreation.sql files. Use dbcreeation.sql to generate tables in specify database. The dotnet new DNVWebTemplate command create project from DNV.SolutionPackage.WebTemplate template. dotnet new DNVWebTemplate --template management --name Demo.Management.Website --output ManagementSolution The template \"DNV.SolutionPacakge.WebTemplate\" was created successfully. Processing post-creation actions... No Primary Outputs to restore. Template is configured to run the following action: Actual command: Scripts/db.bat Do you want to run this action [Y(yes)|N(no)]? N In the work folder, there are new solution and project files in folder ManagementSolution. When the website is running, the first access user will be added as administrator. This function is implemented in AuthController.cs file. Please pay attention when you use in your business. The front-end of website is SPA application. The source code is in ClientApp folder. Please refer https://webapptemplatedoc.z6.web.core.windows.net/articles/intro.html ."
  },
  "articles/context/DNV.Context.AspNet.html": {
    "href": "articles/context/DNV.Context.AspNet.html",
    "title": "DNV.Context.AspNet",
    "keywords": "DNV.Context.AspNet The DNV.Context.AspNet package is a .Net library which provides some extension methods, middleware for create or parse ambient context(IContextAccessor<>) in Asp .Net web applications. Basic example Get Data From Context First define the context payload, ex public record Identity { public string? Name { get; set; } public string? Country { get; set; } public string? City { get; set; } } When application startup, call extension method AddAspNetContext, pass in custom context payload creator. In this example, it is like below: builder.Services.AddAspNetContext((context) => (true, new Identity { Name = \"John Doe\", Country = \"Norway\", City = \"Oslo\" })); Register a middleware when startup. This will initialize the context using custom context payload creator which is passed in AddAspNetContext. app.UseAspNetContext<Identity>(); Then you can get the context data in a controller action. public class HomeController : Controller { private readonly ILogger<HomeController> _logger; private readonly AspNetContextAccessor<Identity> _accessor; public HomeController(ILogger<HomeController> logger, AspNetContextAccessor<Identity> accessor) { _accessor = accessor; _logger = logger; } public IActionResult Index() { var identity = _accessor.Context?.Payload; ViewData[\"Name\"] = identity?.Name; ViewData[\"Country\"] = identity?.Country; ViewData[\"City\"] = identity?.City; return View(); } } The display result will be:"
  },
  "articles/context/DNV.Context.HttpClient.html": {
    "href": "articles/context/DNV.Context.HttpClient.html",
    "title": "DNV.Context.HttpClient",
    "keywords": "DNV.Context.HttpClient The DNV.Context.HttpClient package is a .Net library which provides extension methods for adding context data in http client request. Basic example Add Context to Http Client Context Handler First define the context payload, ex public class Identity { public string? Name { get; set; } public string? Country { get; set; } public string? City { get; set; } } When application startup, call an extension method AddHttpClientContext. This will add a Http message handler(HttpClientContextHandler) to the named http client. HttpClientContextHandler will serialize context data to request headers before send http request. In this example, it adds an empty Identity object to HttpClientContextHandler. builder.Services.AddAspNetContext((context) => (true, new Identity()), null); Send Http Request With Context Data In your controller, initialize context first, then send request with context data. public class HomeController : Controller { private readonly IHttpClientFactory _httpClientFactory; private readonly IContextCreator<Identity> _contextCreator; public HomeController(IHttpClientFactory httpClientFactory, IContextCreator<Identity> contextCreator) { _httpClientFactory = httpClientFactory; _contextCreator = contextCreator; } [HttpPost] [Route(\"useridentity\")] public async Task<IActionResult> UserIdentity([FromForm] Identity userIdentity) { // Initialize context _contextCreator.InitializeContext(new Identity { Name = userIdentity.Name, Country = userIdentity.Country, City = userIdentity.City }, Guid.NewGuid().ToString()); // Call extension method to create http client var client = _httpClientFactory.CreateContextClient<Identity>(); client.BaseAddress = new Uri(\"https://localhost:7174\"); // Send request var request = new HttpRequestMessage(HttpMethod.Get, new Uri(\"api/identity/user\", UriKind.Relative)); var resp = await client.SendAsync(request); ...... } } In your api controller, get context from http request header, and returns to caller. [HttpGet] [Route(\"user\")] public Identity GetUser() { var headers = _httpContext?.Request.Headers[AspNetContextAccessor<Identity>.HeaderKey]; if(headers.HasValue) { var testContext = JsonSerializer.Deserialize<TestContext>(headers.Value.ToString(), new JsonSerializerOptions { PropertyNameCaseInsensitive = true, }); return testContext?.Payload!; } return new Identity(); } Display Context Data in Page [HttpPost] [Route(\"useridentity\")] public async Task<IActionResult> UserIdentity([FromForm] Identity userIdentity) { ...... // Receive data and returns to the view for display. var content = resp.Content.ReadAsStringAsync(); var identity = JsonSerializer.Deserialize<Identity>(content.Result, new JsonSerializerOptions { PropertyNameCaseInsensitive = true }); ViewData[\"Name\"] = identity?.Name; ViewData[\"Country\"] = identity?.Country; ViewData[\"City\"] = identity?.City; return View(\"Result\"); }"
  },
  "articles/context/DNV.Context.ServiceBus.html": {
    "href": "articles/context/DNV.Context.ServiceBus.html",
    "title": "DNV.Context.ServiceBus",
    "keywords": "DNV.Context.ServiceBus The DNV.Context.ServiceBus package is a .Net library which provides some extension method based on Azure.Messaging.ServiceBus for sending and receiving messages with ambient context(IContextAccessor<>). Basic example Send Message With Context You can self define the context payload, ex public class SampleContext { public string Name { get; set; } public string SampleData { get; set; } } Before start sending the message, get the IContextAccessor<> at first, and then call the extension method SendMessageAsync<>(message, context) with the context. It will send the context within the message. The correlation id will be set into message.CorrelationId, and the detailed context will be set into the customized key(X-Ambient-Context-{typeof(T).Name}) inside the message property ApplicationProperties. public class ExampleController : Controller { private readonly ILogger<HomeController> _logger; private readonly IContextAccessor<SampleContext> _contextAccessor; private readonly ServiceBusConfig _serviceBusConfig; public HomeController(ILogger<HomeController> logger, IContextAccessor<SampleContext> contextAccessor, IOptionsSnapshot<ServiceBusConfig> serviceBusOptions) { _logger = logger; _contextAccessor = contextAccessor; _serviceBusConfig = serviceBusOptions.Value; } [Route(\"/sendmessage\"), HttpPost] public async Task<IActionResult> SendMessage() { var client = new ServiceBusClient(_serviceBusConfig.ConnectionString); var sender = client.CreateSender(_serviceBusConfig.TargetQueue); //send message with context await sender.SendMessageAsync(new ServiceBusMessage(\"test\"), _contextAccessor); return Ok(); } } Receive Message With Context Mainly call the extension method InitializeContext<T>(context) of Func<ProcessMessageEventArgs, Task> and register it with the servicebus processor, it will help to build the context from the received message. var client = new ServiceBusClient(connectionString); var processor = client.CreateProcessor(targetQueue); //define context var localContextAccessor = new LocalContextAccessor<SampleContext>((args) => { return (false, null); }); //define the default handler Func<ProcessMessageEventArgs, Task> messageHandler = args => { Console.WriteLine(args.Message.Body.ToString()); Console.WriteLine(\"correlationid: \" + localContextAccessor.Context?.CorrelationId); Console.WriteLine(\"payload->name: \"+ localContextAccessor.Context?.Payload?.Name); Console.WriteLine(\"payload->sampledata: \"+localContextAccessor.Context?.Payload?.SampleData); Console.WriteLine(\"Thread Id: \"+ Thread.CurrentThread.ManagedThreadId.ToString()); return Task.CompletedTask; }; //call extension method to initialize context processor.ProcessMessageAsync += messageHandler.InitializeContext(localContextAccessor, (args) => { return (false, null); });"
  },
  "articles/index.html": {
    "href": "articles/index.html",
    "title": "Tutorials page",
    "keywords": "Tutorials page"
  },
  "articles/securityHeader.html": {
    "href": "articles/securityHeader.html",
    "title": "HTTP Response Security Header",
    "keywords": "HTTP Response Security Header DNVGL.Web.Security provides extension methods to setup http response headers for ASP.NET Core application. Package Install Ensure you have configured to package NuGet Package Source or find the instructions here. Package Manager Console PM> `Install-Package DNVGL.OAuth.Web` 1. Basic Example public class Startup { //... public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //... app.UseDefaultHeaders(); //... } } The package set up below default http response headers. Key Value X-Xss-Protection 1 X-Frame-Options SAMEORIGIN X-Content-Type-Options no-referrer X-Permitted-Cross-Domain-Policies none Expect-CT enforce, max-age=7776000 Strict-Transport-Security max-age=15552000; includeSubDomains If you have setup your own response headers before using the pacakge to setup default headers. You own reponse headers will be kept. The package set up below default csp rule in http response headers. Key Value default-src 'self' object-src 'self' connect-src 'self' https://dc.services.visualstudio.com script-src 'self' https://www.recaptcha.net https://www.gstatic.com https://www.gstatic.cn font-src 'self' data: https://onedesign.azureedge.net https://veracitycdn.azureedge.net media-src 'self' worker-src 'self' blob: img-src 'self' https://onedesign.azureedge.net https://dnvglcom.azureedge.net https://cdnveracity.azureedge.net frame-src 'self' https://www.google.com https://www.recaptcha.net/ style-src 'self' https://onedesign.azureedge.net If you have setup your own CSP before using the pacakge to setup default headers. You own CSP will be kept. 2. Customize Response Header The pacakge supports to overwrite the above default setting. This is a code sample to overwrite X-Frame-Options: public class Startup { //... public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //... app.UseDefaultHeaders(h=> h.Add(\"X-Frame-Options\", \"DENNY\")); //... } } 3. Customize CSP in Response Header The pacakge supports to overwrite the above default setting. This is a code sample to overwrite styleSrc: public class Startup { //... public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //... app.UseDefaultHeaders(h=> h.ReplaceDefaultContentSecurityPolicy(styleSrc: \"'self' 'nonce-123456789909876543ghjklkjvcvbnm'\");); //... } } Or extend the above default setting. This is a code sample to extend styleSrc: public class Startup { //... public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //... app.UseDefaultHeaders(h=> h.ExtendDefaultContentSecurityPolicy(styleSrc: \"'nonce-123456789909876543ghjklkjvcvbnm'\");); //... } } 4. Skip CSP in Response Header for specific requests. By default, The package doesn't add csp into respsone for all http requests which url contain '/swagger/'. It supports to overwrite the default skip logic. This is a code sample to skip all request which url contains '/nocsprequired/'. public class Startup { //... public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //... app.UseDefaultHeaders(h=> h.SkipContentSecurityPolicyForRequests((req) => req.Path.ToString().ToLowerInvariant().Contains(\"/nocsprequired/\"))); //... } } 5. Permissions Policy Permissions Policy HTTP Header can be provided by your web server / web application in order to improve the security of your visitors and the data they may be accessing on your site. Standardized Features Feature Name Description accelerometer The Accelerometer interface of the Sensor APIs provides on each reading the acceleration applied to the device along all three axes. ambient-light-sensor The AmbientLightSensor interface of the Sensor APIs returns the current light level or illuminance of the ambient light around the hosting device. autoplay Controls the ability to have Media (Audio or Video) elements begin playback without user interaction in the current document. When this policy is disabled and there were no user gestures, the Promise returned by HTMLMediaElement.play() will reject with a DOMException. The autoplay attribute on <audio> and <video> elements will be ignored. battery The Battery Status API can be used to defer or scale back work when the device is not charging in or is low on battery. camera Manages access to Camera interfaces (physical and virtual). cross-origin-isolated Cross-origin isolation enables a web page to use powerful features such as SharedArrayBuffer, performance.measureUserAgentSpecificMemory(), high resolution timer with better precision, or the JS Self-Profiling API. This also impacts the \"document-domain\" permission when set (see below). display-capture A document's permissions policy determines whether any content in that document is allowed to use getDisplayMedia. document-domain Provides access to the deprecated \"document.domain[=domain]\" setter. When the \"document-domain\" feature is disabled, the setter will throw a \"SecurityError\" exception. In cases where crossOriginIsolated or originAgentCluster return true, the setter will do nothing. It is recommended to avoid using the document.domain setter, instead, use postMessage() or MessageChannel objects to communicate across origins in a safe manner. encrypted-media Encrypted Media Extensions provides an API that enables web applications to interact with content protection systems, to allow playback of encrypted audio and video. Provides access to the requestMediaKeySystemAccess() method, a part of the MediaKeys object. execution-while-not-rendered Controls if tasks should execute for nested browsing contexts (eg. iframes) when it has/is not being rendered. execution-while-out-of-viewport Controls if tasks should execute for nested browsing contexts (eg. iframes) when not within the current viewport. fullscreen Determines whether any content in a document is allowed to go fullscreen. If disabled in any document, no content in the document will be allowed to use fullscreen. geolocation The Geolocation API provides access to geographical location information associated with the host device. gyroscope Gyroscope sensor interface to monitor the rate of rotation around the three local primary axes of the device. keyboard-map Controls whether the getLayoutMap() method is exposed on the \"Keyboard\" interface. magnetometer Magnetometer sensor interface to measure a magnetic field in the X, Y and Z axis. microphone Manages access to Microphone interfaces (physical and virtual). midi Musical Instrument Digital Interface (MIDI) protocol enables electronic musical instruments, controllers and computers to communicate and synchronize with each other. navigation-override Enables the page author to take control over the behavior of spatial navigation, or to cancel it outright. Spatial navigation is the ability to move around the page directionally which can be useful for a web page built using a grid-like layout, or other predominantly non linear layouts. More often this is used in browsers on devices with limited input control, such as a TV. payment Allow merchants (i.e. web sites selling physical or digital goods) to utilise one or more payment methods with minimal integration. picture-in-picture Allow websites to create a floating video window always on top of other windows so that users may continue consuming media while they interact with other content sites, or applications on their device. This item controls whether the request Picture-in-Picture algorithm may return a SecurityError and whether pictureInPictureEnabled is true or false. publickey-credentials-get Determines whether any content in the allowed documents is allowed to successfully invoke the Web Authentication API. If disabled in any document, no content in the document will be allowed to use the foregoing methods, attempting to do so will return an error. screen-wake-lock A screen wake lock prevents the screen from turning off. Only visible documents can acquire the screen wake lock. sync-xhr The sync-xhr policy controls whether synchronous requests can be made through the XMLHttpRequest API. If disallowed in a document, then calls to send() on XMLHttpRequest objects with the synchronous flag set will fail, causing a NetworkError DOMException to be thrown. usb The WebUSB API provides a way to safely expose USB device services to the web. Controls whether the usb attribute is exposed on the Navigator object. web-share Exposes the navigator.share() API where supported, which shares the current URL via user agent provided share to locations. xr-spatial-tracking The WebXR Device API provides the interfaces necessary to enable developers to build compelling, comfortable, and safe immersive applications on the web across a wide variety of hardware form factors. Proposed Features Feature Name Description clipboard-read Read from the device clipboard via the Clipboard API clipboard-write Write to the device clipboard via the Clipboard API gamepad Determines whether any content in that document is allowed to access getGamepads(). If disabled in any document, no content in the document will be allowed to use getGamepads(), nor will the \"gamepadconnected\" and \"gamepaddisconnected\" events fire. speaker-selection Determines whether any content in a document is allowed to use the selectAudioOutput function to prompt the user to select an audio output device, or allowed to use setSinkId to change the device through which audio output should be rendered, to a non-system-default user-permitted device. Experimental Features Feature Name Description conversion-measurement Click Through Attribution Reporting. To enable this, use the Chrome command line flag --enable-blink-features=ConversionMeasurement focus-without-user-activation Helps control the use of automated focus in a main frame or <iframe>. The proposed feature provides a means for developers to block the use of automatic focus in nested contents. hid Allow a web page to communicate with HID devices (Human Interface Device) idle-detection Allow usage of the IdleDetector interface to better detect if a user is at their device, instead of trying to identify if a user has just become inactive, such as left window open, screen saver activated, screen turned off, changed tabs or changed applications. interest-cohort Federated Learning of Cohorts (FLoC) is a new way that browsers could enable interest-based advertising on the web. A site should be able to declare that it does not want to be included in the user's list of sites for cohort calculation. serial Provide direct communication between a web site and the device that it is controlling via a Serial port. To enable this, use the Chrome command line flag --enable-blink-features=Serial sync-script Unknown - No information currently available. To enable this, use the Chrome command line flag --enable-blink-features=ExperimentalProductivityFeatures. trust-token-redemption This API proposes a new per-origin storage area for “Privacy Pass” style cryptographic tokens, which are accessible in third party contexts. These tokens are non-personalized and cannot be used to track users, but are cryptographically signed so they cannot be forged. window-placement Proposal to provide additional informatiion for Multi-Screen Window Placement. vertical-scroll Vertical scroll policy is a feature introduced to assist websites in blocking certain embedded contents from interfering with vertical scrolling. Stopping a user from vertically scrolling the page might be a frustrating experience. 5.1 Customize Permissions Policy Customize Permissions Policy in HTTP Header public class Startup { //... public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //... app.UseDefaultHeaders(h=> { var policy = new PermissionsPolicy(); policy.Feature(FeatureNames.Camera).Disable(); policy.Feature(FeatureNames.Fullscreen).Enable(); policy.Feature(FeatureNames.Geolocation).Enable().Self(); policy.Feature(FeatureNames.Usb).Enable().Custom(\"https://www.dnv.com\"); policy.Feature(FeatureNames.Microphone).Enable().Self().Custom(\"https://www.google.com\"); h.Add(PermissionsPolicy.Key, policy.ToString()); }); //... } } 5.2 Enable all Permissions Policy Enable all Permissions Policy in HTTP Header public class Startup { //... public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //... app.UseDefaultHeaders(h=> h.EnableAllPermissionsPolicyForSelf()); //... } } 5.3 Disable all Permissions Policy Disable all Permissions Policy in HTTP Header public class Startup { //... public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //... app.UseDefaultHeaders(h=> h.DisableAllPermissionsPolicy()); //... } }"
  },
  "articles/userManagement.html": {
    "href": "articles/userManagement.html",
    "title": "User Management and Authorization",
    "keywords": "User Management and Authorization DNVGL.Authorization.UserManagement.ApiControllers provides restAPIs to manage user, role and company. It also provides mechanisms to authorize API endpoints. Go through Overview to understand the logic behind the package. Check out Demo Projects. Prerequisites PM> Install-Package DNVGL.Authorization.UserManagement.ApiControllers PM> Install-Package DNVGL.Authorization.UserManagement.EFCore Basic Usage This simple example will show you the minimum steps to setup user management and authorization in a ASP.NET Core project. The example uses SQL Server as database and Veracity authentication (Azure AD B2C). 1. register user management module in ASP.NET core project. PM> Install-Package Microsoft.EntityFrameworkCore.SqlServer public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagement().UseEFCore(new EFCoreOptions { DbContextOptionsBuilder = options => options.UseSqlServer(@\"Data Source=.\\SQLEXPRESS;Initial Catalog=UserManagement;Trusted_Connection=Yes;\") }); //... } public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //... //Put UseRouting or MapControllers before UseAuthentication and UseAuthorization //app.MapControllers(); app.UseRouting(); app.UseAuthentication().UseAuthorization(); //... //... //The following code is required if app.UseRouting() is used instead of app.MapControllers(); app.UseEndpoints(endpoints => { //... endpoints.MapDefaultControllerRoute(); }); //... } } 2. Create tables in database Find and execute NewTableScript.sql which is located at the content directory once you imported the package in your project. 3. Create a super admin in Table - Users. The following is sample. | Id | Email | FirstName | LastName | VeracityId | SuperAdmin | Active | Deleted | |--|--|--|--|--|--|--|--| | 1 | email | first name | last name | veracity id | 1 | 1 | 0 4. Generate Swagger api documentation (Optional) NOTE: This step is optional. You can generate API docs in your own way. The following code has dependency on Nuget package - Swashbuckle.AspNetCore. Additionaly, you will get more explanation if you set apidocs/DNVGL.Authorization.UserManagement.ApiControllers.xml's Copy to Output Directory as Copy Always. public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddControllers(); services.AddSwaggerGen(c => { // swagger documentaion group for User Management. c.SwaggerDoc(\"UserManagement\", new OpenApiInfo { Title = \"User Management\", Version = \"v1\" }); // swagger documentaion group for your system. c.SwaggerDoc(\"WebAPI\", new OpenApiInfo { Title = \"Web API\", Version = \"v1\" }); c.TagActionsBy(api => { if (api.GroupName != null) { return new[] { api.GroupName }; } var controllerActionDescriptor = api.ActionDescriptor as ControllerActionDescriptor; if (controllerActionDescriptor != null) { return new[] { controllerActionDescriptor.ControllerName }; } throw new InvalidOperationException(\"Unable to determine tag for endpoint.\"); }); c.DocInclusionPredicate((name, api) => { if (name == \"UserManagement\") return api.GroupName != null && api.GroupName.StartsWith(\"UserManagement\"); else return api.GroupName == null; }); var xmlFile = $\"DNVGL.Authorization.UserManagement.ApiControllers.xml\"; var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile); if (File.Exists(xmlPath)) c.IncludeXmlComments(xmlPath); }); //... } //... public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //... app.UseSwagger(); app.UseSwaggerUI(c => { c.SwaggerEndpoint(\"/swagger/UserManagement/swagger.json\", \"User Management API v1\"); c.SwaggerEndpoint(\"/swagger/WebAPI/swagger.json\", \"Web API v1\"); }); //... } } 5. Explore user management APIs Build and Run your project. Open swagger in Browser 6. Define permissions Define permissions by implementing interface - IPermissionMatrix. The following code defined two permissions. public class PermissionBook : IPermissionMatrix { public enum WeatherPermission { //... [PermissionValue(id: \"8\", key: \"ReadWeather\", name: \"Read Weather\", group: \"Weather\", description: \"ReadWeather\")] ReadWeather, [PermissionValue(id: \"8\", key: \"WriteWeather\", name: \"Write Weather\", group: \"Weather\", description: \"WriteWeather\")] WriteWeather, //... other permissions } } 7. Authorize API with permissions Decorates API actions with permission. [HttpGet] [PermissionAuthorize(WeatherPermission.ReadWeather)] public IEnumerable<WeatherForecast> Get() { //... api logic } Recommended content Read First ✓ ✓ ✓ Something you need to know before using the package to handle user management and authorization. Integration with ASP.NET Core's Role-based authorization ✓ Integrate user management module with Role-based authorization in ASP.NET Core. In this way, you are allowed to authorize API with asp.net core's [Authorize(Roles = \"****\")]. Guidance for different databases Use Azure CosmosDB as database Use SQL Server as database User other databases. The package can use all database engines supported by EF Core 5.0+. Here is a list - EF Core 5.0 Database providers Guidance for configuration User Management Configuration Guidance for customization Extend Data model - Company, Role, User Replace EF Core with your own data access Guidance for access control ✓ Resource access control guide you to control access on resource of company. Guidance for defining premissions outside souce code Define permissions in json, database or other places"
  },
  "articles/userManagement/accessControl.html": {
    "href": "articles/userManagement/accessControl.html",
    "title": "Resource Access Control",
    "keywords": "Resource Access Control In this section, you learn how to control access on resource of a company. It is useful in user management modes Company_CompanyRole_User and Company_GlobalRole_User. Prerequisites✓ First of all, Specify a way to get company identity. there are three different ways to do that. 1. Put companyId in API route, or as query parameter. companyId is case senstive here. // From Route [Route(\"api/company/{companyId}/users\")] public async Task<UserViewModel> GetUsers([FromRoute] string companyId) { //... logic } // Or from query [Route(\"api/company/users\")] public async Task<UserViewModel> GetUsers([FromQuery] string companyId) { //... logic } 2. Put custom variable name of company id in API route, or as query parameter. For example, Replace companyId with companyKey. // From Route [CompanyIdentityFieldNameFilter(companyIdInRoute: \"companyKey\")] [Route(\"api/company/{companyKey}/users\")] public async Task<UserViewModel> GetUsers([FromRoute] string companyKey) { //... logic } // Or from query [CompanyIdentityFieldNameFilter(companyIdInQuery: \"companyKey\")] [Route(\"api/company/users\")] public async Task<UserViewModel> GetUsers([FromQuery] string companyKey) { //... logic } 3. Put a global function to get company identity from httpcontext public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagement( //... PermissionOptions = new PermissionOptions() { //... GetCompanyIdentity = (httpContext) =>{ ///... customized logic } } //... } } Limit access to company users If the company resouce is only accessible to users of that company. Put AccessibleCompanyFilterAttribute on you API endpoint. [AccessibleCompanyFilter] public async Task<IEnumerable<UserViewModel>> GetUsers([FromRoute] string companyId) { //... } Open access to user who have permission to view all companys' resource. Like super admin, you can open access to those users if required. Put AccessCrossCompanyPermissionFilterAttribute on API and assign permsission need to check. For below case, any user who has ViewCompany permission can get users of every company. [AccessCrossCompanyPermissionFilter(Premissions.ViewCompany)] [AccessibleCompanyFilter] public async Task<IEnumerable<UserViewModel>> GetUsers([FromRoute] string companyId) { //... }"
  },
  "articles/userManagement/authorize.html": {
    "href": "articles/userManagement/authorize.html",
    "title": "Integration with Role-based authorization in ASP.NET Core",
    "keywords": "Integration with Role-based authorization in ASP.NET Core In this section, you learn how to use Role-based authorization in an ASP.NET core project. First of all, It's required to have a basic understanding of Role-based authorization in ASP.NET Core. Configuration to enable Role-based authorization. public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddAuthentication().AddCookie(o => o.Events.AddCookieValidateHandler()); //... } public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //... //Put UseRouting before UseAuthentication and UseAuthorization app.UseRouting(); app.UseAuthentication(); app.UseAuthorization(); //... } } Configuration to enable Role-based authorization if DNVGL.OAuth.Web is used in authentication. public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddOidc(o => { //.... }, cookieOption => cookieOption.Events.AddCookieValidateHandler()); //... } public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //... //Put UseRouting before UseAuthentication and UseAuthorization app.UseRouting(); app.UseAuthentication(); app.UseAuthorization(); //... } } Then AuthorizeAttribute can be used to decorate an API to perfrom authorization. [HttpGet] [Authorize(Roles = \"ReadWeather\")] public IEnumerable<WeatherForecast> Get() { //... api logic } Alternatively, PermissionAuthorizeAttribute is still working. [HttpGet] [PermissionAuthorize(WeatherPermission.ReadWeather)] public IEnumerable<WeatherForecast> Get() { //... api logic }"
  },
  "articles/userManagement/configuration.html": {
    "href": "articles/userManagement/configuration.html",
    "title": "User Management Configuration",
    "keywords": "User Management Configuration Config Database Use Azure CosmosDB as database Use Azure SQL Server as database User other databases. The package can use all database engines supported by EF Core 5.0+. Here is a list - EF Core 5.0 Database providers User Management Configuration Config unauthorized behavior The package provides the following two built-in methodologies to handle unauthorized access. | Name | Description| |--|--| | Return403ForbiddenCode | It will send 403 reponse to the client directly. It is default hehavior| | ThrowExceptionDirectly | It will throw UnauthorizedAccessException directly. Then developer should capture this exception and handle properly. | Change the default heavior to throw a exception directly. public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagement( //... PermissionOptions = new PermissionOptions() { //... HandleUnauthorizedAccess = BuiltinUnauthorizedAccessHandler.ThrowExceptionDirectly }) //... } } Customize unauthorized behavior public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagement( //... PermissionOptions = new PermissionOptions() { //... HandleUnauthorizedAccess = (httpContext, missedPermission) =>{ ///... customized logic } } //... } } Config logic to get user id in Identity Provider By default, The pacakge reads user id from the Claim which type is userId. It is feasible in case Veracity Identity Provider (Azure AD B2C). Setup your own logic if required. public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagement( //... PermissionOptions = new PermissionOptions() { //... GetUserIdentity = (User) => User.Claims.FirstOrDefault(t => t.Type == \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\")?.Value } //... } }"
  },
  "articles/userManagement/cosmos.html": {
    "href": "articles/userManagement/cosmos.html",
    "title": "Use Azure CosmosDB as database",
    "keywords": "Use Azure CosmosDB as database Prerequisites Azure CosmosDB instance is created. The following instruction assumes there is a collection named User exists in database named UserManagement. PM> Install-Package Microsoft.EntityFrameworkCore.Cosmos Register user management module in ASP.NET core project public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagement().UseEFCore( new EFCoreOptions { DbContextOptionsBuilder = options => options.UseCosmos(\"***Connection string***\", \"UserManagement\"), ModelBuilder = (modelBuilder) => modelBuilder.HasDefaultContainer(\"User\"), }); //... } } Create a super admin in database. The following is a user record template. Replace \"***\" with the real value. Id is the primary key and unique. Create a container with the partition key set to \"__partitionKey\" in Azure Cosmos DB. NOTE: Discriminator and id are two field managed by EF Core. id is a string in the format of [Discriminator]|[Id]. For user record, Discriminator is a constant - \"User\". { \"Id\": \"u1\", \"Active\": true, \"CreatedBy\": \"***\", \"CreatedOnUtc\": \"***\", \"Deleted\": false, \"Description\": \"***\", \"Discriminator\": \"User\", \"Email\": \"***\", \"FirstName\": \"***\", \"LastName\": \"***\", \"SuperAdmin\": true, \"UpdatedBy\": \"***\", \"UpdatedOnUtc\": \"***\", \"VeracityId\": \"***\", \"id\": \"User|u1\" }"
  },
  "articles/userManagement/customModel.html": {
    "href": "articles/userManagement/customModel.html",
    "title": "Customize Data Model",
    "keywords": "Customize Data Model In this section, you learn how to extend data model of Company, Role and User with extra fields to support a project's need. Prerequisites PM> Install-Package DNVGL.Authorization.UserManagement.Abstraction Extend data models by inheriting from built-in data models public class MyCompany:Company { public string ExtraCompanyProperty { get; set; } } public class MyRole : Role { public string ExtraRoleProperty { get; set; } } public class MyUser : User { public string ExtraUserProperty { get; set; } } Register your data models Only User model is customized public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagementWithCustomModel<MyUser>().UseEFCore<MyUser>(new EFCoreOptions { DbContextOptionsBuilder = options => options.UseSqlServer(@\"Data Source=.\\SQLEXPRESS;Initial Catalog=UserManagement;Trusted_Connection=Yes;\") }); //... } } Both Company and User model are customized public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagementWithCustomModel<MyCompany, MyUser>().UseEFCore<MyCompany, MyUser>(new EFCoreOptions { DbContextOptionsBuilder = options => options.UseSqlServer(@\"Data Source=.\\SQLEXPRESS;Initial Catalog=UserManagement;Trusted_Connection=Yes;\") }); //... } } All Company, Role and User model are customized public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagementWithCustomModel<MyCompany, MyRole, MyUser>().UseEFCore<MyCompany, MyRole, MyUser>(new EFCoreOptions { DbContextOptionsBuilder = options => options.UseSqlServer(@\"Data Source=.\\SQLEXPRESS;Initial Catalog=UserManagement;Trusted_Connection=Yes;\") }); //... } } API for custom model POST and PUT api endpoints are different between built-in model and custom model. The following the API for custom model. Path HTTP Action /api/companies/custommodel POST /api/companies/custommodel/{id} PUT /api/company/{companyId}/roles/custommodel POST /api/company/{companyId}/roles/custommodel/{id} PUT /api/company/{companyId}/users/custommodel POST /api/company/{companyId}/users/custommodel/{id} PUT /api/admin/users/custommodel POST /api/admin/users/custommodel/{id} PUT"
  },
  "articles/userManagement/dataAccess.html": {
    "href": "articles/userManagement/dataAccess.html",
    "title": "Customize Data Access Implementation",
    "keywords": "Customize Data Access Implementation In this section, you learn how to replace built-in EFCore implementation with your own data access implementation. Prerequisites PM> Install-Package DNVGL.Authorization.UserManagement.Abstraction PM> Install-Package DNVGL.Authorization.Web Implement interfaces The following four interfaces needs to be implemented. public class YouOwnCompanyRepository: ICompany<Company> { //... } public class YouOwnRoleRepository: IRole<Role> { //... } public class YouOwnUserRepository: IUser<User> { //... } public class YouOwnUserPermissionReader : IUserPermissionReader { //... } Register interface implementation public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagement(); services.AddScoped<IUserPermissionReader, YouOwnUserPermissionReader>() .AddScoped<IRole<Role>, YouOwnRoleRepository>() .AddScoped<IUser<User>, YouOwnUserRepository>() .AddScoped<ICompany<Company>, YouOwnCompanyRepository>(); //... } }"
  },
  "articles/userManagement/dataModel.html": {
    "href": "articles/userManagement/dataModel.html",
    "title": "Data Model",
    "keywords": "Data Model In this section, you learn the built-in data model in User Management Package. These model is defined in package - DNVGL.Authorization.UserManagement.Abstraction. You are allowed to extend data models with extra fields. Extend Data model - Company, Role, User Company Field Type Description Id string The primary key of the company Name string Description string ServiceId string It is the veracity service id. DomainUrl string It is domain url like dnv.com. or the secondary directory in url like oilgas in dnv.com/oilgas/phonebook. Permissions string Permissions are combined as a string which use semicolon(;) as a delimiter. Active bool Deleted bool true if the company is soft deleted, otherwise false. CreatedBy string CreatedOnUtc DateTime UpdatedBy string UpdatedOnUtc DateTime Role Field Type Description Id string The primary key of the role Name string Description string Active bool Deleted bool true if the role is soft deleted, otherwise false. Permissions string Permissions are combined as a string which use semicolon(;) as a delimiter. CompanyId string The id of the company to which this role belongs. It is null if it is a global role. CreatedBy string CreatedOnUtc DateTime UpdatedBy string UpdatedOnUtc DateTime User Field Type Description Id string The primary key of the user Email string FirstName string LastName string VeracityId string It is an id provided by identity provider. Description string RoleIds string Role's ids are combined as a string which use semicolon(;) as a delimiter. CompanyIds string Company's ids are combined as a string which use semicolon(;) as a delimiter. Active bool SuperAdmin bool true if the user is a super admin, otherwise false. Deleted bool true if the user is soft deleted, otherwise false. CreatedBy string CreatedOnUtc DateTime UpdatedBy string UpdatedOnUtc DateTime"
  },
  "articles/userManagement/overview.html": {
    "href": "articles/userManagement/overview.html",
    "title": "Overview",
    "keywords": "Overview In this section, you learn the different modes of user management, permission setup, package limitations, and decide the adoption of the package. 1. Three user management modes one user is allowed to be assigned to mutiple companies. Company_CompanyRole_User is the default mode. Mode Company Role User Company_CompanyRole_User ✓ ✓ Role is defined at company level. ✓ Company_GlobalRole_User ✓ ✓ Role is defined at global level. ✓ Role_User ☒ ✓ ✓ Change default user management mode API endpoint and schema has slight difference on different modes. public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagement( new UserManagementOptions { //... Mode = UserManagementMode.Role_User }); //... } } 2. Permission setup Build-in Permissions The following are serveral built-in permissions used to authorize user management apis. | Permission | Description | |--|--| | Premissions.ManageUser | permission to make change on user. | | Premissions.ViewUser | permission to read user. | | Premissions.ManageRole | permission to make change on role. | | Premissions.ViewRole | permission to read role. | | Premissions.ManageCompany | permission to make change on company. | | Premissions.ViewCompany | permission to read company. | Create your own premissions Define permissions by implementing interface - IPermissionMatrix. The following code defined two permissions. You are also allowed to manage permissions outside of the source code. Here is the instruction. public class PermissionBook : IPermissionMatrix { public enum WeatherPermission { //... [PermissionValue(id: \"8\", key: \"ReadWeather\", name: \"Read Weather\", group: \"Weather\", description: \"ReadWeather\")] ReadWeather, [PermissionValue(id: \"9\", key: \"WriteWeather\", name: \"Write Weather\", group: \"Weather\", description: \"WriteWeather\")] WriteWeather, //... other permissions } } Authorize API with permissions Decorates API actions with permission. You are also allowed to use Role-based authorization like [Authorize(Roles = \"****\")]. Here is the instruction. [HttpGet] [PermissionAuthorize(WeatherPermission.ReadWeather)] public IEnumerable<WeatherForecast> Get() { //... api logic } 3. Data Model The predefeind data models of Company, Role and User may not fully meet your needs. Please check the built-in model definition, and follow this instruction to extend the data model. 4. Company/ Role/ User deletion By default, the soft deletion is enabled. Change the default behavior to hard delete record. public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagement().UseEFCore(new EFCoreOptions { DbContextOptionsBuilder = options => options.UseSqlServer(@\"Data Source=.\\SQLEXPRESS;Initial Catalog=UserManagement;Trusted_Connection=Yes;\"), HardDelete = true }); //... } } 5. Data Access Implementation We provide data access implementation in package - DNVGL.Authorization.UserManagement.EFCore. It has dependency on EF Core 5.0+. If you don't want to introduce EF Core in your project. then this package is not required to be installed. Here is an instruction to Replace EF Core with your own data access 6. Performance ✓ By default, The package reads and check user's permission from database for every http request. You can change this behavior to load user's permission in to claim (in cookie), and then read, check user's premission from claim. The following is to setup such behavior. public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddAuthentication().AddCookie(o => o.Events.AddCookieValidateHandler(services)); //... } } 7. Swagger UI By default, Swagger UI probably do not show User Management APIs. Then you could follow the instructuon to get it displayed."
  },
  "articles/userManagement/permissionStore.html": {
    "href": "articles/userManagement/permissionStore.html",
    "title": "Configure Permission definition out of source code.",
    "keywords": "Configure Permission definition out of source code. In this section, you learn how to configure permissions out of source code. Permission data is allowed to be stored in different forms like Json file, xml file or in database. Prerequisites PM> Install-Package DNVGL.Authorization.Web Implement interface IPermissionRepository Interface IPermissionRepository is required to be implemented to load meta data of all permssions. public class OwnPermissionRepository : IPermissionRepository { public async Task<IEnumerable<PermissionEntity>> GetAll() { //... logic } } PermissionEntity Definition Field Type Description Id string The primary key of a permission Key string A readable unique key of a permission Name string Permission name Description string Permission description Group string Permission group Create mandatory permissions Key ManageUser ViewUser ViewRole ManageRole ViewCompany ManageCompany Register IPermissionRepository service public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagement().UseEFCore(new EFCoreOptions { DbContextOptionsBuilder = options => options.UseSqlServer(@\"Data Source=.\\SQLEXPRESS;Initial Catalog=UserManagement;Trusted_Connection=Yes;\") }).UsePermissionRepository<OwnPermissionRepository>(); //... } }"
  },
  "articles/userManagement/sqlserver.html": {
    "href": "articles/userManagement/sqlserver.html",
    "title": "Use SQL Server as database",
    "keywords": "Use SQL Server as database Prerequisites PM> Install-Package Microsoft.EntityFrameworkCore.SqlServer Register user management module in ASP.NET core project public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagement().UseEFCore( new UserManagementOptions { DbContextOptionsBuilder = options => options.UseSqlServer(@\"Data Source=.\\SQLEXPRESS;Initial Catalog=UserManagement;Trusted_Connection=Yes;\") }); //... } } 2. Create tables in database Find and execute NewTableScript.sql which is located at the Content directory once you imported the package in your project. 3. Create a super admin in Table - Users. The following is sample. | Id | Email | FirstName | LastName | VeracityId | SuperAdmin | Active | Deleted | |--|--|--|--|--|--|--|--| | 1 | email | first name | last name | veracity id | 1 | 1 | 0"
  },
  "articles/userManagement/swagger.html": {
    "href": "articles/userManagement/swagger.html",
    "title": "APIs documentation with Swagger",
    "keywords": "APIs documentation with Swagger In this section, you learn how to expose User Management APIs documentaion in Swagger UI. By default, they are probably not shown in Swagger UI. Then you could follow below instructuon to get it displayed on Swagger UI. Prerequisites PM> Swashbuckle.AspNetCore Configure swagger in Startup.cs It will serperate User Management APIs from your project APIs. public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddControllers(); services.AddSwaggerGen(c => { // swagger documentaion group for User Management. c.SwaggerDoc(\"UserManagement\", new OpenApiInfo { Title = \"User Management\", Version = \"v1\" }); // swagger documentaion group for your system. c.SwaggerDoc(\"WebAPI\", new OpenApiInfo { Title = \"Web API\", Version = \"v1\" }); c.TagActionsBy(api => { if (api.GroupName != null) { return new[] { api.GroupName }; } var controllerActionDescriptor = api.ActionDescriptor as ControllerActionDescriptor; if (controllerActionDescriptor != null) { return new[] { controllerActionDescriptor.ControllerName }; } throw new InvalidOperationException(\"Unable to determine tag for endpoint.\"); }); c.DocInclusionPredicate((name, api) => { if (name == \"UserManagement\") return api.GroupName != null && api.GroupName.StartsWith(\"UserManagement\"); else return api.GroupName == null; }); var xmlFile = $\"DNVGL.Authorization.UserManagement.ApiControllers.xml\"; var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile); if (File.Exists(xmlPath)) c.IncludeXmlComments(xmlPath); }); //... } //... public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //... app.UseSwagger(); app.UseSwaggerUI(c => { c.SwaggerEndpoint(\"/swagger/UserManagement/swagger.json\", \"User Management API v1\"); c.SwaggerEndpoint(\"/swagger/WebAPI/swagger.json\", \"Web API v1\"); }); //... } } Copy document to output (optional) It is an optionanl step. With this step, more infomation will shown on the Swagger UI. otherwise, only API endpoints are displayed on Swagger UI. Open swagger in Browser By default, the link to open swagger is the [HOST]/swagger. Then choose User Management API from definition drowdown list."
  },
  "index.html": {
    "href": "index.html",
    "title": "Solution Package",
    "keywords": "Solution Package A collection of packages and tools for developers to support rapid, robust and extensible development of applications and services within DNV. Some of the supported features include: Authentication OpenId connection authentication OAuth HTTP client factory Security Security headers User management Secrets manager Integration Veracity - My Services API v3 clients Context Context.ServiceBus Context.AspNet Context.HttpClient Getting started Installing packages"
  }
}