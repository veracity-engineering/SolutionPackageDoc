{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Api Reference Page",
    "keywords": "Api Reference Page"
  },
  "articles/DNV.SecretsManager.html": {
    "href": "articles/DNV.SecretsManager.html",
    "title": "Secrets Manager",
    "keywords": "Secrets Manager The DNV.SecretsManager package is a command line tool for managing secrets from the Azure KeyVault or Azure DevOps Variable Groups. This tool allows secrets to be downloaded and uploaded as structured JSON files, meaning secrets may be uploaded in structured collections where previously they might have been maintained individually. What it does Given a large collection of key vault secrets in an Azure Key vault such as those shown below: The secrets manager tool could be executed with a command: secretsmanager keyvault -d -s <keyvault-url> -f output-file.json The resulting output-file.json would look like: { \"Account\": { \"BaseUrl\": <secret value> }, \"Company\": { \"ApiKey\": <secret value>, \"Authority\": <secret value>, \"BaseUrl\": <secret value>, \"ClientId\": <secret value>, \"ClientSecret\": <secret value>, \"Resource\": <secret value> }, \"Customer\": { \"ApiKey\": <secret value>, \"Authority\": <secret value>, \"BaseUrl\": <secret value>, \"ClientId\": <secret value>, \"ClientSecret\": <secret value>, \"IsApiKeyOnly\": <secret value>, \"Resource\": <secret value> }, \"Emailer\": { \"BaseUri\": <secret value>, \"FunctionKey\": <secret value> ... Conversely, an input json file (input-file.json) could be uploaded to an Azure Key vault by executing a command: secretsmanager keyvault -u -s <keyvault-url> -f input-file.json Hierachy The secrets manager assumes a convention where the parent-child relationship between entities in a hierarchy are expressed with a -- delimeter. In practice this means: to express that Company is the parent of ApiKey a key would be named Company--ApiKey, if there exists multiple children to a parent they would be aggregated in to a single parent as may be seen in the result above with keys: Company--ApiKey, Company--Authority and Company--BaseUrl etc. Parent-child relationships may extend to far greater depth than the example given. Arrays It is also possible to include arrays of data in your configuration. To express a collection of values in an array the indexes should be included explicity declared in place of the child name. For example, an array may be expressed with a collection of the following keys: Names--0, Names--1, Names--2 which would result in the following JSON: { \"Names\": [ <secret value>, <secret-value>, <secret-value> ] } Useage secretsmanager <command> [<args>] Commands: keyvault Download or upload secrets from/to Azure Keyvault variablegroup Download or upload secrets from/to Azure Keyvault Key vault command secretsmanager keyvault [-h | --help] -d | --download -u | --upload | -c | --clear -s | --url <url> -f | --filename <filename> Options -h | --help Prints the synopsis of commands and options available. -d | --download Requests the secrets to be downloaded from the specified source to a JSON file. -u | --upload Requests that a provided JSON file be uploaded to a specified source. -c | --clear Deletes all secrets from the specified source. -s | --url <url> Provide the URL to the keyvault. -f | --filename <filename> Specify the file to which you would like to download to or upload from. Variable group command secretsmanager variablegroup [-h | --help] -d | --download -u | --upload | -c | --clear -s | --base-url <base-url> -o | --organization <organization> -p | --pat <pat> -g | --group-id <group-id> -f | --filename <filename> Options -h | --help Prints the synopsis of commands and options available. -d | --download Requests the secrets to be downloaded from the specified source to a JSON file. -u | --upload Requests that a provided JSON file be uploaded to a specified source. -c | --clear Deletes all secrets from the specified source. -s | --base-url <base-url> Provide the base URL to the Azure DevOps. -o | --organization <organization> Provide the organization under Azure DevOps to which a variable group belongs. -p | --pat <pat> Specify the Person Access Token for authentication. -g | --group-id <group-id> Specify the id of the variable group you would like to download from or upload to. -f | --filename <filename> Specify the file to which you would like to download to or upload from."
  },
  "articles/DNVGL.OAuth.Api.HttpClient.html": {
    "href": "articles/DNVGL.OAuth.Api.HttpClient.html",
    "title": "OAuth HTTP Client Factory",
    "keywords": "OAuth HTTP Client Factory The DNVGL.OAuth.Api.HttpClient package is a .NET library which provides a factory for producing authenticated HttpClients for API integration via OAuth. Developers can use this library to create HttpClient instances which will be pre-authenticated for API requests based on provided configuration. This package supports two type of credential authentication: User credentials - A user may authenticate by providing a username and password via a UI. Client credentials - A service or application may provide a client id and secret to silently authenticate. Package Install Ensure you have configured to package NuGet Package Source or find the instructions here. Package Manager Console PM> `Install-Package DNVGL.OAuth.Api.HttpClient` Basic example 1. Configuration Setup API http client configuration in appsettings.json file: { \"ApiHttpClientOptions\": [ { \"Name\": \"userCredentialsClient\", \"Flow\": \"user-credentials\", \"BaseUri\": \"<BaseUri>\", \"SubscriptionKey\": \"<SubscriptionKey>\" }, { \"Name\": \"clientCredentialsClient\", \"Flow\":\"client-credentials\", \"BaseUri\": \"<BaseUri>\", \"SubscriptionKey\": \"<SubscriptionKey>\" \"OAuthClientOptions\": { \"Authority\": \"<Authority>\", \"ClientId\": \"<ClientId>\", \"ClientSecret\": \"<ClientSecret>\", \"Resource\": \"<Resource>\", \"Scopes\": [ \"<Scope>\", \"offline_access\" ], \"CallbackPath\": \"<CallbackPath>\" } } ] } The package injects an IHttpClientFactory which is able to provide multiple HttpClients for different purposes. The HttpClients may all be configured through a configuration section in which the individual client configurations are listed with a unique Name which is used to request HttpClients with the corresponding configurations. The configuration shown above lists 2 HttpClients. The first with name \"userCredentialsClient\" is an example of a configuration which would honour the signed in user's credentials for the API for which it makes requests. The second with name \"clientCredentialsClient\" provides configuration for a client which would be authenticated via the client credential flow with a client id and secret to make requests in an API. This configuration would allow us to request either type of HttpClient by requesting it from from the HttpClientFactory by providing one of the two names: \"userCredentialsClient\" or \"clientCredentialsClient\" in the method call to the HttpClientFactory. 2. Registration Call the ServiceCollection extension method AddOAuthHttpClientFactory to register an instance of the IHttpClientFactory in to your project in your Startup.cs file. The below code is retrieving the configuration from the \"OAuthHttpClientOptions\" section defined in apsettings.json above. public void ConfigureService(IServiceCollection services) { ... services.AddOAuthHttpClientFactory(Congiuration.GetSection(\"ApiHttpClientOptions\").Get<IEnumerable<OAuthHttpClientOptions>>()); ... } If you require a HttpClient applying the user credential flow you should also include the web authentication (AddOidc) and token cache handling (AddDistributedMemoryCache) from the DNVGL.OAuth.Web package. Include the NuGet package in your project and call the required methods as below: public void ConfigureService(IServiceCollection services) { ... services.AddDistributedMemoryCache(); ... var oidcOptions = new OidcOptions { Authority = \"<Authority>\", ClientId = \"<ClientId>\", ClientSecret = \"<ClientSecret>\", Resource = \"<Resource>\", Scopes = new[] { \"<Scope>\", \"offline_access\" }, ResponseType = OpenIdConnectResponseType.Code }; services.AddOidc(oidcOptions); ... services.AddOAuthHttpClientFactory(Congiuration.GetSection(\"ApiHttpClientOptions\").Get<IEnumerable<OAuthHttpClientOptions>>()); ... } If you only require HttpClients applying the client credential flow the DNVGL.OAuth.Web package is not required. 3. Request a client Resolve IHttpClientFactory to create user-credential or client-credential HttpClient to access web API. public class TestController { private readonly IHttpClientFactory _httpClientFactory; public TestController(IHttpClientFactory httpClientFactory) { _httpClientFactory = httpClientFactory; } public User DoSomethingWithSignInUser(string id) { var client = _httpClientFactory.Create(\"userCredentialsClient\"); ... } public Company DoSomethingWithService(string id) { var client = _httpClientFactory.Create(\"clientCredentialsClient\"); ... } }"
  },
  "articles/DNVGL.OAuth.Web.html": {
    "href": "articles/DNVGL.OAuth.Web.html",
    "title": "Get started with DNVGL.OAuth.Web",
    "keywords": "Get started with DNVGL.OAuth.Web DNVGL.OAuth.Web is a .NETCore library for developers to simplify the work of setting up OpenId Connection authentication (OIDC) such as Veracity or Azure AD B2C for ASP.NET Core web project. Package Install Ensure you have configured to package NuGet Package Source or find the instructions here. Package Manager Console PM> `Install-Package DNVGL.OAuth.Web` Basic Authentication Usage To simplify your authentication implementation of Veracity for your ASP.NET Core web project, you need to add 3 blocks of codes to Startup.cs. Add namespace reference. using DNVGL.OAuth.Web; Add AddOidc extension method to ConfigureServices. public void ConfigureServices(IServiceCollection services) { ... services.AddOidc(o => { o.Authority = \"<Authority>\"; o.ClientId = \"<ClientId>\"; o.ClientSecret = \"<ClientSecret>\"; o.Resource = \"<Resource>\"; o.Scopes = new[] { \"<Scope>\" }; }); ... } Add UseAuthentication and UseAuthorization extension methods to Configure. public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { ... app.UseAuthentication().UseAuthorization(); ... } Then you could launch your project and access an action in a controller that decorated with [Authorize], a challenge request will be sent to IDP(Microsoft or Veracity) to start the authentication process, and the HttpContext will be filled with authentication result. A sample project is ready for you to try out: SimpleOidc. Access Token Cache Usage If you web project act as an API gateway, you will want to cache users' access tokens to prevent unnecessary token requests. The library uses MSAL (Microsoft Authentication Library) to manipulate tokens. Authorization code flow needs to be set to acquire access token, and refresh token is required for MSAL to re-acquire token from IDP if the token exceed its expiration. public void ConfigureServices(IServiceCollection services) { ... var oidcOptions = new OidcOptions { Authority = \"<Authority>\", ClientId = \"<ClientId>\", ClientSecret = \"<ClientSecret>\", Resource = \"<Resource>\", Scopes = new[] { \"<Scope>\", \"offline_access\" }, // offline_access is required to retrieve refresh_token. ResponseType = OpenIdConnectResponseType.Code }; ... } To cache the tokens, an implementaion of IDistributedCache such as MemoryDistributedCache needs to be added. public void ConfigureServices(IServiceCollection services) { ... services.AddDistributedMemoryCache(); ... } You can also add RedisCache instead. public void ConfigureServices(IServiceCollection services) { ... services.AddDistributedRedisCache(o => { o.InstanceName = \"<InstanceName>\"; o.Configuration = \"<Configuration>\"; }); ... } Calling AddDistributedTokenCache will have IDistributedCache attached to MSAL client app behind the scene, and the token acquiring process will be replaced by MSAL client app. public void ConfigureServices(IServiceCollection services) { ... services.AddDistributedTokenCache(oidcOptions); ... } Don't forget to add AddOidc after what you did previously. public void ConfigureServices(IServiceCollection services) { ... services.AddOidc(oidcOptions); ... } A sample project is ready for you to try out: TokenCacheDemo."
  },
  "articles/DNVGL.Veracity.Services.Api.html": {
    "href": "articles/DNVGL.Veracity.Services.Api.html",
    "title": "Veracity - My Services API v3 Clients",
    "keywords": "Veracity - My Services API v3 Clients Packages from the DNVGL.Veracity.Services.Api namespace provide lightweight .NET clients for Veracity My Services API v3 built on top of packages from the Solution Package. These packages allow developers to query and manipulate data from My services including user profiles, service profiles, notification messages, company profiles, admin roles and subscriptions. View Points As a client to API v3, the package is divided in to the following view points: | Name | Description | Supported authentication | |--|--|--| | Directory | Allows fetching and updating resources without a focus on a specifc user or service resource. Recommended for core platform applications. | Client credentials | | My | Allows fetching information and making requests for a user authenticated by user credential flow. | User credentials | | This | Allows manipulation and retrieval of information related to a service where an application is authenticated as a service owner. | Client credentials |"
  },
  "articles/DNVGL.Veracity.Services.Api/DNVGL.Veracity.Services.Api.Directory.html": {
    "href": "articles/DNVGL.Veracity.Services.Api/DNVGL.Veracity.Services.Api.Directory.html",
    "title": "Veracity - My Services API v3 - Directory Client",
    "keywords": "Veracity - My Services API v3 - Directory Client The DNVGL.Veracity.Services.Api.Directory package provides a client to resources available under the 'Directory' view point of API v3. This view point is appropriate for core Veracity applications where resources are not restricted to any context. Only Client credentials authentication is supported by this package. Package Install Ensure you have configured to package NuGet Package Source or find the instructions here. Package Manager Console PM> `Install-Package DNVGL.Veracity.Services.Api.Directory` Example With the nuget package installed, services for each resource may be individually configured, injected and requested inside your solution. 1. Configuration To configure a resource service, introduce configuration in the form of OAuthHttpClientOptions: appsettings.json The Directory view point only supports Client Credential Flow. { \"OAuthHttpClients\": [ ... { \"Name\": \"company-directory\", \"Flow\": \"ClientCredentials\", \"BaseUri\": <BaseUri>, \"SubscriptionKey\": <SubscriptionKey>, \"OAuthClientOptions\": { \"Authority\": <Authority>, \"ClientId\": <ClientId>, \"ClientSecret\": <ClientSecret>, \"Resource\": <Resource>, \"Scopes\": [ <Scope> ], } } ... ] } 2. Registration Register the service or services using extensions methods available from the DNVGL.Veracity.Services.Api.Directory.Extensions namespace. startup.cs Packages from DNVGL.Veracity.Service.Api are dependent on the DNVGL.OAuth.Api.HttpClient package, therefore the HttpClientFactory should also be injected. public void ConfigureServices(IServiceCollection services) { ... services.AddOAuthHttpClientFactory(Congiuration.GetSection(\"OAuthHttpClients\").Get<IEnumerable<OAuthHttpClientOptions>>()); ... services.AddCompanyDirectory(\"company-directory\") ... } 3. Request service Request the service from the constructor by its interface: TestController.cs public class TestController : Controller { ... private readonly ICompanyDirectory _companyDirectory; ... public TestController(ICompanyDirectory companyDirectory) { ... _companyDirectory = companyDirectory ?? throw new ArgumentNullException(nameof(companyDirectory)); ... } ... public async Task<IActionResult> FetchCompany(string companyId) { return Json(await _companyDirectory.Get(companyId)); } ... } Resources Companies Services Users Companies Registration method Service interface AddCompanyDirectory(string clientConfigurationName) ICompanyDirectory Name Description Get(string companyId) Retrieves an individual company. ListUsers(string companyId, int page, int pageSize) Retrieves a paginated collection of user references of users affiliated with a company. Services Registration method Service interface AddServiceDirectory(string clientConfigurationName) IServiceDirectory Name Description Get(string serviceId) Retrieves an individual service. ListUsers(string serviceId, int page, int pageSize) Retrieves a paginated collection of user references of users subscribed to a service. Users Registration method Service interface AddUserDirectory(string clientConfigurationName) IUserDirectory Name Description Get(string userId) Retrieves an individual user. ListByUserId(params string[] userIds) Retrieves a collection of users where the id is included in the parameters. ListByEmail(string email) Retrieves a collection of user references by a specified email value. ListCompanies(string userId) Retrieves a collection of company references of companies with which a user is affiliated. ListServices(string userId, int page, int pageSize) Retrieves a collection of service references of services to which a user is subscribed. GetSubscription(string userId, string serviceId) Retrieve an individual subscription for a specified user and service."
  },
  "articles/DNVGL.Veracity.Services.Api/DNVGL.Veracity.Services.Api.My.html": {
    "href": "articles/DNVGL.Veracity.Services.Api/DNVGL.Veracity.Services.Api.My.html",
    "title": "Veracity - My Services API v3 - My Client",
    "keywords": "Veracity - My Services API v3 - My Client The DNVGL.Veracity.Services.Api.My package provides a client to resources available under the 'My' view point of API v3. This view point is appropriate if you intend to use Veracity as an identity provider for your application. Resources retrieved from this view point are from the perspective of the authenticated user, Only User credentials authentication is supported by this package. Package Install Ensure you have configured to package NuGet Package Source or find the instructions here. Package Manager Console PM> `Install-Package DNVGL.Veracity.Services.Api.My` Example With the nuget package installed, services for each resource may be individually configured, injected and requested inside your solution. 1. Configuration To configure a resource service, introduce configuration in the form of OAuthHttpClientOptions: appsettings.json The My view point only supports User Credential Flow. { \"OAuthHttpClients\": [ ... { \"Name\": \"my-profile\", \"Flow\": \"UserCredentials\", \"BaseUri\": <BaseUri>, \"SubscriptionKey\": <SubscriptionKey>, \"OAuthClientOptions\": { \"Authority\": <Authority>, \"Scopes\": [ <Scope> ] } } ... ] } 2. Registration Register the service or services using extensions methods available from the DNVGL.Veracity.Services.Api.My.Extensions namespace. startup.cs Packages from DNVGL.Veracity.Service.Api are dependent on the DNVGL.OAuth.Api.HttpClient package, therefore the HttpClientFactory should also be injected. public void ConfigureServices(IServiceCollection services) { ... services.AddOAuthHttpClientFactory(Congiuration.GetSection(\"OAuthHttpClients\").Get<IEnumerable<OAuthHttpClientOptions>>()); ... services.AddMyProfile(\"my-profile\") ... } 3. Request service Request the service from the constructor by its interface: TestController.cs public class TestController : Controller { ... private readonly IMyProfile _myPofile; ... public TestController(IMyProfile myProfile) { ... _myPofile = myProfile ?? throw new ArgumentNullException(nameof(myProfile)); ... } ... public async Task<IActionResult> FetchProfile() { return Json(await _myPofile.Get()); } ... } Resources Companies Messages Policies Profile Services Companies Registration method Service interface AddMyCompanies(string clientConfigurationName) IMyCompanies Name Description List() Retrieves a collection of company references for the authenticated user. Messages Registration method Service interface AddMyMessages(string clientConfigurationName) IMyMessages Name Description List(bool includeRead) Retrieves a collection of messages addressed to the authenticated user. Get(string messageId) Retrieves an individual message addressed to the authenticated user. GetUnreadCount() Retrieves the numeric value indicating how many messages have not been marked as read by the authenticated user. Policies Registration method Service interface AddMyPolicies(string clientConfigurationName) IMyPolicies Name Description ValidatePolicies(string returnUrl) Validates all policies for the authenticated user. ValidatePolicy(string serviceId, string returnUrl, string skipSubscriptionCheck) Validates an individual policy for the authenticated user. Profile Registration method Service interface AddMyProfile(string clientConfigurationName) IMyProfile Name Description Get() Retrieves the user profile for the authenticated user. Services Registration method Service interface AddMyServices(string clientConfigurationName) IMyServices Name Description List() Retrieves a collection of service references for services the authenticated user is subscribed to."
  },
  "articles/DNVGL.Veracity.Services.Api/DNVGL.Veracity.Services.Api.This.html": {
    "href": "articles/DNVGL.Veracity.Services.Api/DNVGL.Veracity.Services.Api.This.html",
    "title": "Veracity - My Services API v3 - This Client",
    "keywords": "Veracity - My Services API v3 - This Client The DNVGL.Veracity.Services.Api.This package provides a client to resources available under the 'This' view point of API v3. This view point is appropriate for service owners integrating with Veracity enabling management of their service and sub-service subscriptions. Resources retrieved from this view point are from the perspective of a service, Only Client credentials authentication is supported by this package. Package Install Ensure you have configured to package NuGet Package Source or find the instructions here. Package Manager Console PM> `Install-Package DNVGL.Veracity.Services.Api.This` Example With the nuget package installed, services for each resource may be individually configured, injected and requested inside your solution. 1. Configuration To configure a resource service, introduce configuration in the form of OAuthHttpClientOptions: appsettings.json The This view point only supports Client Credential Flow. { \"OAuthHttpClients\": [ ... { \"Name\": \"this-subscribers\", \"Flow\": \"ClientCredentials\", \"BaseUri\": <BaseUri>, \"SubscriptionKey\": <SubscriptionKey>, \"OAuthClientOptions\": { \"Authority\": <Authority>, \"ClientId\": <ClientId>, \"ClientSecret\": <ClientSecret>, \"Resource\": <Resource>, \"Scopes\": [ <Scope> ], } } ... ] } 2. Registration Register the service or services using extensions methods available from the DNVGL.Veracity.Services.Api.This.Extensions namespace. startup.cs Packages from DNVGL.Veracity.Service.Api are dependent on the DNVGL.OAuth.Api.HttpClient package, therefore the HttpClientFactory should also be injected. public void ConfigureServices(IServiceCollection services) { ... services.AddOAuthHttpClientFactory(Congiuration.GetSection(\"OAuthHttpClients\").Get<IEnumerable<OAuthHttpClientOptions>>()); ... services.AddThisSubscribers(\"this-subscribers\") ... } 3. Request service Request the service from the constructor by its interface: TestController.cs public class TestController : Controller { ... private readonly IThisSubscribers _thisSubscribers; ... public TestController(IThisSubscribers thisSubscribers) { ... _thisSubscribers = thisSubscribers ?? throw new ArgumentNullException(nameof(thisSubscribers)); ... } ... public async Task<IActionResult> FetchSubscribers(int page, int pageSize) { return Json(await _thisSubscribers.List(page, pageSize)); } ... } Resources Administrators Services Subscribers Users Administrators Registration method Service interface AddThisAdministrators(string clientConfigurationName) IThisAdministrators Name Description Get(string userId) Retrieves an individual administrator for the authenticated service. List(int page, int pageSize) Retrieves a collection of administrator references for the authenticated service. Services Registration method Service interface AddThisServices(string clientConfigurationName) IThisServices Name Description AddSubscription(string serviceId, string userId, SubscriptionOptions options) Add a subscription to the authenticated service or nested services. GetAdministrator(string serviceId, string userId) Retrieve an individual administrator reference to a administrator of the authenticated service or nested services. GetSubscriber(serviceId, tring userId) Retrieve an individual user reference to a user which has a subscription to a specified service. List(int page, int pageSize) Retrieve a collection of services the authenticated service has access to. ListAdministrators(string serviceId, int page int pageSize) Retrieve a collection of administrator references of administrators for a specified service. ListSubscribers(string serviceId, int page, int pageSize) Retrieve a collection of user references of users subscribed to a specified service. NotifySubscribers(string serviceId, NotificationOptions options) Send a notification to users subscribed to the authenticated service or nested service. RemoveSubscription(string servieId, string userId) Remove a user subscription for a user and the authenticated service or a nested service. Subscribers Registration method Service interface AddThisSubscribers(string clientConfigurationName) IThisSubscribers Name Description Add(string userId, SubscriptionOptions options) Add a subscription to the authenticated service for a specified user. Get(string userId) Retrieve a user reference for a user subscribed to the authenticated service. List(int page, int pageSize) Retrieve a collection of user references to users subscribed to the authenticated service. Remove(string userId) Remove a user subscription to the authenticated service by specified user. Users Registration method Service interface AddThisUsers(string clientConfigurationName) IThisUsers Name Description Create(CreateUserOptions options) Create a new user. Create(params CreateUserOptions[] options) Create a collection of new users. Resolve(string email) Retrieves a collection of user references for users with a specified email value."
  },
  "articles/Home.html": {
    "href": "articles/Home.html",
    "title": "Solution Package",
    "keywords": "Solution Package A collection of packages and tools for developers to support rapid, robust and extensible development of applications and services within DNV. Some of the supported features include: Authentication OpenId connection authentication OAuth HTTP client factory Security Security headers User management Secrets manager Integration Veracity - My Services API v3 clients Getting started Installing packages"
  },
  "articles/index.html": {
    "href": "articles/index.html",
    "title": "Tutorials page",
    "keywords": "Tutorials page"
  },
  "articles/PackageInstall.html": {
    "href": "articles/PackageInstall.html",
    "title": "Package Install",
    "keywords": "Package Install To install any package from the Solution Package collection, the package feed should be included in your nuget package sources: This may be added in Visual Studio by navigating to Tools > NuGet Package Manager > Package Manager Settings An Options window will appear, select the Package Sources node on the left hand pane the click the button, provide a Name and enter the Source below: https://dnvgl-one.pkgs.visualstudio.com/_packaging/DNVGL.SolutionPackage/nuget/v3/index.json Click OK to complete. One done it will be possible to add any of the NuGet packages outlined in this documentation to your projects via the Package Manager in visual studio or via the Package Manager Console."
  },
  "articles/securityHeader.html": {
    "href": "articles/securityHeader.html",
    "title": "HTTP Response Security Header",
    "keywords": "HTTP Response Security Header DNVGL.Web.Security provides extension methods to setup http response headers for ASP.NET Core application. Package Install Ensure you have configured to package NuGet Package Source or find the instructions here. Package Manager Console PM> `Install-Package DNVGL.OAuth.Web` 1. Basic Example public class Startup { //... public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //... app.UseDefaultHeaders(); //... } } The package set up below default http response headers. Key Value X-Xss-Protection 1 X-Frame-Options SAMEORIGIN X-Content-Type-Options no-referrer X-Permitted-Cross-Domain-Policies none Expect-CT enforce, max-age=7776000 Strict-Transport-Security max-age=15552000; includeSubDomains If you have setup your own response headers before using the pacakge to setup default headers. You own reponse headers will be kept. The package set up below default csp rule in http response headers. Key Value default-src 'self' object-src 'self' connect-src 'self' https://dc.services.visualstudio.com script-src 'self' https://www.recaptcha.net https://www.gstatic.com https://www.gstatic.cn font-src 'self' data: https://onedesign.azureedge.net https://veracitycdn.azureedge.net media-src 'self' worker-src 'self' blob: img-src 'self' https://onedesign.azureedge.net https://dnvglcom.azureedge.net https://cdnveracity.azureedge.net frame-src 'self' https://www.google.com https://www.recaptcha.net/ style-src 'self' https://onedesign.azureedge.net If you have setup your own CSP before using the pacakge to setup default headers. You own CSP will be kept. 2. Customize Response Header The pacakge supports to overwrite the above default setting. This is a code sample to overwrite X-Frame-Options: public class Startup { //... public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //... app.UseDefaultHeaders(h=> h.Add(\"X-Frame-Options\", \"DENNY\")); //... } } 3. Customize CSP in Response Header The pacakge supports to overwrite the above default setting. This is a code sample to overwrite styleSrc: public class Startup { //... public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //... app.UseDefaultHeaders(h=> h.ReplaceDefaultContentSecurityPolicy(styleSrc: \"'self' 'nonce-123456789909876543ghjklkjvcvbnm'\");); //... } } Or extend the above default setting. This is a code sample to extend styleSrc: public class Startup { //... public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //... app.UseDefaultHeaders(h=> h.ExtendDefaultContentSecurityPolicy(styleSrc: \"'nonce-123456789909876543ghjklkjvcvbnm'\");); //... } } 4. Skip CSP in Response Header for specific requests. By default, The package doesn't add csp into respsone for all http requests which url contain '/swagger/'. It supports to overwrite the default skip logic. This is a code sample to skip all request which url contains '/nocsprequired/'. public class Startup { //... public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //... app.UseDefaultHeaders(h=> h.SkipContentSecurityPolicyForRequests((req) => req.Path.ToString().ToLowerInvariant().Contains(\"/nocsprequired/\"))); //... } } 5. Permissions Policy Permissions Policy HTTP Header can be provided by your web server / web application in order to improve the security of your visitors and the data they may be accessing on your site. Standardized Features Feature Name Description accelerometer The Accelerometer interface of the Sensor APIs provides on each reading the acceleration applied to the device along all three axes. ambient-light-sensor The AmbientLightSensor interface of the Sensor APIs returns the current light level or illuminance of the ambient light around the hosting device. autoplay Controls the ability to have Media (Audio or Video) elements begin playback without user interaction in the current document. When this policy is disabled and there were no user gestures, the Promise returned by HTMLMediaElement.play() will reject with a DOMException. The autoplay attribute on <audio> and <video> elements will be ignored. battery The Battery Status API can be used to defer or scale back work when the device is not charging in or is low on battery. camera Manages access to Camera interfaces (physical and virtual). cross-origin-isolated Cross-origin isolation enables a web page to use powerful features such as SharedArrayBuffer, performance.measureUserAgentSpecificMemory(), high resolution timer with better precision, or the JS Self-Profiling API. This also impacts the \"document-domain\" permission when set (see below). display-capture A document's permissions policy determines whether any content in that document is allowed to use getDisplayMedia. document-domain Provides access to the deprecated \"document.domain[=domain]\" setter. When the \"document-domain\" feature is disabled, the setter will throw a \"SecurityError\" exception. In cases where crossOriginIsolated or originAgentCluster return true, the setter will do nothing. It is recommended to avoid using the document.domain setter, instead, use postMessage() or MessageChannel objects to communicate across origins in a safe manner. encrypted-media Encrypted Media Extensions provides an API that enables web applications to interact with content protection systems, to allow playback of encrypted audio and video. Provides access to the requestMediaKeySystemAccess() method, a part of the MediaKeys object. execution-while-not-rendered Controls if tasks should execute for nested browsing contexts (eg. iframes) when it has/is not being rendered. execution-while-out-of-viewport Controls if tasks should execute for nested browsing contexts (eg. iframes) when not within the current viewport. fullscreen Determines whether any content in a document is allowed to go fullscreen. If disabled in any document, no content in the document will be allowed to use fullscreen. geolocation The Geolocation API provides access to geographical location information associated with the host device. gyroscope Gyroscope sensor interface to monitor the rate of rotation around the three local primary axes of the device. keyboard-map Controls whether the getLayoutMap() method is exposed on the \"Keyboard\" interface. magnetometer Magnetometer sensor interface to measure a magnetic field in the X, Y and Z axis. microphone Manages access to Microphone interfaces (physical and virtual). midi Musical Instrument Digital Interface (MIDI) protocol enables electronic musical instruments, controllers and computers to communicate and synchronize with each other. navigation-override Enables the page author to take control over the behavior of spatial navigation, or to cancel it outright. Spatial navigation is the ability to move around the page directionally which can be useful for a web page built using a grid-like layout, or other predominantly non linear layouts. More often this is used in browsers on devices with limited input control, such as a TV. payment Allow merchants (i.e. web sites selling physical or digital goods) to utilise one or more payment methods with minimal integration. picture-in-picture Allow websites to create a floating video window always on top of other windows so that users may continue consuming media while they interact with other content sites, or applications on their device. This item controls whether the request Picture-in-Picture algorithm may return a SecurityError and whether pictureInPictureEnabled is true or false. publickey-credentials-get Determines whether any content in the allowed documents is allowed to successfully invoke the Web Authentication API. If disabled in any document, no content in the document will be allowed to use the foregoing methods, attempting to do so will return an error. screen-wake-lock A screen wake lock prevents the screen from turning off. Only visible documents can acquire the screen wake lock. sync-xhr The sync-xhr policy controls whether synchronous requests can be made through the XMLHttpRequest API. If disallowed in a document, then calls to send() on XMLHttpRequest objects with the synchronous flag set will fail, causing a NetworkError DOMException to be thrown. usb The WebUSB API provides a way to safely expose USB device services to the web. Controls whether the usb attribute is exposed on the Navigator object. web-share Exposes the navigator.share() API where supported, which shares the current URL via user agent provided share to locations. xr-spatial-tracking The WebXR Device API provides the interfaces necessary to enable developers to build compelling, comfortable, and safe immersive applications on the web across a wide variety of hardware form factors. Proposed Features Feature Name Description clipboard-read Read from the device clipboard via the Clipboard API clipboard-write Write to the device clipboard via the Clipboard API gamepad Determines whether any content in that document is allowed to access getGamepads(). If disabled in any document, no content in the document will be allowed to use getGamepads(), nor will the \"gamepadconnected\" and \"gamepaddisconnected\" events fire. speaker-selection Determines whether any content in a document is allowed to use the selectAudioOutput function to prompt the user to select an audio output device, or allowed to use setSinkId to change the device through which audio output should be rendered, to a non-system-default user-permitted device. Experimental Features Feature Name Description conversion-measurement Click Through Attribution Reporting. To enable this, use the Chrome command line flag --enable-blink-features=ConversionMeasurement focus-without-user-activation Helps control the use of automated focus in a main frame or <iframe>. The proposed feature provides a means for developers to block the use of automatic focus in nested contents. hid Allow a web page to communicate with HID devices (Human Interface Device) idle-detection Allow usage of the IdleDetector interface to better detect if a user is at their device, instead of trying to identify if a user has just become inactive, such as left window open, screen saver activated, screen turned off, changed tabs or changed applications. interest-cohort Federated Learning of Cohorts (FLoC) is a new way that browsers could enable interest-based advertising on the web. A site should be able to declare that it does not want to be included in the user's list of sites for cohort calculation. serial Provide direct communication between a web site and the device that it is controlling via a Serial port. To enable this, use the Chrome command line flag --enable-blink-features=Serial sync-script Unknown - No information currently available. To enable this, use the Chrome command line flag --enable-blink-features=ExperimentalProductivityFeatures. trust-token-redemption This API proposes a new per-origin storage area for “Privacy Pass” style cryptographic tokens, which are accessible in third party contexts. These tokens are non-personalized and cannot be used to track users, but are cryptographically signed so they cannot be forged. window-placement Proposal to provide additional informatiion for Multi-Screen Window Placement. vertical-scroll Vertical scroll policy is a feature introduced to assist websites in blocking certain embedded contents from interfering with vertical scrolling. Stopping a user from vertically scrolling the page might be a frustrating experience. 5.1 Customize Permissions Policy Customize Permissions Policy in HTTP Header public class Startup { //... public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //... app.UseDefaultHeaders(h=> { var policy = new PermissionsPolicy(); policy.Feature(FeatureNames.Camera).Disable(); policy.Feature(FeatureNames.Fullscreen).Enable(); policy.Feature(FeatureNames.Geolocation).Enable().Self(); policy.Feature(FeatureNames.Usb).Enable().Custom(\"https://www.dnv.com\"); policy.Feature(FeatureNames.Microphone).Enable().Self().Custom(\"https://www.google.com\"); h.Add(PermissionsPolicy.Key, policy.ToString()); }); //... } } 5.2 Enable all Permissions Policy Enable all Permissions Policy in HTTP Header public class Startup { //... public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //... app.UseDefaultHeaders(h=> h.EnableAllPermissionsPolicyForSelf()); //... } } 5.3 Disable all Permissions Policy Disable all Permissions Policy in HTTP Header public class Startup { //... public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //... app.UseDefaultHeaders(h=> h.DisableAllPermissionsPolicy()); //... } }"
  },
  "articles/userManagement.html": {
    "href": "articles/userManagement.html",
    "title": "User Management and Authorization",
    "keywords": "User Management and Authorization DNVGL.Authorization.UserManagement.ApiControllers provides restAPIs to manage user, role and company. It also provides mechanisms to authorize API endpoints. Go through Overview to understand the logic behind the package. Check out Demo Projects. Prerequisites PM> Install-Package DNVGL.Authorization.UserManagement.ApiControllers PM> Install-Package DNVGL.Authorization.UserManagement.EFCore Basic Usage This simple example will show you the minimum steps to setup user management and authorization in a ASP.NET Core project. The example uses SQL Server as database and Veracity authentication (Azure AD B2C). 1. register user management module in ASP.NET core project. PM> Install-Package Microsoft.EntityFrameworkCore.SqlServer public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagement().UseEFCore(new EFCoreOptions { DbContextOptionsBuilder = options => options.UseSqlServer(@\"Data Source=.\\SQLEXPRESS;Initial Catalog=UserManagement;Trusted_Connection=Yes;\") }); //... } public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //... //Put UseRouting or MapControllers before UseAuthentication and UseAuthorization //app.MapControllers(); app.UseRouting(); app.UseAuthentication().UseAuthorization(); //... //... //The following code is required if app.UseRouting() is used instead of app.MapControllers(); app.UseEndpoints(endpoints => { //... endpoints.MapDefaultControllerRoute(); }); //... } } 2. Create tables in database Find and execute NewTableScript.sql which is located at the content directory once you imported the package in your project. 3. Create a super admin in Table - Users. The following is sample. | Id | Email | FirstName | LastName | VeracityId | SuperAdmin | Active | Deleted | |--|--|--|--|--|--|--|--| | 1 | email | first name | last name | veracity id | 1 | 1 | 0 4. Generate Swagger api documentation (Optional) NOTE: This step is optional. You can generate API docs in your own way. The following code has dependency on Nuget package - Swashbuckle.AspNetCore. Additionaly, you will get more explanation if you set apidocs/DNVGL.Authorization.UserManagement.ApiControllers.xml's Copy to Output Directory as Copy Always. public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddControllers(); services.AddSwaggerGen(c => { // swagger documentaion group for User Management. c.SwaggerDoc(\"UserManagement\", new OpenApiInfo { Title = \"User Management\", Version = \"v1\" }); // swagger documentaion group for your system. c.SwaggerDoc(\"WebAPI\", new OpenApiInfo { Title = \"Web API\", Version = \"v1\" }); c.TagActionsBy(api => { if (api.GroupName != null) { return new[] { api.GroupName }; } var controllerActionDescriptor = api.ActionDescriptor as ControllerActionDescriptor; if (controllerActionDescriptor != null) { return new[] { controllerActionDescriptor.ControllerName }; } throw new InvalidOperationException(\"Unable to determine tag for endpoint.\"); }); c.DocInclusionPredicate((name, api) => { if (name == \"UserManagement\") return api.GroupName != null && api.GroupName.StartsWith(\"UserManagement\"); else return api.GroupName == null; }); var xmlFile = $\"DNVGL.Authorization.UserManagement.ApiControllers.xml\"; var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile); if (File.Exists(xmlPath)) c.IncludeXmlComments(xmlPath); }); //... } //... public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //... app.UseSwagger(); app.UseSwaggerUI(c => { c.SwaggerEndpoint(\"/swagger/UserManagement/swagger.json\", \"User Management API v1\"); c.SwaggerEndpoint(\"/swagger/WebAPI/swagger.json\", \"Web API v1\"); }); //... } } 5. Explore user management APIs Build and Run your project. Open swagger in Browser 6. Define permissions Define permissions by implementing interface - IPermissionMatrix. The following code defined two permissions. public class PermissionBook : IPermissionMatrix { public enum WeatherPermission { //... [PermissionValue(id: \"8\", key: \"ReadWeather\", name: \"Read Weather\", group: \"Weather\", description: \"ReadWeather\")] ReadWeather, [PermissionValue(id: \"8\", key: \"WriteWeather\", name: \"Write Weather\", group: \"Weather\", description: \"WriteWeather\")] WriteWeather, //... other permissions } } 7. Authorize API with permissions Decorates API actions with permission. [HttpGet] [PermissionAuthorize(WeatherPermission.ReadWeather)] public IEnumerable<WeatherForecast> Get() { //... api logic } Recommended content Read First ✓ ✓ ✓ Something you need to know before using the package to handle user management and authorization. Integration with ASP.NET Core's Role-based authorization ✓ Integrate user management module with Role-based authorization in ASP.NET Core. In this way, you are allowed to authorize API with asp.net core's [Authorize(Roles = \"****\")]. Guidance for different databases Use Azure CosmosDB as database Use SQL Server as database User other databases. The package can use all database engines supported by EF Core 5.0+. Here is a list - EF Core 5.0 Database providers Guidance for configuration User Management Configuration Guidance for customization Extend Data model - Company, Role, User Replace EF Core with your own data access Guidance for access control ✓ Resource access control guide you to control access on resource of company. Guidance for defining premissions outside souce code Define permissions in json, database or other places"
  },
  "articles/userManagement/accessControl.html": {
    "href": "articles/userManagement/accessControl.html",
    "title": "Resource Access Control",
    "keywords": "Resource Access Control In this section, you learn how to control access on resource of a company. It is useful in user management modes Company_CompanyRole_User and Company_GlobalRole_User. Prerequisites✓ First of all, Specify a way to get company identity. there are three different ways to do that. 1. Put companyId in API route, or as query parameter. companyId is case senstive here. // From Route [Route(\"api/company/{companyId}/users\")] public async Task<UserViewModel> GetUsers([FromRoute] string companyId) { //... logic } // Or from query [Route(\"api/company/users\")] public async Task<UserViewModel> GetUsers([FromQuery] string companyId) { //... logic } 2. Put custom variable name of company id in API route, or as query parameter. For example, Replace companyId with companyKey. // From Route [CompanyIdentityFieldNameFilter(companyIdInRoute: \"companyKey\")] [Route(\"api/company/{companyKey}/users\")] public async Task<UserViewModel> GetUsers([FromRoute] string companyKey) { //... logic } // Or from query [CompanyIdentityFieldNameFilter(companyIdInQuery: \"companyKey\")] [Route(\"api/company/users\")] public async Task<UserViewModel> GetUsers([FromQuery] string companyKey) { //... logic } 3. Put a global function to get company identity from httpcontext public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagement( //... PermissionOptions = new PermissionOptions() { //... GetCompanyIdentity = (httpContext) =>{ ///... customized logic } } //... } } Limit access to company users If the company resouce is only accessible to users of that company. Put AccessibleCompanyFilterAttribute on you API endpoint. [AccessibleCompanyFilter] public async Task<IEnumerable<UserViewModel>> GetUsers([FromRoute] string companyId) { //... } Open access to user who have permission to view all companys' resource. Like super admin, you can open access to those users if required. Put AccessCrossCompanyPermissionFilterAttribute on API and assign permsission need to check. For below case, any user who has ViewCompany permission can get users of every company. [AccessCrossCompanyPermissionFilter(Premissions.ViewCompany)] [AccessibleCompanyFilter] public async Task<IEnumerable<UserViewModel>> GetUsers([FromRoute] string companyId) { //... }"
  },
  "articles/userManagement/authorize.html": {
    "href": "articles/userManagement/authorize.html",
    "title": "Integration with Role-based authorization in ASP.NET Core",
    "keywords": "Integration with Role-based authorization in ASP.NET Core In this section, you learn how to use Role-based authorization in an ASP.NET core project. First of all, It's required to have a basic understanding of Role-based authorization in ASP.NET Core. Configuration to enable Role-based authorization. public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddAuthentication().AddCookie(o => o.Events.AddCookieValidateHandler()); //... } public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //... //Put UseRouting before UseAuthentication and UseAuthorization app.UseRouting(); app.UseAuthentication(); app.UseAuthorization(); //... } } Configuration to enable Role-based authorization if DNVGL.OAuth.Web is used in authentication. public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddOidc(o => { //.... }, cookieOption => cookieOption.Events.AddCookieValidateHandler()); //... } public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //... //Put UseRouting before UseAuthentication and UseAuthorization app.UseRouting(); app.UseAuthentication(); app.UseAuthorization(); //... } } Then AuthorizeAttribute can be used to decorate an API to perfrom authorization. [HttpGet] [Authorize(Roles = \"ReadWeather\")] public IEnumerable<WeatherForecast> Get() { //... api logic } Alternatively, PermissionAuthorizeAttribute is still working. [HttpGet] [PermissionAuthorize(WeatherPermission.ReadWeather)] public IEnumerable<WeatherForecast> Get() { //... api logic }"
  },
  "articles/userManagement/configuration.html": {
    "href": "articles/userManagement/configuration.html",
    "title": "User Management Configuration",
    "keywords": "User Management Configuration Config Database Use Azure CosmosDB as database Use Azure SQL Server as database User other databases. The package can use all database engines supported by EF Core 5.0+. Here is a list - EF Core 5.0 Database providers User Management Configuration Config unauthorized behavior The package provides the following two built-in methodologies to handle unauthorized access. | Name | Description| |--|--| | Return403ForbiddenCode | It will send 403 reponse to the client directly. It is default hehavior| | ThrowExceptionDirectly | It will throw UnauthorizedAccessException directly. Then developer should capture this exception and handle properly. | Change the default heavior to throw a exception directly. public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagement( //... PermissionOptions = new PermissionOptions() { //... HandleUnauthorizedAccess = BuiltinUnauthorizedAccessHandler.ThrowExceptionDirectly }) //... } } Customize unauthorized behavior public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagement( //... PermissionOptions = new PermissionOptions() { //... HandleUnauthorizedAccess = (httpContext, missedPermission) =>{ ///... customized logic } } //... } } Config logic to get user id in Identity Provider By default, The pacakge reads user id from the Claim which type is userId. It is feasible in case Veracity Identity Provider (Azure AD B2C). Setup your own logic if required. public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagement( //... PermissionOptions = new PermissionOptions() { //... GetUserIdentity = (User) => User.Claims.FirstOrDefault(t => t.Type == \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\")?.Value } //... } }"
  },
  "articles/userManagement/cosmos.html": {
    "href": "articles/userManagement/cosmos.html",
    "title": "Use Azure CosmosDB as database",
    "keywords": "Use Azure CosmosDB as database Prerequisites Azure CosmosDB instance is created. The following instruction assumes there is a collection named User exists in database named UserManagement. PM> Install-Package Microsoft.EntityFrameworkCore.Cosmos Register user management module in ASP.NET core project public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagement().UseEFCore( new EFCoreOptions { DbContextOptionsBuilder = options => options.UseCosmos(\"***Connection string***\", \"UserManagement\"), ModelBuilder = (modelBuilder) => modelBuilder.HasDefaultContainer(\"User\"), }); //... } } Create a super admin in database. The following is a user record template. Replace \"***\" with the real value. Id is the primary key and unique. Create a container with the partition key set to \"__partitionKey\" in Azure Cosmos DB. NOTE: Discriminator and id are two field managed by EF Core. id is a string in the format of [Discriminator]|[Id]. For user record, Discriminator is a constant - \"User\". { \"Id\": \"u1\", \"Active\": true, \"CreatedBy\": \"***\", \"CreatedOnUtc\": \"***\", \"Deleted\": false, \"Description\": \"***\", \"Discriminator\": \"User\", \"Email\": \"***\", \"FirstName\": \"***\", \"LastName\": \"***\", \"SuperAdmin\": true, \"UpdatedBy\": \"***\", \"UpdatedOnUtc\": \"***\", \"VeracityId\": \"***\", \"id\": \"User|u1\" }"
  },
  "articles/userManagement/customModel.html": {
    "href": "articles/userManagement/customModel.html",
    "title": "Customize Data Model",
    "keywords": "Customize Data Model In this section, you learn how to extend data model of Company, Role and User with extra fields to support a project's need. Prerequisites PM> Install-Package DNVGL.Authorization.UserManagement.Abstraction Extend data models by inheriting from built-in data models public class MyCompany:Company { public string ExtraCompanyProperty { get; set; } } public class MyRole : Role { public string ExtraRoleProperty { get; set; } } public class MyUser : User { public string ExtraUserProperty { get; set; } } Register your data models Only User model is customized public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagementWithCustomModel<MyUser>().UseEFCore<MyUser>(new EFCoreOptions { DbContextOptionsBuilder = options => options.UseSqlServer(@\"Data Source=.\\SQLEXPRESS;Initial Catalog=UserManagement;Trusted_Connection=Yes;\") }); //... } } Both Company and User model are customized public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagementWithCustomModel<MyCompany, MyUser>().UseEFCore<MyCompany, MyUser>(new EFCoreOptions { DbContextOptionsBuilder = options => options.UseSqlServer(@\"Data Source=.\\SQLEXPRESS;Initial Catalog=UserManagement;Trusted_Connection=Yes;\") }); //... } } All Company, Role and User model are customized public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagementWithCustomModel<MyCompany, MyRole, MyUser>().UseEFCore<MyCompany, MyRole, MyUser>(new EFCoreOptions { DbContextOptionsBuilder = options => options.UseSqlServer(@\"Data Source=.\\SQLEXPRESS;Initial Catalog=UserManagement;Trusted_Connection=Yes;\") }); //... } } API for custom model POST and PUT api endpoints are different between built-in model and custom model. The following the API for custom model. Path HTTP Action /api/companies/custommodel POST /api/companies/custommodel/{id} PUT /api/company/{companyId}/roles/custommodel POST /api/company/{companyId}/roles/custommodel/{id} PUT /api/company/{companyId}/users/custommodel POST /api/company/{companyId}/users/custommodel/{id} PUT /api/admin/users/custommodel POST /api/admin/users/custommodel/{id} PUT"
  },
  "articles/userManagement/dataAccess.html": {
    "href": "articles/userManagement/dataAccess.html",
    "title": "Customize Data Access Implementation",
    "keywords": "Customize Data Access Implementation In this section, you learn how to replace built-in EFCore implementation with your own data access implementation. Prerequisites PM> Install-Package DNVGL.Authorization.UserManagement.Abstraction PM> Install-Package DNVGL.Authorization.Web Implement interfaces The following four interfaces needs to be implemented. public class YouOwnCompanyRepository: ICompany<Company> { //... } public class YouOwnRoleRepository: IRole<Role> { //... } public class YouOwnUserRepository: IUser<User> { //... } public class YouOwnUserPermissionReader : IUserPermissionReader { //... } Register interface implementation public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagement(); services.AddScoped<IUserPermissionReader, YouOwnUserPermissionReader>() .AddScoped<IRole<Role>, YouOwnRoleRepository>() .AddScoped<IUser<User>, YouOwnUserRepository>() .AddScoped<ICompany<Company>, YouOwnCompanyRepository>(); //... } }"
  },
  "articles/userManagement/dataModel.html": {
    "href": "articles/userManagement/dataModel.html",
    "title": "Data Model",
    "keywords": "Data Model In this section, you learn the built-in data model in User Management Package. These model is defined in package - DNVGL.Authorization.UserManagement.Abstraction. You are allowed to extend data models with extra fields. Extend Data model - Company, Role, User Company Field Type Description Id string The primary key of the company Name string Description string ServiceId string It is the veracity service id. DomainUrl string It is domain url like dnv.com. or the secondary directory in url like oilgas in dnv.com/oilgas/phonebook. Permissions string Permissions are combined as a string which use semicolon(;) as a delimiter. Active bool Deleted bool true if the company is soft deleted, otherwise false. CreatedBy string CreatedOnUtc DateTime UpdatedBy string UpdatedOnUtc DateTime Role Field Type Description Id string The primary key of the role Name string Description string Active bool Deleted bool true if the role is soft deleted, otherwise false. Permissions string Permissions are combined as a string which use semicolon(;) as a delimiter. CompanyId string The id of the company to which this role belongs. It is null if it is a global role. CreatedBy string CreatedOnUtc DateTime UpdatedBy string UpdatedOnUtc DateTime User Field Type Description Id string The primary key of the user Email string FirstName string LastName string VeracityId string It is an id provided by identity provider. Description string RoleIds string Role's ids are combined as a string which use semicolon(;) as a delimiter. CompanyIds string Company's ids are combined as a string which use semicolon(;) as a delimiter. Active bool SuperAdmin bool true if the user is a super admin, otherwise false. Deleted bool true if the user is soft deleted, otherwise false. CreatedBy string CreatedOnUtc DateTime UpdatedBy string UpdatedOnUtc DateTime"
  },
  "articles/userManagement/overview.html": {
    "href": "articles/userManagement/overview.html",
    "title": "Overview",
    "keywords": "Overview In this section, you learn the different modes of user management, permission setup, package limitations, and decide the adoption of the package. 1. Three user management modes one user is allowed to be assigned to mutiple companies. Company_CompanyRole_User is the default mode. Mode Company Role User Company_CompanyRole_User ✓ ✓ Role is defined at company level. ✓ Company_GlobalRole_User ✓ ✓ Role is defined at global level. ✓ Role_User ☒ ✓ ✓ Change default user management mode API endpoint and schema has slight difference on different modes. public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagement( new UserManagementOptions { //... Mode = UserManagementMode.Role_User }); //... } } 2. Permission setup Build-in Permissions The following are serveral built-in permissions used to authorize user management apis. | Permission | Description | |--|--| | Premissions.ManageUser | permission to make change on user. | | Premissions.ViewUser | permission to read user. | | Premissions.ManageRole | permission to make change on role. | | Premissions.ViewRole | permission to read role. | | Premissions.ManageCompany | permission to make change on company. | | Premissions.ViewCompany | permission to read company. | Create your own premissions Define permissions by implementing interface - IPermissionMatrix. The following code defined two permissions. You are also allowed to manage permissions outside of the source code. Here is the instruction. public class PermissionBook : IPermissionMatrix { public enum WeatherPermission { //... [PermissionValue(id: \"8\", key: \"ReadWeather\", name: \"Read Weather\", group: \"Weather\", description: \"ReadWeather\")] ReadWeather, [PermissionValue(id: \"9\", key: \"WriteWeather\", name: \"Write Weather\", group: \"Weather\", description: \"WriteWeather\")] WriteWeather, //... other permissions } } Authorize API with permissions Decorates API actions with permission. You are also allowed to use Role-based authorization like [Authorize(Roles = \"****\")]. Here is the instruction. [HttpGet] [PermissionAuthorize(WeatherPermission.ReadWeather)] public IEnumerable<WeatherForecast> Get() { //... api logic } 3. Data Model The predefeind data models of Company, Role and User may not fully meet your needs. Please check the built-in model definition, and follow this instruction to extend the data model. 4. Company/ Role/ User deletion By default, the soft deletion is enabled. Change the default behavior to hard delete record. public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagement().UseEFCore(new EFCoreOptions { DbContextOptionsBuilder = options => options.UseSqlServer(@\"Data Source=.\\SQLEXPRESS;Initial Catalog=UserManagement;Trusted_Connection=Yes;\"), HardDelete = true }); //... } } 5. Data Access Implementation We provide data access implementation in package - DNVGL.Authorization.UserManagement.EFCore. It has dependency on EF Core 5.0+. If you don't want to introduce EF Core in your project. then this package is not required to be installed. Here is an instruction to Replace EF Core with your own data access 6. Performance ✓ By default, The package reads and check user's permission from database for every http request. You can change this behavior to load user's permission in to claim (in cookie), and then read, check user's premission from claim. The following is to setup such behavior. public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddAuthentication().AddCookie(o => o.Events.AddCookieValidateHandler(services)); //... } } 7. Swagger UI By default, Swagger UI probably do not show User Management APIs. Then you could follow the instructuon to get it displayed."
  },
  "articles/userManagement/permissionStore.html": {
    "href": "articles/userManagement/permissionStore.html",
    "title": "Configure Permission definition out of source code.",
    "keywords": "Configure Permission definition out of source code. In this section, you learn how to configure permissions out of source code. Permission data is allowed to be stored in different forms like Json file, xml file or in database. Prerequisites PM> Install-Package DNVGL.Authorization.Web Implement interface IPermissionRepository Interface IPermissionRepository is required to be implemented to load meta data of all permssions. public class OwnPermissionRepository : IPermissionRepository { public async Task<IEnumerable<PermissionEntity>> GetAll() { //... logic } } PermissionEntity Definition Field Type Description Id string The primary key of a permission Key string A readable unique key of a permission Name string Permission name Description string Permission description Group string Permission group Create mandatory permissions Key ManageUser ViewUser ViewRole ManageRole ViewCompany ManageCompany Register IPermissionRepository service public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagement().UseEFCore(new EFCoreOptions { DbContextOptionsBuilder = options => options.UseSqlServer(@\"Data Source=.\\SQLEXPRESS;Initial Catalog=UserManagement;Trusted_Connection=Yes;\") }).UsePermissionRepository<OwnPermissionRepository>(); //... } }"
  },
  "articles/userManagement/sqlserver.html": {
    "href": "articles/userManagement/sqlserver.html",
    "title": "Use SQL Server as database",
    "keywords": "Use SQL Server as database Prerequisites PM> Install-Package Microsoft.EntityFrameworkCore.SqlServer Register user management module in ASP.NET core project public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddUserManagement().UseEFCore( new UserManagementOptions { DbContextOptionsBuilder = options => options.UseSqlServer(@\"Data Source=.\\SQLEXPRESS;Initial Catalog=UserManagement;Trusted_Connection=Yes;\") }); //... } } 2. Create tables in database Find and execute NewTableScript.sql which is located at the Content directory once you imported the package in your project. 3. Create a super admin in Table - Users. The following is sample. | Id | Email | FirstName | LastName | VeracityId | SuperAdmin | Active | Deleted | |--|--|--|--|--|--|--|--| | 1 | email | first name | last name | veracity id | 1 | 1 | 0"
  },
  "articles/userManagement/swagger.html": {
    "href": "articles/userManagement/swagger.html",
    "title": "APIs documentation with Swagger",
    "keywords": "APIs documentation with Swagger In this section, you learn how to expose User Management APIs documentaion in Swagger UI. By default, they are probably not shown in Swagger UI. Then you could follow below instructuon to get it displayed on Swagger UI. Prerequisites PM> Swashbuckle.AspNetCore Configure swagger in Startup.cs It will serperate User Management APIs from your project APIs. public class Startup { //... public void ConfigureServices(IServiceCollection services) { //... services.AddControllers(); services.AddSwaggerGen(c => { // swagger documentaion group for User Management. c.SwaggerDoc(\"UserManagement\", new OpenApiInfo { Title = \"User Management\", Version = \"v1\" }); // swagger documentaion group for your system. c.SwaggerDoc(\"WebAPI\", new OpenApiInfo { Title = \"Web API\", Version = \"v1\" }); c.TagActionsBy(api => { if (api.GroupName != null) { return new[] { api.GroupName }; } var controllerActionDescriptor = api.ActionDescriptor as ControllerActionDescriptor; if (controllerActionDescriptor != null) { return new[] { controllerActionDescriptor.ControllerName }; } throw new InvalidOperationException(\"Unable to determine tag for endpoint.\"); }); c.DocInclusionPredicate((name, api) => { if (name == \"UserManagement\") return api.GroupName != null && api.GroupName.StartsWith(\"UserManagement\"); else return api.GroupName == null; }); var xmlFile = $\"DNVGL.Authorization.UserManagement.ApiControllers.xml\"; var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile); if (File.Exists(xmlPath)) c.IncludeXmlComments(xmlPath); }); //... } //... public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //... app.UseSwagger(); app.UseSwaggerUI(c => { c.SwaggerEndpoint(\"/swagger/UserManagement/swagger.json\", \"User Management API v1\"); c.SwaggerEndpoint(\"/swagger/WebAPI/swagger.json\", \"Web API v1\"); }); //... } } Copy document to output (optional) It is an optionanl step. With this step, more infomation will shown on the Swagger UI. otherwise, only API endpoints are displayed on Swagger UI. Open swagger in Browser By default, the link to open swagger is the [HOST]/swagger. Then choose User Management API from definition drowdown list."
  },
  "articles/WebProjectTemplates.html": {
    "href": "articles/WebProjectTemplates.html",
    "title": "Introduction to Solution Web Project Templates",
    "keywords": "Introduction to Solution Web Project Templates Project templates produce ready-to-run projects that make it easy for users to start with a working set of code. .NET includes a few project templates such as a console application or a class library. So we provide a project template to help you initialize web project. We don't plan to introduce how to setup a project template via dotnet core cli. If you are interested, please refer Tutorial: Create a template package . Introduce templates into dotnet CLI Tools Overview The DNV.SolutionPackage.ProjectTemplates helps developer to quickly initialize a work around web application project. We don't need to take more time on setting up. The developer can focus on business domain development tasks. This template contains authentication with Veracity. If the application need user management, it is also provided. Install the template package There are two methods to install SolutionPackage project templates. One is to install it directly from Nuget package source. Other is to install from local file. dotnet new -i DNV.SolutionPackage.ProjectTemplates::1.0.0 --nuget-source \"https://dnvgl-one.pkgs.visualstudio.com/_packaging/DNVGL.SolutionPackage/nuget/v3/index.json\" dotnet new -i C:\\Temp\\DNV.SolutionPackage.ProjectTemplates.1.0.0.nupkg The following template packages will be installed: C:\\Temp\\DNV.SolutionPackage.ProjectTemplates.1.0.0.nupkg Success: DNV.SolutionPackage.ProjectTemplates::1.0.0 installed the following templates: Template Name Short Name Language Tags ------------------------------- -------------- -------- ---- DNV.SolutionPacakge.WebTemplate DNVWebTemplate DNV List the templates dotnet new --list After the template package installation, DNV.SolutionPackages.WebTemplate is in the templates list. You also can use dotnet new --list command to list the detail which templates have installed. dotnet new -l These templates matched your input: Template Name Short Name Language Tags -------------------------------------------- ------------------- ---------- ------------------------------------- ASP.NET Core Empty web [C#],F# Web/Empty ASP.NET Core gRPC Service grpc [C#] Web/gRPC ASP.NET Core Web API webapi [C#],F# Web/WebAPI ASP.NET Core Web App webapp,razor [C#] Web/MVC/Razor Pages ASP.NET Core Web App (Model-View-Controller) mvc [C#],F# Web/MVC ASP.NET Core with Angular angular [C#] Web/MVC/SPA ASP.NET Core with React.js react [C#] Web/MVC/SPA ASP.NET Core with React.js and Redux reactredux [C#] Web/MVC/SPA Blazor Server App blazorserver [C#] Web/Blazor Blazor WebAssembly App blazorwasm [C#] Web/Blazor/WebAssembly/PWA Class Library classlib [C#],F#,VB Common/Library Console App console [C#],F#,VB Common/Console DNV.SolutionPacakge.WebTemplate DNVWebTemplate DNV dotnet gitignore file gitignore Config ... There are some built-in template packages, also you see our DNV.SolutionPackage.WebTemplate in the list. Uninstall the template package The dotnet new --uninstall command can remove the template. dotnet new --uninstall DNV.SolutionPackage.ProjectTemplates dotnet new -u DNV.SolutionPackage.ProjectTemplates Success: DNV.SolutionPackage.ProjectTemplates::1.0.0 was uninstalled. Create project via Solution Package project templates Let's take a look the functions of DNV.SolutionPackage.WebTemplate. The dotnet new DNVWebTemplate --help command list all the parameters. dotnet new DNVWebTemplate --help DNV.SolutionPacakge.WebTemplate Author: Tim Tu Options: -t|--template The type of webtemplate to use basic - basic management - management Default: basic -s|--skipRestore If specified, skips the automatic restore of the project on create. bool - Optional Default: false -sk|--skipDBSetup If specified, skips the DB creation process on create. bool - Optional Default: false The -t|--template option chooses main functions will be installed in created project. The basic is default value, the created project will integrate authentication library DNVGL.OAuth.Web which also is from DNV.SolutionPackage. The management option not only has all basic functions, but also integrates user management The -s|--skipRestore option restores the dependencies of the created project. The default value is false. Doesn't restore the dependencies after created project. The -sk|--skipDBSetup option must works with -t|--template management option. It will create tables related with user management in local SQL Server database. If there is no SQL Server in your local machine, A folder Scripts will be created in solution folder. The Scripts folder contains db.bat and dbcreation.sql files. Use dbcreeation.sql to generate tables in specify database. The dotnet new DNVWebTemplate command create project from DNV.SolutionPackage.WebTemplate template. dotnet new DNVWebTemplate --template management --name Demo.Management.Website --output ManagementSolution The template \"DNV.SolutionPacakge.WebTemplate\" was created successfully. Processing post-creation actions... No Primary Outputs to restore. Template is configured to run the following action: Actual command: Scripts/db.bat Do you want to run this action [Y(yes)|N(no)]? N In the work folder, there are new solution and project files in folder ManagementSolution. When the website is running, the first access user will be added as administrator. This function is implemented in AuthController.cs file. Please pay attention when you use in your business. The front-end of website is SPA application. The source code is in ClientApp folder. Please refer https://webapptemplatedoc.z6.web.core.windows.net/articles/intro.html ."
  },
  "index.html": {
    "href": "index.html",
    "title": "Solution Package",
    "keywords": "Solution Package A collection of packages and tools for developers to support rapid, robust and extensible development of applications and services within DNV. Some of the supported features include: Authentication OpenId connection authentication OAuth HTTP client factory Security Security headers User management Secrets manager Integration Veracity - My Services API v3 clients Getting started Installing packages"
  }
}